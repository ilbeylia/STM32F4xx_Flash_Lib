
Flash_Lib_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008010  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b4  080081b4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081bc  080081bc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080081c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000968  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009e4  200009e4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001551d  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e51  00000000  00000000  0003560c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001278  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e04  00000000  00000000  0003a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000243e2  00000000  00000000  0003b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019ba1  00000000  00000000  0005f8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb547  00000000  00000000  0007945f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f24  00000000  00000000  001449a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001498cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008180 	.word	0x08008180

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008180 	.word	0x08008180

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Flash_WR>:
 *      Author: ilbeyli
 */
#include "Flash_Process.h"


void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80004ce:	f000 fe93 	bl	80011f8 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 80004d2:	2102      	movs	r1, #2
 80004d4:	200b      	movs	r0, #11
 80004d6:	f000 fff1 	bl	80014bc <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2200      	movs	r2, #0
 80004de:	461c      	mov	r4, r3
 80004e0:	4615      	mov	r5, r2
 80004e2:	4622      	mov	r2, r4
 80004e4:	462b      	mov	r3, r5
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	2002      	movs	r0, #2
 80004ea:	f000 fe31 	bl	8001150 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80004ee:	f000 fea5 	bl	800123c <HAL_FLASH_Lock>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bdb0      	pop	{r4, r5, r7, pc}

080004fa <Flash_RD>:

uint32_t Flash_RD(uint32_t Flash_Address){
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
	return *((uint32_t*)Flash_Address);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
}
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc72 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f890 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f98c 	bl	800083c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000524:	f000 f8f6 	bl	8000714 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000528:	f000 f922 	bl	8000770 <MX_I2S3_Init>
  MX_SPI1_Init();
 800052c:	f000 f950 	bl	80007d0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000530:	f007 f9d2 	bl	80078d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  read_data = Flash_RD(0x080E0000);
 8000534:	483e      	ldr	r0, [pc, #248]	; (8000630 <main+0x11c>)
 8000536:	f7ff ffe0 	bl	80004fa <Flash_RD>
 800053a:	4603      	mov	r3, r0
 800053c:	4a3d      	ldr	r2, [pc, #244]	; (8000634 <main+0x120>)
 800053e:	6013      	str	r3, [r2, #0]

  if (read_data<=10){
 8000540:	4b3c      	ldr	r3, [pc, #240]	; (8000634 <main+0x120>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b0a      	cmp	r3, #10
 8000546:	d80e      	bhi.n	8000566 <main+0x52>
	  read_data +=1;
 8000548:	4b3a      	ldr	r3, [pc, #232]	; (8000634 <main+0x120>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a39      	ldr	r2, [pc, #228]	; (8000634 <main+0x120>)
 8000550:	6013      	str	r3, [r2, #0]
//	  Flash_Erase(0x0080E0000, 4);
	  test=1;
 8000552:	4b39      	ldr	r3, [pc, #228]	; (8000638 <main+0x124>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
	  Flash_WR(0x080E0000, read_data);
 8000558:	4b36      	ldr	r3, [pc, #216]	; (8000634 <main+0x120>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	4834      	ldr	r0, [pc, #208]	; (8000630 <main+0x11c>)
 8000560:	f7ff ffb0 	bl	80004c4 <Flash_WR>
 8000564:	e003      	b.n	800056e <main+0x5a>
  }
  else {
	  Flash_WR(0x080E0000, 0x00);
 8000566:	2100      	movs	r1, #0
 8000568:	4831      	ldr	r0, [pc, #196]	; (8000630 <main+0x11c>)
 800056a:	f7ff ffab 	bl	80004c4 <Flash_WR>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800056e:	f007 f9d9 	bl	8007924 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if(read_data < 5){
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <main+0x120>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d840      	bhi.n	80005fc <main+0xe8>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000580:	482e      	ldr	r0, [pc, #184]	; (800063c <main+0x128>)
 8000582:	f001 f97f 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058c:	482b      	ldr	r0, [pc, #172]	; (800063c <main+0x128>)
 800058e:	f001 f979 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000598:	4828      	ldr	r0, [pc, #160]	; (800063c <main+0x128>)
 800059a:	f001 f973 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	4825      	ldr	r0, [pc, #148]	; (800063c <main+0x128>)
 80005a6:	f001 f96d 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_Delay(read_data*50);
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <main+0x120>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2232      	movs	r2, #50	; 0x32
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fc95 	bl	8000ee4 <HAL_Delay>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c0:	481e      	ldr	r0, [pc, #120]	; (800063c <main+0x128>)
 80005c2:	f001 f95f 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	481b      	ldr	r0, [pc, #108]	; (800063c <main+0x128>)
 80005ce:	f001 f959 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d8:	4818      	ldr	r0, [pc, #96]	; (800063c <main+0x128>)
 80005da:	f001 f953 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e4:	4815      	ldr	r0, [pc, #84]	; (800063c <main+0x128>)
 80005e6:	f001 f94d 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_Delay(read_data*50);
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <main+0x120>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2232      	movs	r2, #50	; 0x32
 80005f0:	fb02 f303 	mul.w	r3, r2, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fc75 	bl	8000ee4 <HAL_Delay>
 80005fa:	e7b8      	b.n	800056e <main+0x5a>
    }
    else{
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <main+0x128>)
 8000604:	f001 f93e 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <main+0x128>)
 8000610:	f001 f938 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <main+0x128>)
 800061c:	f001 f932 	bl	8001884 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0x128>)
 8000628:	f001 f92c 	bl	8001884 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 800062c:	e79f      	b.n	800056e <main+0x5a>
 800062e:	bf00      	nop
 8000630:	080e0000 	.word	0x080e0000
 8000634:	2000018c 	.word	0x2000018c
 8000638:	20000190 	.word	0x20000190
 800063c:	40020c00 	.word	0x40020c00

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 fd06 	bl	8008060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fae4 	bl	8003c94 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d2:	f000 f9b1 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2105      	movs	r1, #5
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fd45 	bl	8004184 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000700:	f000 f99a 	bl	8000a38 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x50>)
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <MX_I2C1_Init+0x54>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C1_Init+0x50>)
 8000720:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_I2C1_Init+0x58>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_I2C1_Init+0x50>)
 8000732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_I2C1_Init+0x50>)
 8000752:	f002 fcbb 	bl	80030cc <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 f96c 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000098 	.word	0x20000098
 8000768:	40005400 	.word	0x40005400
 800076c:	000186a0 	.word	0x000186a0

08000770 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <MX_I2S3_Init+0x58>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2S3_Init+0x54>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <MX_I2S3_Init+0x5c>)
 800079a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007b0:	f002 fdd0 	bl	8003354 <HAL_I2S_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ba:	f000 f93d 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000ec 	.word	0x200000ec
 80007c8:	40003c00 	.word	0x40003c00
 80007cc:	00017700 	.word	0x00017700

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_SPI1_Init+0x64>)
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_SPI1_Init+0x68>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI1_Init+0x64>)
 80007fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000800:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI1_Init+0x64>)
 800081c:	220a      	movs	r2, #10
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_SPI1_Init+0x64>)
 8000822:	f003 fffb 	bl	800481c <HAL_SPI_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800082c:	f000 f904 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000134 	.word	0x20000134
 8000838:	40013000 	.word	0x40013000

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a71      	ldr	r2, [pc, #452]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a6a      	ldr	r2, [pc, #424]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b68      	ldr	r3, [pc, #416]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a63      	ldr	r2, [pc, #396]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b5d      	ldr	r3, [pc, #372]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a5c      	ldr	r2, [pc, #368]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a55      	ldr	r2, [pc, #340]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b4f      	ldr	r3, [pc, #316]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a4e      	ldr	r2, [pc, #312]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <MX_GPIO_Init+0x1e4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2108      	movs	r1, #8
 80008fe:	4849      	ldr	r0, [pc, #292]	; (8000a24 <MX_GPIO_Init+0x1e8>)
 8000900:	f000 ffc0 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2101      	movs	r1, #1
 8000908:	4847      	ldr	r0, [pc, #284]	; (8000a28 <MX_GPIO_Init+0x1ec>)
 800090a:	f000 ffbb 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090e:	2200      	movs	r2, #0
 8000910:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000914:	4845      	ldr	r0, [pc, #276]	; (8000a2c <MX_GPIO_Init+0x1f0>)
 8000916:	f000 ffb5 	bl	8001884 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800091a:	2308      	movs	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x1e8>)
 8000932:	f000 fe0b 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4836      	ldr	r0, [pc, #216]	; (8000a28 <MX_GPIO_Init+0x1ec>)
 800094e:	f000 fdfd 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000952:	2308      	movs	r3, #8
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	482e      	ldr	r0, [pc, #184]	; (8000a28 <MX_GPIO_Init+0x1ec>)
 800096e:	f000 fded 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000976:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	482a      	ldr	r0, [pc, #168]	; (8000a30 <MX_GPIO_Init+0x1f4>)
 8000988:	f000 fde0 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800098c:	2304      	movs	r3, #4
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4825      	ldr	r0, [pc, #148]	; (8000a34 <MX_GPIO_Init+0x1f8>)
 80009a0:	f000 fdd4 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b6:	2305      	movs	r3, #5
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_GPIO_Init+0x1f8>)
 80009c2:	f000 fdc3 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4813      	ldr	r0, [pc, #76]	; (8000a2c <MX_GPIO_Init+0x1f0>)
 80009e0:	f000 fdb4 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e4:	2320      	movs	r3, #32
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_GPIO_Init+0x1f0>)
 80009f8:	f000 fda8 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0x1e8>)
 8000a12:	f000 fd9b 	bl	800154c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a82:	2007      	movs	r0, #7
 8000a84:	f000 fb22 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_I2C_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12c      	bne.n	8000b10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ad2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad8:	2312      	movs	r3, #18
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	480c      	ldr	r0, [pc, #48]	; (8000b20 <HAL_I2C_MspInit+0x8c>)
 8000af0:	f000 fd2c 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400

08000b24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <HAL_I2S_MspInit+0xf0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d15a      	bne.n	8000c0a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b54:	2301      	movs	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b58:	23c0      	movs	r3, #192	; 0xc0
 8000b5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 fd19 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b70:	f7ff ff62 	bl	8000a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_I2S_MspInit+0xf4>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <HAL_I2S_MspInit+0xf8>)
 8000be4:	f000 fcb2 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000be8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4806      	ldr	r0, [pc, #24]	; (8000c20 <HAL_I2S_MspInit+0xfc>)
 8000c06:	f000 fca1 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3738      	adds	r7, #56	; 0x38
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40003c00 	.word	0x40003c00
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020800 	.word	0x40020800

08000c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_SPI_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c7e:	23e0      	movs	r3, #224	; 0xe0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_SPI_MspInit+0x8c>)
 8000c9a:	f000 fc57 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40013000 	.word	0x40013000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8d0 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <OTG_FS_IRQHandler+0x10>)
 8000d0e:	f001 f83d 	bl	8001d8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000598 	.word	0x20000598

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f007 f9a0 	bl	8008090 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000194 	.word	0x20000194
 8000d84:	200009e8 	.word	0x200009e8

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff ffd7 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f007 f95f 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fb99 	bl	8000514 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000df0:	080081c4 	.word	0x080081c4
  ldr r2, =_sbss
 8000df4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000df8:	200009e4 	.word	0x200009e4

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f94f 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fe06 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f967 	bl	8001136 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f92f 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000198 	.word	0x20000198

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000198 	.word	0x20000198

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff3e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff31 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_FLASH_Program+0xa0>)
 8001164:	7e1b      	ldrb	r3, [r3, #24]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <HAL_FLASH_Program+0x1e>
 800116a:	2302      	movs	r3, #2
 800116c:	e03b      	b.n	80011e6 <HAL_FLASH_Program+0x96>
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_FLASH_Program+0xa0>)
 8001170:	2201      	movs	r2, #1
 8001172:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001174:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001178:	f000 f870 	bl	800125c <FLASH_WaitForLastOperation>
 800117c:	4603      	mov	r3, r0
 800117e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d12b      	bne.n	80011de <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d105      	bne.n	8001198 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800118c:	783b      	ldrb	r3, [r7, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f000 f91b 	bl	80013cc <FLASH_Program_Byte>
 8001196:	e016      	b.n	80011c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800119e:	883b      	ldrh	r3, [r7, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f000 f8ee 	bl	8001384 <FLASH_Program_HalfWord>
 80011a8:	e00d      	b.n	80011c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d105      	bne.n	80011bc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f000 f8c3 	bl	8001340 <FLASH_Program_Word>
 80011ba:	e004      	b.n	80011c6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80011bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	f000 f88b 	bl	80012dc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011ca:	f000 f847 	bl	800125c <FLASH_WaitForLastOperation>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_FLASH_Program+0xa4>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_FLASH_Program+0xa4>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_FLASH_Program+0xa0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000019c 	.word	0x2000019c
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_FLASH_Unlock+0x38>)
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	da0b      	bge.n	8001222 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_FLASH_Unlock+0x38>)
 800120c:	4a09      	ldr	r2, [pc, #36]	; (8001234 <HAL_FLASH_Unlock+0x3c>)
 800120e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_FLASH_Unlock+0x38>)
 8001212:	4a09      	ldr	r2, [pc, #36]	; (8001238 <HAL_FLASH_Unlock+0x40>)
 8001214:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_FLASH_Unlock+0x38>)
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	da01      	bge.n	8001222 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001222:	79fb      	ldrb	r3, [r7, #7]
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40023c00 	.word	0x40023c00
 8001234:	45670123 	.word	0x45670123
 8001238:	cdef89ab 	.word	0xcdef89ab

0800123c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_FLASH_Lock+0x1c>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_FLASH_Lock+0x1c>)
 8001246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800124a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40023c00 	.word	0x40023c00

0800125c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <FLASH_WaitForLastOperation+0x78>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800126e:	f7ff fe2d 	bl	8000ecc <HAL_GetTick>
 8001272:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001274:	e010      	b.n	8001298 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d00c      	beq.n	8001298 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <FLASH_WaitForLastOperation+0x38>
 8001284:	f7ff fe22 	bl	8000ecc <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d201      	bcs.n	8001298 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e019      	b.n	80012cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <FLASH_WaitForLastOperation+0x7c>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e8      	bne.n	8001276 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <FLASH_WaitForLastOperation+0x7c>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <FLASH_WaitForLastOperation+0x7c>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <FLASH_WaitForLastOperation+0x7c>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012c2:	f000 f8a5 	bl	8001410 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
  
}  
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000019c 	.word	0x2000019c
 80012d8:	40023c00 	.word	0x40023c00

080012dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 80012ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a10      	ldr	r2, [pc, #64]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 80012fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <FLASH_Program_DoubleWord+0x60>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001312:	f3bf 8f6f 	isb	sy
}
 8001316:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	000a      	movs	r2, r1
 8001326:	2300      	movs	r3, #0
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	3104      	adds	r1, #4
 800132c:	4613      	mov	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40023c00 	.word	0x40023c00

08001340 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <FLASH_Program_Word+0x40>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <FLASH_Program_Word+0x40>)
 8001350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001354:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <FLASH_Program_Word+0x40>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <FLASH_Program_Word+0x40>)
 800135c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001360:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <FLASH_Program_Word+0x40>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <FLASH_Program_Word+0x40>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40023c00 	.word	0x40023c00

08001384 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 8001396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800139a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <FLASH_Program_HalfWord+0x44>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	801a      	strh	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00

080013cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <FLASH_Program_Byte+0x40>)
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <FLASH_Program_Byte+0x40>)
 80013de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <FLASH_Program_Byte+0x40>)
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <FLASH_Program_Byte+0x40>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <FLASH_Program_Byte+0x40>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <FLASH_Program_Byte+0x40>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	701a      	strb	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00

08001410 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 800142a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 800142e:	2210      	movs	r2, #16
 8001430:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 8001448:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 800144c:	2220      	movs	r2, #32
 800144e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 8001466:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 8001484:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f043 0320 	orr.w	r3, r3, #32
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <FLASH_SetErrorCode+0xa8>)
 80014a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <FLASH_SetErrorCode+0xa4>)
 80014a6:	2202      	movs	r2, #2
 80014a8:	60da      	str	r2, [r3, #12]
  }
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40023c00 	.word	0x40023c00
 80014b8:	2000019c 	.word	0x2000019c

080014bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e010      	b.n	80014fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d103      	bne.n	80014e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80014de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e009      	b.n	80014fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d103      	bne.n	80014f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80014ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e002      	b.n	80014fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80014f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 8001500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001504:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	490f      	ldr	r1, [pc, #60]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 8001518:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800151c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4313      	orrs	r3, r2
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <FLASH_Erase_Sector+0x8c>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6113      	str	r3, [r2, #16]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40023c00 	.word	0x40023c00

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e16b      	b.n	8001840 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 815a 	bne.w	800183a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	2b02      	cmp	r3, #2
 800159c:	d130      	bne.n	8001600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80b4 	beq.w	800183a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b60      	ldr	r3, [pc, #384]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a5b      	ldr	r2, [pc, #364]	; (800185c <HAL_GPIO_Init+0x310>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_GPIO_Init+0x314>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02b      	beq.n	8001772 <HAL_GPIO_Init+0x226>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a51      	ldr	r2, [pc, #324]	; (8001864 <HAL_GPIO_Init+0x318>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x222>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a50      	ldr	r2, [pc, #320]	; (8001868 <HAL_GPIO_Init+0x31c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x21e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_GPIO_Init+0x320>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x21a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_GPIO_Init+0x324>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x216>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x328>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x212>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x32c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x20e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_GPIO_Init+0x330>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x20a>
 8001752:	2307      	movs	r3, #7
 8001754:	e00e      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001756:	2308      	movs	r3, #8
 8001758:	e00c      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175a:	2306      	movs	r3, #6
 800175c:	e00a      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175e:	2305      	movs	r3, #5
 8001760:	e008      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001762:	2304      	movs	r3, #4
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001766:	2303      	movs	r3, #3
 8001768:	e004      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176a:	2302      	movs	r3, #2
 800176c:	e002      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001772:	2300      	movs	r3, #0
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f002 0203 	and.w	r2, r2, #3
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	4093      	lsls	r3, r2
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001784:	4935      	ldr	r1, [pc, #212]	; (800185c <HAL_GPIO_Init+0x310>)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b6:	4a32      	ldr	r2, [pc, #200]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_GPIO_Init+0x334>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3301      	adds	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	f67f ae90 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40013800 	.word	0x40013800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020400 	.word	0x40020400
 8001868:	40020800 	.word	0x40020800
 800186c:	40020c00 	.word	0x40020c00
 8001870:	40021000 	.word	0x40021000
 8001874:	40021400 	.word	0x40021400
 8001878:	40021800 	.word	0x40021800
 800187c:	40021c00 	.word	0x40021c00
 8001880:	40013c00 	.word	0x40013c00

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a0:	e003      	b.n	80018aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b8:	b08f      	sub	sp, #60	; 0x3c
 80018ba:	af0a      	add	r7, sp, #40	; 0x28
 80018bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e054      	b.n	8001972 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f006 f856 	bl	8007994 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f003 f883 	bl	8004a12 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	687e      	ldr	r6, [r7, #4]
 8001914:	466d      	mov	r5, sp
 8001916:	f106 0410 	add.w	r4, r6, #16
 800191a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001926:	e885 0003 	stmia.w	r5, {r0, r1}
 800192a:	1d33      	adds	r3, r6, #4
 800192c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192e:	6838      	ldr	r0, [r7, #0]
 8001930:	f002 fffd 	bl	800492e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f003 f87a 	bl	8004a34 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	687e      	ldr	r6, [r7, #4]
 8001948:	466d      	mov	r5, sp
 800194a:	f106 0410 	add.w	r4, r6, #16
 800194e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800195a:	e885 0003 	stmia.w	r5, {r0, r1}
 800195e:	1d33      	adds	r3, r6, #4
 8001960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f003 fa02 	bl	8004d6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800197a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800197a:	b590      	push	{r4, r7, lr}
 800197c:	b089      	sub	sp, #36	; 0x24
 800197e:	af04      	add	r7, sp, #16
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4603      	mov	r3, r0
 800198a:	70fb      	strb	r3, [r7, #3]
 800198c:	460b      	mov	r3, r1
 800198e:	70bb      	strb	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_HCD_HC_Init+0x28>
 800199e:	2302      	movs	r3, #2
 80019a0:	e076      	b.n	8001a90 <HAL_HCD_HC_Init+0x116>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	333d      	adds	r3, #61	; 0x3d
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3338      	adds	r3, #56	; 0x38
 80019ca:	787a      	ldrb	r2, [r7, #1]
 80019cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3340      	adds	r3, #64	; 0x40
 80019dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3339      	adds	r3, #57	; 0x39
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	333f      	adds	r3, #63	; 0x3f
 8001a00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	78ba      	ldrb	r2, [r7, #2]
 8001a0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a0e:	b2d0      	uxtb	r0, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	333a      	adds	r3, #58	; 0x3a
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da09      	bge.n	8001a3c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	333b      	adds	r3, #59	; 0x3b
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e008      	b.n	8001a4e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	333b      	adds	r3, #59	; 0x3b
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	212c      	movs	r1, #44	; 0x2c
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	333c      	adds	r3, #60	; 0x3c
 8001a5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a60:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	787c      	ldrb	r4, [r7, #1]
 8001a68:	78ba      	ldrb	r2, [r7, #2]
 8001a6a:	78f9      	ldrb	r1, [r7, #3]
 8001a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	f003 fafb 	bl	8005078 <USB_HC_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}

08001a98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_HCD_HC_Halt+0x1e>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e00f      	b.n	8001ad6 <HAL_HCD_HC_Halt+0x3e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fd4b 	bl	8005562 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	70fb      	strb	r3, [r7, #3]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70bb      	strb	r3, [r7, #2]
 8001af6:	4613      	mov	r3, r2
 8001af8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	333b      	adds	r3, #59	; 0x3b
 8001b08:	78ba      	ldrb	r2, [r7, #2]
 8001b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	333f      	adds	r3, #63	; 0x3f
 8001b1a:	787a      	ldrb	r2, [r7, #1]
 8001b1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b1e:	7c3b      	ldrb	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d112      	bne.n	8001b4a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3342      	adds	r3, #66	; 0x42
 8001b32:	2203      	movs	r2, #3
 8001b34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	333d      	adds	r3, #61	; 0x3d
 8001b44:	7f3a      	ldrb	r2, [r7, #28]
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e008      	b.n	8001b5c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3342      	adds	r3, #66	; 0x42
 8001b58:	2202      	movs	r2, #2
 8001b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	f200 80c6 	bhi.w	8001cf0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b64:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001cdd 	.word	0x08001cdd
 8001b74:	08001be1 	.word	0x08001be1
 8001b78:	08001c5f 	.word	0x08001c5f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b7c:	7c3b      	ldrb	r3, [r7, #16]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 80b8 	bne.w	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b84:	78bb      	ldrb	r3, [r7, #2]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 80b4 	bne.w	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b8c:	8b3b      	ldrh	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d108      	bne.n	8001ba4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3355      	adds	r3, #85	; 0x55
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3355      	adds	r3, #85	; 0x55
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3342      	adds	r3, #66	; 0x42
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bca:	e093      	b.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3342      	adds	r3, #66	; 0x42
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
      break;
 8001bde:	e089      	b.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001be0:	78bb      	ldrb	r3, [r7, #2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11d      	bne.n	8001c22 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3355      	adds	r3, #85	; 0x55
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3342      	adds	r3, #66	; 0x42
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c0c:	e073      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3342      	adds	r3, #66	; 0x42
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	701a      	strb	r2, [r3, #0]
      break;
 8001c20:	e069      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3354      	adds	r3, #84	; 0x54
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3342      	adds	r3, #66	; 0x42
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
      break;
 8001c48:	e055      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3342      	adds	r3, #66	; 0x42
 8001c58:	2202      	movs	r2, #2
 8001c5a:	701a      	strb	r2, [r3, #0]
      break;
 8001c5c:	e04b      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c5e:	78bb      	ldrb	r3, [r7, #2]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d11d      	bne.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3355      	adds	r3, #85	; 0x55
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c8a:	e034      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3342      	adds	r3, #66	; 0x42
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	701a      	strb	r2, [r3, #0]
      break;
 8001c9e:	e02a      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3354      	adds	r3, #84	; 0x54
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3342      	adds	r3, #66	; 0x42
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
      break;
 8001cc6:	e016      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	e00c      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e000      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001cf4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3344      	adds	r3, #68	; 0x44
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	8b3a      	ldrh	r2, [r7, #24]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	202c      	movs	r0, #44	; 0x2c
 8001d10:	fb00 f303 	mul.w	r3, r0, r3
 8001d14:	440b      	add	r3, r1
 8001d16:	334c      	adds	r3, #76	; 0x4c
 8001d18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3360      	adds	r3, #96	; 0x60
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3350      	adds	r3, #80	; 0x50
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3339      	adds	r3, #57	; 0x39
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3361      	adds	r3, #97	; 0x61
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	222c      	movs	r2, #44	; 0x2c
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	3338      	adds	r3, #56	; 0x38
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	18d1      	adds	r1, r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f003 fa9e 	bl	80052bc <USB_HC_StartXfer>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop

08001d8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 ff9f 	bl	8004ce6 <USB_GetMode>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	f040 80f6 	bne.w	8001f9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 ff83 	bl	8004cc0 <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80ec 	beq.w	8001f9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 ff7a 	bl	8004cc0 <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dd6:	d104      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 ff6a 	bl	8004cc0 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df6:	d104      	bne.n	8001e02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 ff5a 	bl	8004cc0 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e16:	d104      	bne.n	8001e22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 ff4a 	bl	8004cc0 <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d103      	bne.n	8001e3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 ff3c 	bl	8004cc0 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e52:	d11c      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e6e:	2110      	movs	r1, #16
 8001e70:	6938      	ldr	r0, [r7, #16]
 8001e72:	f002 fe2b 	bl	8004acc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e76:	6938      	ldr	r0, [r7, #16]
 8001e78:	f002 fe5c 	bl	8004b34 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 f832 	bl	8004eec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f005 fe01 	bl	8007a90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 ff14 	bl	8004cc0 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea2:	d102      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f001 f89e 	bl	8002fe6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 ff06 	bl	8004cc0 <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d106      	bne.n	8001ecc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f005 fdca 	bl	8007a58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fef5 	bl	8004cc0 <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d101      	bne.n	8001ee4 <HAL_HCD_IRQHandler+0x158>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_HCD_IRQHandler+0x15a>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0210 	bic.w	r2, r2, #16
 8001ef8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 ffa1 	bl	8002e42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0210 	orr.w	r2, r2, #16
 8001f0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 fed3 	bl	8004cc0 <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f24:	d13a      	bne.n	8001f9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fb08 	bl	8005540 <USB_HC_ReadInterrupt>
 8001f30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e025      	b.n	8001f84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d018      	beq.n	8001f7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f62:	d106      	bne.n	8001f72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8ab 	bl	80020c6 <HCD_HC_IN_IRQHandler>
 8001f70:	e005      	b.n	8001f7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fbf9 	bl	8002770 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3d4      	bcc.n	8001f38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f96:	615a      	str	r2, [r3, #20]
 8001f98:	e000      	b.n	8001f9c <HAL_HCD_IRQHandler+0x210>
      return;
 8001f9a:	bf00      	nop
    }
  }
}
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_HCD_Start+0x16>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e013      	b.n	8001fe0 <HAL_HCD_Start+0x3e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 fff4 	bl	8004fb4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fd0d 	bl	80049f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_HCD_Stop+0x16>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e00d      	b.n	800201a <HAL_HCD_Stop+0x32>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fbe2 	bl	80057d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f002 ff96 	bl	8004f60 <USB_ResetPort>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3360      	adds	r3, #96	; 0x60
 8002058:	781b      	ldrb	r3, [r3, #0]
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3350      	adds	r3, #80	; 0x50
 8002080:	681b      	ldr	r3, [r3, #0]
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f002 ffda 	bl	8005054 <USB_GetCurrentFrame>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 ffb5 	bl	8005026 <USB_GetHostSpeed>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d11a      	bne.n	800212c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2304      	movs	r3, #4
 8002106:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3361      	adds	r3, #97	; 0x61
 8002116:	2206      	movs	r2, #6
 8002118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fa1c 	bl	8005562 <USB_HC_Halt>
 800212a:	e0af      	b.n	800228c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002142:	d11b      	bne.n	800217c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002156:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3361      	adds	r3, #97	; 0x61
 8002166:	2207      	movs	r2, #7
 8002168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f003 f9f4 	bl	8005562 <USB_HC_Halt>
 800217a:	e087      	b.n	800228c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b20      	cmp	r3, #32
 8002190:	d109      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	2320      	movs	r3, #32
 80021a2:	6093      	str	r3, [r2, #8]
 80021a4:	e072      	b.n	800228c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d11a      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c8:	461a      	mov	r2, r3
 80021ca:	2308      	movs	r3, #8
 80021cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3361      	adds	r3, #97	; 0x61
 80021dc:	2205      	movs	r2, #5
 80021de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 f9b9 	bl	8005562 <USB_HC_Halt>
 80021f0:	e04c      	b.n	800228c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002208:	d11b      	bne.n	8002242 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	461a      	mov	r2, r3
 8002218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3361      	adds	r3, #97	; 0x61
 800222c:	2208      	movs	r2, #8
 800222e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f003 f991 	bl	8005562 <USB_HC_Halt>
 8002240:	e024      	b.n	800228c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d119      	bne.n	800228c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	461a      	mov	r2, r3
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	3361      	adds	r3, #97	; 0x61
 8002278:	2206      	movs	r2, #6
 800227a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f003 f96b 	bl	8005562 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a2:	d112      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 f957 	bl	8005562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022c8:	e24e      	b.n	8002768 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	f040 80df 	bne.w	80024a0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d019      	beq.n	800231e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3348      	adds	r3, #72	; 0x48
 80022f8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	0159      	lsls	r1, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	440b      	add	r3, r1
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800230c:	1ad2      	subs	r2, r2, r3
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	202c      	movs	r0, #44	; 0x2c
 8002314:	fb00 f303 	mul.w	r3, r0, r3
 8002318:	440b      	add	r3, r1
 800231a:	3350      	adds	r3, #80	; 0x50
 800231c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3361      	adds	r3, #97	; 0x61
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	335c      	adds	r3, #92	; 0x5c
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	461a      	mov	r2, r3
 8002350:	2301      	movs	r3, #1
 8002352:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	333f      	adds	r3, #63	; 0x3f
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	333f      	adds	r3, #63	; 0x3f
 8002376:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002378:	2b02      	cmp	r3, #2
 800237a:	d111      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f003 f8eb 	bl	8005562 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	461a      	mov	r2, r3
 800239a:	2310      	movs	r3, #16
 800239c:	6093      	str	r3, [r2, #8]
 800239e:	e03a      	b.n	8002416 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	333f      	adds	r3, #63	; 0x3f
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d009      	beq.n	80023c8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	333f      	adds	r3, #63	; 0x3f
 80023c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d126      	bne.n	8002416 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	0151      	lsls	r1, r2, #5
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	440a      	add	r2, r1
 80023de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3360      	adds	r3, #96	; 0x60
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	b2d9      	uxtb	r1, r3
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	202c      	movs	r0, #44	; 0x2c
 8002404:	fb00 f303 	mul.w	r3, r0, r3
 8002408:	4413      	add	r3, r2
 800240a:	3360      	adds	r3, #96	; 0x60
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f005 fb4b 	bl	8007aac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d12b      	bne.n	8002476 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3348      	adds	r3, #72	; 0x48
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	202c      	movs	r0, #44	; 0x2c
 8002434:	fb00 f202 	mul.w	r2, r0, r2
 8002438:	440a      	add	r2, r1
 800243a:	3240      	adds	r2, #64	; 0x40
 800243c:	8812      	ldrh	r2, [r2, #0]
 800243e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 818e 	beq.w	8002768 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3354      	adds	r3, #84	; 0x54
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f083 0301 	eor.w	r3, r3, #1
 8002460:	b2d8      	uxtb	r0, r3
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3354      	adds	r3, #84	; 0x54
 8002470:	4602      	mov	r2, r0
 8002472:	701a      	strb	r2, [r3, #0]
}
 8002474:	e178      	b.n	8002768 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3354      	adds	r3, #84	; 0x54
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2d8      	uxtb	r0, r3
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3354      	adds	r3, #84	; 0x54
 800249a:	4602      	mov	r2, r0
 800249c:	701a      	strb	r2, [r3, #0]
}
 800249e:	e163      	b.n	8002768 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	f040 80f6 	bne.w	80026a4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3361      	adds	r3, #97	; 0x61
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d109      	bne.n	80024e0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3360      	adds	r3, #96	; 0x60
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e0c9      	b.n	8002674 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3361      	adds	r3, #97	; 0x61
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d109      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	2205      	movs	r2, #5
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e0b5      	b.n	8002674 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b06      	cmp	r3, #6
 800251a:	d009      	beq.n	8002530 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3361      	adds	r3, #97	; 0x61
 800252a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800252c:	2b08      	cmp	r3, #8
 800252e:	d150      	bne.n	80025d2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	335c      	adds	r3, #92	; 0x5c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	202c      	movs	r0, #44	; 0x2c
 8002548:	fb00 f303 	mul.w	r3, r0, r3
 800254c:	440b      	add	r3, r1
 800254e:	335c      	adds	r3, #92	; 0x5c
 8002550:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d912      	bls.n	800258c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	335c      	adds	r3, #92	; 0x5c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	2204      	movs	r2, #4
 8002588:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800258a:	e073      	b.n	8002674 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3360      	adds	r3, #96	; 0x60
 800259a:	2202      	movs	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025d0:	e050      	b.n	8002674 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3361      	adds	r3, #97	; 0x61
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d122      	bne.n	800262c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3360      	adds	r3, #96	; 0x60
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800260e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002616:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e023      	b.n	8002674 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b07      	cmp	r3, #7
 800263e:	d119      	bne.n	8002674 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	335c      	adds	r3, #92	; 0x5c
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	202c      	movs	r0, #44	; 0x2c
 8002658:	fb00 f303 	mul.w	r3, r0, r3
 800265c:	440b      	add	r3, r1
 800265e:	335c      	adds	r3, #92	; 0x5c
 8002660:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3360      	adds	r3, #96	; 0x60
 8002670:	2204      	movs	r2, #4
 8002672:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2302      	movs	r3, #2
 8002684:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	b2d9      	uxtb	r1, r3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	202c      	movs	r0, #44	; 0x2c
 8002690:	fb00 f303 	mul.w	r3, r0, r3
 8002694:	4413      	add	r3, r2
 8002696:	3360      	adds	r3, #96	; 0x60
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f005 fa05 	bl	8007aac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026a2:	e061      	b.n	8002768 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d156      	bne.n	8002768 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	333f      	adds	r3, #63	; 0x3f
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d111      	bne.n	80026f2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	335c      	adds	r3, #92	; 0x5c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 ff39 	bl	8005562 <USB_HC_Halt>
 80026f0:	e031      	b.n	8002756 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	333f      	adds	r3, #63	; 0x3f
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	333f      	adds	r3, #63	; 0x3f
 8002714:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002716:	2b02      	cmp	r3, #2
 8002718:	d11d      	bne.n	8002756 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	335c      	adds	r3, #92	; 0x5c
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d110      	bne.n	8002756 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3361      	adds	r3, #97	; 0x61
 8002742:	2203      	movs	r2, #3
 8002744:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f002 ff06 	bl	8005562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	461a      	mov	r2, r3
 8002764:	2310      	movs	r3, #16
 8002766:	6093      	str	r3, [r2, #8]
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b04      	cmp	r3, #4
 800279e:	d11a      	bne.n	80027d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	2304      	movs	r3, #4
 80027b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3361      	adds	r3, #97	; 0x61
 80027c0:	2206      	movs	r2, #6
 80027c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fec7 	bl	8005562 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027d4:	e331      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d12e      	bne.n	800284a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	2320      	movs	r3, #32
 80027fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	333d      	adds	r3, #61	; 0x3d
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	f040 8313 	bne.w	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	333d      	adds	r3, #61	; 0x3d
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3360      	adds	r3, #96	; 0x60
 8002834:	2202      	movs	r2, #2
 8002836:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fe8d 	bl	8005562 <USB_HC_Halt>
}
 8002848:	e2f7      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002860:	d112      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002874:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fe6e 	bl	8005562 <USB_HC_Halt>
}
 8002886:	e2d8      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d140      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	335c      	adds	r3, #92	; 0x5c
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d111      	bne.n	80028ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	333d      	adds	r3, #61	; 0x3d
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	461a      	mov	r2, r3
 80028e6:	2340      	movs	r3, #64	; 0x40
 80028e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	461a      	mov	r2, r3
 80028f8:	2301      	movs	r3, #1
 80028fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3361      	adds	r3, #97	; 0x61
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f002 fe22 	bl	8005562 <USB_HC_Halt>
}
 800291e:	e28c      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d12c      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3361      	adds	r3, #97	; 0x61
 8002944:	2204      	movs	r2, #4
 8002946:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	333d      	adds	r3, #61	; 0x3d
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	335c      	adds	r3, #92	; 0x5c
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fdf3 	bl	8005562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	461a      	mov	r2, r3
 800298a:	2340      	movs	r3, #64	; 0x40
 800298c:	6093      	str	r3, [r2, #8]
}
 800298e:	e254      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d11a      	bne.n	80029dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	461a      	mov	r2, r3
 80029b4:	2308      	movs	r3, #8
 80029b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	2205      	movs	r2, #5
 80029c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 fdc4 	bl	8005562 <USB_HC_Halt>
}
 80029da:	e22e      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d140      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	335c      	adds	r3, #92	; 0x5c
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3361      	adds	r3, #97	; 0x61
 8002a12:	2203      	movs	r2, #3
 8002a14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	333d      	adds	r3, #61	; 0x3d
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d112      	bne.n	8002a50 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	333c      	adds	r3, #60	; 0x3c
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d108      	bne.n	8002a50 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	333d      	adds	r3, #61	; 0x3d
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fd81 	bl	8005562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2310      	movs	r3, #16
 8002a70:	6093      	str	r3, [r2, #8]
}
 8002a72:	e1e2      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d164      	bne.n	8002b54 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d111      	bne.n	8002ab6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3361      	adds	r3, #97	; 0x61
 8002aa0:	2206      	movs	r2, #6
 8002aa2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fd57 	bl	8005562 <USB_HC_Halt>
 8002ab4:	e044      	b.n	8002b40 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	335c      	adds	r3, #92	; 0x5c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	202c      	movs	r0, #44	; 0x2c
 8002ace:	fb00 f303 	mul.w	r3, r0, r3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	335c      	adds	r3, #92	; 0x5c
 8002ad6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	335c      	adds	r3, #92	; 0x5c
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d920      	bls.n	8002b2e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	335c      	adds	r3, #92	; 0x5c
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3360      	adds	r3, #96	; 0x60
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	b2d9      	uxtb	r1, r3
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	202c      	movs	r0, #44	; 0x2c
 8002b1a:	fb00 f303 	mul.w	r3, r0, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3360      	adds	r3, #96	; 0x60
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f004 ffc0 	bl	8007aac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b2c:	e008      	b.n	8002b40 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	6093      	str	r3, [r2, #8]
}
 8002b52:	e172      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6a:	d11b      	bne.n	8002ba4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	3361      	adds	r3, #97	; 0x61
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f002 fcea 	bl	8005562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba0:	6093      	str	r3, [r2, #8]
}
 8002ba2:	e14a      	b.n	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	f040 813f 	bne.w	8002e3a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3361      	adds	r3, #97	; 0x61
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d17d      	bne.n	8002ccc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3360      	adds	r3, #96	; 0x60
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	333f      	adds	r3, #63	; 0x3f
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d00a      	beq.n	8002c0c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	333f      	adds	r3, #63	; 0x3f
 8002c04:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	f040 8100 	bne.w	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d113      	bne.n	8002c3c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3355      	adds	r3, #85	; 0x55
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f083 0301 	eor.w	r3, r3, #1
 8002c28:	b2d8      	uxtb	r0, r3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3355      	adds	r3, #85	; 0x55
 8002c38:	4602      	mov	r2, r0
 8002c3a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	f040 80e3 	bne.w	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	334c      	adds	r3, #76	; 0x4c
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80d8 	beq.w	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	334c      	adds	r3, #76	; 0x4c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	202c      	movs	r0, #44	; 0x2c
 8002c72:	fb00 f202 	mul.w	r2, r0, r2
 8002c76:	440a      	add	r2, r1
 8002c78:	3240      	adds	r2, #64	; 0x40
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	202c      	movs	r0, #44	; 0x2c
 8002c86:	fb00 f202 	mul.w	r2, r0, r2
 8002c8a:	440a      	add	r2, r1
 8002c8c:	3240      	adds	r2, #64	; 0x40
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80b5 	beq.w	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3355      	adds	r3, #85	; 0x55
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f083 0301 	eor.w	r3, r3, #1
 8002cb6:	b2d8      	uxtb	r0, r3
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3355      	adds	r3, #85	; 0x55
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e09f      	b.n	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3361      	adds	r3, #97	; 0x61
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d109      	bne.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3360      	adds	r3, #96	; 0x60
 8002cee:	2202      	movs	r2, #2
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e08b      	b.n	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3361      	adds	r3, #97	; 0x61
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d109      	bne.n	8002d1c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	2202      	movs	r2, #2
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e077      	b.n	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3361      	adds	r3, #97	; 0x61
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d109      	bne.n	8002d44 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3360      	adds	r3, #96	; 0x60
 8002d3e:	2205      	movs	r2, #5
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	e063      	b.n	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3361      	adds	r3, #97	; 0x61
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d009      	beq.n	8002d6c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3361      	adds	r3, #97	; 0x61
 8002d66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d14f      	bne.n	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	335c      	adds	r3, #92	; 0x5c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	202c      	movs	r0, #44	; 0x2c
 8002d84:	fb00 f303 	mul.w	r3, r0, r3
 8002d88:	440b      	add	r3, r1
 8002d8a:	335c      	adds	r3, #92	; 0x5c
 8002d8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d912      	bls.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	335c      	adds	r3, #92	; 0x5c
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3360      	adds	r3, #96	; 0x60
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e021      	b.n	8002e0c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3360      	adds	r3, #96	; 0x60
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002df8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	b2d9      	uxtb	r1, r3
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	202c      	movs	r0, #44	; 0x2c
 8002e28:	fb00 f303 	mul.w	r3, r0, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3360      	adds	r3, #96	; 0x60
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f004 fe39 	bl	8007aac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e3a:	bf00      	nop
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b08a      	sub	sp, #40	; 0x28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	0c5b      	lsrs	r3, r3, #17
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d004      	beq.n	8002e88 <HCD_RXQLVL_IRQHandler+0x46>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	f000 80a9 	beq.w	8002fd8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e86:	e0aa      	b.n	8002fde <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80a6 	beq.w	8002fdc <HCD_RXQLVL_IRQHandler+0x19a>
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3344      	adds	r3, #68	; 0x44
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 809b 	beq.w	8002fdc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3350      	adds	r3, #80	; 0x50
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	441a      	add	r2, r3
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	202c      	movs	r0, #44	; 0x2c
 8002ec0:	fb00 f303 	mul.w	r3, r0, r3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334c      	adds	r3, #76	; 0x4c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d87a      	bhi.n	8002fc4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3344      	adds	r3, #68	; 0x44
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f001 fe92 	bl	8004c10 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3344      	adds	r3, #68	; 0x44
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	441a      	add	r2, r3
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	202c      	movs	r0, #44	; 0x2c
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3344      	adds	r3, #68	; 0x44
 8002f0e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3350      	adds	r3, #80	; 0x50
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	441a      	add	r2, r3
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	202c      	movs	r0, #44	; 0x2c
 8002f2a:	fb00 f303 	mul.w	r3, r0, r3
 8002f2e:	440b      	add	r3, r1
 8002f30:	3350      	adds	r3, #80	; 0x50
 8002f32:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	0cdb      	lsrs	r3, r3, #19
 8002f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	3340      	adds	r3, #64	; 0x40
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d13c      	bne.n	8002fdc <HCD_RXQLVL_IRQHandler+0x19a>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d039      	beq.n	8002fdc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f7e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f86:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3354      	adds	r3, #84	; 0x54
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	f083 0301 	eor.w	r3, r3, #1
 8002fae:	b2d8      	uxtb	r0, r3
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3354      	adds	r3, #84	; 0x54
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	701a      	strb	r2, [r3, #0]
      break;
 8002fc2:	e00b      	b.n	8002fdc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3360      	adds	r3, #96	; 0x60
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	701a      	strb	r2, [r3, #0]
      break;
 8002fd6:	e001      	b.n	8002fdc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fd8:	bf00      	nop
 8002fda:	e000      	b.n	8002fde <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fdc:	bf00      	nop
  }
}
 8002fde:	bf00      	nop
 8002fe0:	3728      	adds	r7, #40	; 0x28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003012:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d10b      	bne.n	8003036 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d102      	bne.n	800302e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f004 fd23 	bl	8007a74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b08      	cmp	r3, #8
 800303e:	d132      	bne.n	80030a6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b04      	cmp	r3, #4
 8003050:	d126      	bne.n	80030a0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d113      	bne.n	8003082 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003064:	d106      	bne.n	8003074 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f001 ff3d 	bl	8004eec <USB_InitFSLSPClkSel>
 8003072:	e011      	b.n	8003098 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f001 ff36 	bl	8004eec <USB_InitFSLSPClkSel>
 8003080:	e00a      	b.n	8003098 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d106      	bne.n	8003098 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003090:	461a      	mov	r2, r3
 8003092:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003096:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f004 fd15 	bl	8007ac8 <HAL_HCD_PortEnabled_Callback>
 800309e:	e002      	b.n	80030a6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f004 fd1f 	bl	8007ae4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d103      	bne.n	80030b8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f043 0320 	orr.w	r3, r3, #32
 80030b6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030be:	461a      	mov	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e12b      	b.n	8003336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd fcce 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800312e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003130:	f001 fa20 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a81      	ldr	r2, [pc, #516]	; (8003340 <HAL_I2C_Init+0x274>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d807      	bhi.n	8003150 <HAL_I2C_Init+0x84>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a80      	ldr	r2, [pc, #512]	; (8003344 <HAL_I2C_Init+0x278>)
 8003144:	4293      	cmp	r3, r2
 8003146:	bf94      	ite	ls
 8003148:	2301      	movls	r3, #1
 800314a:	2300      	movhi	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e006      	b.n	800315e <HAL_I2C_Init+0x92>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a7d      	ldr	r2, [pc, #500]	; (8003348 <HAL_I2C_Init+0x27c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0e7      	b.n	8003336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a78      	ldr	r2, [pc, #480]	; (800334c <HAL_I2C_Init+0x280>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a6a      	ldr	r2, [pc, #424]	; (8003340 <HAL_I2C_Init+0x274>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d802      	bhi.n	80031a0 <HAL_I2C_Init+0xd4>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	e009      	b.n	80031b4 <HAL_I2C_Init+0xe8>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	4a69      	ldr	r2, [pc, #420]	; (8003350 <HAL_I2C_Init+0x284>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	3301      	adds	r3, #1
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	495c      	ldr	r1, [pc, #368]	; (8003340 <HAL_I2C_Init+0x274>)
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d819      	bhi.n	8003208 <HAL_I2C_Init+0x13c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e59      	subs	r1, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_I2C_Init+0x138>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e59      	subs	r1, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	e051      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003204:	2304      	movs	r3, #4
 8003206:	e04f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_I2C_Init+0x168>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_I2C_Init+0x18e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Init+0x196>
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_I2C_Init+0x1bc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e58      	subs	r0, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	440b      	add	r3, r1
 8003278:	fbb0 f3f3 	udiv	r3, r0, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003286:	e00f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6911      	ldr	r1, [r2, #16]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	000186a0 	.word	0x000186a0
 8003344:	001e847f 	.word	0x001e847f
 8003348:	003d08ff 	.word	0x003d08ff
 800334c:	431bde83 	.word	0x431bde83
 8003350:	10624dd3 	.word	0x10624dd3

08003354 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e128      	b.n	80035b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a90      	ldr	r2, [pc, #576]	; (80035c0 <HAL_I2S_Init+0x26c>)
 800337e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7fd fbcf 	bl	8000b24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800339c:	f023 030f 	bic.w	r3, r3, #15
 80033a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2202      	movs	r2, #2
 80033a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d060      	beq.n	8003474 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033ba:	2310      	movs	r3, #16
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e001      	b.n	80033c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033c0:	2320      	movs	r3, #32
 80033c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d802      	bhi.n	80033d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033d2:	2001      	movs	r0, #1
 80033d4:	f001 f9c4 	bl	8004760 <HAL_RCCEx_GetPeriphCLKFreq>
 80033d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e2:	d125      	bne.n	8003430 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d010      	beq.n	800340e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	3305      	adds	r3, #5
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	e01f      	b.n	800344e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	fbb2 f2f3 	udiv	r2, r2, r3
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	3305      	adds	r3, #5
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	e00e      	b.n	800344e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	fbb2 f2f3 	udiv	r2, r2, r3
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	3305      	adds	r3, #5
 800344c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4a5c      	ldr	r2, [pc, #368]	; (80035c4 <HAL_I2S_Init+0x270>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	08db      	lsrs	r3, r3, #3
 8003458:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	085b      	lsrs	r3, r3, #1
 800346a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e003      	b.n	800347c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003474:	2302      	movs	r3, #2
 8003476:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d902      	bls.n	8003488 <HAL_I2S_Init+0x134>
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	2bff      	cmp	r3, #255	; 0xff
 8003486:	d907      	bls.n	8003498 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	f043 0210 	orr.w	r2, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e08f      	b.n	80035b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	ea42 0103 	orr.w	r1, r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034b6:	f023 030f 	bic.w	r3, r3, #15
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6851      	ldr	r1, [r2, #4]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6892      	ldr	r2, [r2, #8]
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68d2      	ldr	r2, [r2, #12]
 80034c8:	4311      	orrs	r1, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6992      	ldr	r2, [r2, #24]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d161      	bne.n	80035a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a38      	ldr	r2, [pc, #224]	; (80035c8 <HAL_I2S_Init+0x274>)
 80034e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a37      	ldr	r2, [pc, #220]	; (80035cc <HAL_I2S_Init+0x278>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <HAL_I2S_Init+0x1a4>
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_I2S_Init+0x27c>)
 80034f6:	e001      	b.n	80034fc <HAL_I2S_Init+0x1a8>
 80034f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4932      	ldr	r1, [pc, #200]	; (80035cc <HAL_I2S_Init+0x278>)
 8003504:	428a      	cmp	r2, r1
 8003506:	d101      	bne.n	800350c <HAL_I2S_Init+0x1b8>
 8003508:	4a31      	ldr	r2, [pc, #196]	; (80035d0 <HAL_I2S_Init+0x27c>)
 800350a:	e001      	b.n	8003510 <HAL_I2S_Init+0x1bc>
 800350c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003510:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003514:	f023 030f 	bic.w	r3, r3, #15
 8003518:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <HAL_I2S_Init+0x278>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_I2S_Init+0x1d4>
 8003524:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <HAL_I2S_Init+0x27c>)
 8003526:	e001      	b.n	800352c <HAL_I2S_Init+0x1d8>
 8003528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352c:	2202      	movs	r2, #2
 800352e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a25      	ldr	r2, [pc, #148]	; (80035cc <HAL_I2S_Init+0x278>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_I2S_Init+0x1ea>
 800353a:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <HAL_I2S_Init+0x27c>)
 800353c:	e001      	b.n	8003542 <HAL_I2S_Init+0x1ee>
 800353e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354e:	d003      	beq.n	8003558 <HAL_I2S_Init+0x204>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	e001      	b.n	8003564 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800356e:	4313      	orrs	r3, r2
 8003570:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003578:	4313      	orrs	r3, r2
 800357a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003582:	4313      	orrs	r3, r2
 8003584:	b29a      	uxth	r2, r3
 8003586:	897b      	ldrh	r3, [r7, #10]
 8003588:	4313      	orrs	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003590:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a0d      	ldr	r2, [pc, #52]	; (80035cc <HAL_I2S_Init+0x278>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_I2S_Init+0x24c>
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_I2S_Init+0x27c>)
 800359e:	e001      	b.n	80035a4 <HAL_I2S_Init+0x250>
 80035a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a4:	897a      	ldrh	r2, [r7, #10]
 80035a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	080036cb 	.word	0x080036cb
 80035c4:	cccccccd 	.word	0xcccccccd
 80035c8:	080037e1 	.word	0x080037e1
 80035cc:	40003800 	.word	0x40003800
 80035d0:	40003400 	.word	0x40003400

080035d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003654:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff ffb8 	bl	80035d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	b292      	uxth	r2, r2
 8003680:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10e      	bne.n	80036c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff93 	bl	80035e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d13a      	bne.n	800375c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d109      	bne.n	8003704 <I2S_IRQHandler+0x3a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d102      	bne.n	8003704 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ffb4 	bl	800366c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d126      	bne.n	800375c <I2S_IRQHandler+0x92>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b20      	cmp	r3, #32
 800371a:	d11f      	bne.n	800375c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800372a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0202 	orr.w	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ff50 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b03      	cmp	r3, #3
 8003766:	d136      	bne.n	80037d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d109      	bne.n	8003786 <I2S_IRQHandler+0xbc>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	2b80      	cmp	r3, #128	; 0x80
 800377e:	d102      	bne.n	8003786 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff45 	bl	8003610 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b08      	cmp	r3, #8
 800378e:	d122      	bne.n	80037d6 <I2S_IRQHandler+0x10c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b20      	cmp	r3, #32
 800379c:	d11b      	bne.n	80037d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff13 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d6:	bf00      	nop
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a92      	ldr	r2, [pc, #584]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037fa:	4b92      	ldr	r3, [pc, #584]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037fc:	e001      	b.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a8b      	ldr	r2, [pc, #556]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003818:	4b8a      	ldr	r3, [pc, #552]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800381a:	e001      	b.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800381c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382c:	d004      	beq.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 8099 	bne.w	800396a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d107      	bne.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f925 	bl	8003a9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9c8 	bl	8003bfc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d13a      	bne.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d035      	beq.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6e      	ldr	r2, [pc, #440]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800388a:	4b6e      	ldr	r3, [pc, #440]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800388c:	e001      	b.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800388e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4969      	ldr	r1, [pc, #420]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800389a:	428b      	cmp	r3, r1
 800389c:	d101      	bne.n	80038a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800389e:	4b69      	ldr	r3, [pc, #420]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a0:	e001      	b.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f043 0202 	orr.w	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fe88 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	f040 80c3 	bne.w	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80bd 	beq.w	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003912:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a49      	ldr	r2, [pc, #292]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800391e:	4b49      	ldr	r3, [pc, #292]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003920:	e001      	b.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4944      	ldr	r1, [pc, #272]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800392e:	428b      	cmp	r3, r1
 8003930:	d101      	bne.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003934:	e001      	b.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f043 0204 	orr.w	r2, r3, #4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff fe4a 	bl	80035fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003968:	e089      	b.n	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d107      	bne.n	8003984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8be 	bl	8003b00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8fd 	bl	8003b98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d12f      	bne.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d02a      	beq.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039cc:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ce:	e001      	b.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4919      	ldr	r1, [pc, #100]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039dc:	428b      	cmp	r3, r1
 80039de:	d101      	bne.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039e2:	e001      	b.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f043 0202 	orr.w	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fdfa 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d136      	bne.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d031      	beq.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a28:	e001      	b.n	8003a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4902      	ldr	r1, [pc, #8]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a36:	428b      	cmp	r3, r1
 8003a38:	d106      	bne.n	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a3a:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a3c:	e006      	b.n	8003a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a3e:	bf00      	nop
 8003a40:	40003800 	.word	0x40003800
 8003a44:	40003400 	.word	0x40003400
 8003a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a50:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f043 0204 	orr.w	r2, r3, #4
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fdc0 	bl	80035fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a7c:	e000      	b.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a7e:	bf00      	nop
}
 8003a80:	bf00      	nop
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c99      	adds	r1, r3, #2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6251      	str	r1, [r2, #36]	; 0x24
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d113      	bne.n	8003af6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003adc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ffc9 	bl	8003a88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c99      	adds	r1, r3, #2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6251      	str	r1, [r2, #36]	; 0x24
 8003b12:	8819      	ldrh	r1, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <I2SEx_TxISR_I2SExt+0x90>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <I2SEx_TxISR_I2SExt+0x22>
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <I2SEx_TxISR_I2SExt+0x94>)
 8003b20:	e001      	b.n	8003b26 <I2SEx_TxISR_I2SExt+0x26>
 8003b22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b26:	460a      	mov	r2, r1
 8003b28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d121      	bne.n	8003b86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <I2SEx_TxISR_I2SExt+0x90>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d101      	bne.n	8003b50 <I2SEx_TxISR_I2SExt+0x50>
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <I2SEx_TxISR_I2SExt+0x94>)
 8003b4e:	e001      	b.n	8003b54 <I2SEx_TxISR_I2SExt+0x54>
 8003b50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	490d      	ldr	r1, [pc, #52]	; (8003b90 <I2SEx_TxISR_I2SExt+0x90>)
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	d101      	bne.n	8003b64 <I2SEx_TxISR_I2SExt+0x64>
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <I2SEx_TxISR_I2SExt+0x94>)
 8003b62:	e001      	b.n	8003b68 <I2SEx_TxISR_I2SExt+0x68>
 8003b64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff81 	bl	8003a88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40003800 	.word	0x40003800
 8003b94:	40003400 	.word	0x40003400

08003b98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68d8      	ldr	r0, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	1c99      	adds	r1, r3, #2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bb0:	b282      	uxth	r2, r0
 8003bb2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff4a 	bl	8003a88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <I2SEx_RxISR_I2SExt+0x90>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <I2SEx_RxISR_I2SExt+0x16>
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <I2SEx_RxISR_I2SExt+0x94>)
 8003c10:	e001      	b.n	8003c16 <I2SEx_RxISR_I2SExt+0x1a>
 8003c12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c16:	68d8      	ldr	r0, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	1c99      	adds	r1, r3, #2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c22:	b282      	uxth	r2, r0
 8003c24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d121      	bne.n	8003c82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <I2SEx_RxISR_I2SExt+0x90>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <I2SEx_RxISR_I2SExt+0x50>
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <I2SEx_RxISR_I2SExt+0x94>)
 8003c4a:	e001      	b.n	8003c50 <I2SEx_RxISR_I2SExt+0x54>
 8003c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	490d      	ldr	r1, [pc, #52]	; (8003c8c <I2SEx_RxISR_I2SExt+0x90>)
 8003c58:	428b      	cmp	r3, r1
 8003c5a:	d101      	bne.n	8003c60 <I2SEx_RxISR_I2SExt+0x64>
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <I2SEx_RxISR_I2SExt+0x94>)
 8003c5e:	e001      	b.n	8003c64 <I2SEx_RxISR_I2SExt+0x68>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff03 	bl	8003a88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40003800 	.word	0x40003800
 8003c90:	40003400 	.word	0x40003400

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e267      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d075      	beq.n	8003d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb2:	4b88      	ldr	r3, [pc, #544]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cbe:	4b85      	ldr	r3, [pc, #532]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d112      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cca:	4b82      	ldr	r3, [pc, #520]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	4b7e      	ldr	r3, [pc, #504]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d05b      	beq.n	8003d9c <HAL_RCC_OscConfig+0x108>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d157      	bne.n	8003d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e242      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCC_OscConfig+0x74>
 8003cfa:	4b76      	ldr	r3, [pc, #472]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a75      	ldr	r2, [pc, #468]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e01d      	b.n	8003d44 <HAL_RCC_OscConfig+0xb0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x98>
 8003d12:	4b70      	ldr	r3, [pc, #448]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6f      	ldr	r2, [pc, #444]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4b6d      	ldr	r3, [pc, #436]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6c      	ldr	r2, [pc, #432]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCC_OscConfig+0xb0>
 8003d2c:	4b69      	ldr	r3, [pc, #420]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a68      	ldr	r2, [pc, #416]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b66      	ldr	r3, [pc, #408]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a65      	ldr	r2, [pc, #404]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fd f8be 	bl	8000ecc <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fd f8ba 	bl	8000ecc <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	; 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e207      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b5b      	ldr	r3, [pc, #364]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0xc0>
 8003d72:	e014      	b.n	8003d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d74:	f7fd f8aa 	bl	8000ecc <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fd f8a6 	bl	8000ecc <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e1f3      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8e:	4b51      	ldr	r3, [pc, #324]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0xe8>
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d063      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003daa:	4b4a      	ldr	r3, [pc, #296]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d11c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc2:	4b44      	ldr	r3, [pc, #272]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d116      	bne.n	8003dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dce:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_RCC_OscConfig+0x152>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e1c7      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de6:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4937      	ldr	r1, [pc, #220]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	e03a      	b.n	8003e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e04:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <HAL_RCC_OscConfig+0x244>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fd f85f 	bl	8000ecc <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e12:	f7fd f85b 	bl	8000ecc <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e1a8      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e24:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e30:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4925      	ldr	r1, [pc, #148]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
 8003e44:	e015      	b.n	8003e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e46:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCC_OscConfig+0x244>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd f83e 	bl	8000ecc <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e54:	f7fd f83a 	bl	8000ecc <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e187      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d036      	beq.n	8003eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_RCC_OscConfig+0x248>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fd f81e 	bl	8000ecc <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e94:	f7fd f81a 	bl	8000ecc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e167      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x200>
 8003eb2:	e01b      	b.n	8003eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCC_OscConfig+0x248>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eba:	f7fd f807 	bl	8000ecc <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	e00e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec2:	f7fd f803 	bl	8000ecc <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d907      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e150      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	42470000 	.word	0x42470000
 8003edc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	4b88      	ldr	r3, [pc, #544]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ea      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8097 	beq.w	8004028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efe:	4b81      	ldr	r3, [pc, #516]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	4b7d      	ldr	r3, [pc, #500]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	4a7c      	ldr	r2, [pc, #496]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1a:	4b7a      	ldr	r3, [pc, #488]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f26:	2301      	movs	r3, #1
 8003f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4b77      	ldr	r3, [pc, #476]	; (8004108 <HAL_RCC_OscConfig+0x474>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d118      	bne.n	8003f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f36:	4b74      	ldr	r3, [pc, #464]	; (8004108 <HAL_RCC_OscConfig+0x474>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a73      	ldr	r2, [pc, #460]	; (8004108 <HAL_RCC_OscConfig+0x474>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f42:	f7fc ffc3 	bl	8000ecc <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4a:	f7fc ffbf 	bl	8000ecc <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e10c      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <HAL_RCC_OscConfig+0x474>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x2ea>
 8003f70:	4b64      	ldr	r3, [pc, #400]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	4a63      	ldr	r2, [pc, #396]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7c:	e01c      	b.n	8003fb8 <HAL_RCC_OscConfig+0x324>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x30c>
 8003f86:	4b5f      	ldr	r3, [pc, #380]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a5e      	ldr	r2, [pc, #376]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	4b5c      	ldr	r3, [pc, #368]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0x324>
 8003fa0:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a57      	ldr	r2, [pc, #348]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
 8003fac:	4b55      	ldr	r3, [pc, #340]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	4a54      	ldr	r2, [pc, #336]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	f023 0304 	bic.w	r3, r3, #4
 8003fb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fc ff84 	bl	8000ecc <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fc ff80 	bl	8000ecc <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e0cb      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	4b49      	ldr	r3, [pc, #292]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ee      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x334>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fec:	f7fc ff6e 	bl	8000ecc <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fc ff6a 	bl	8000ecc <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0b5      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400a:	4b3e      	ldr	r3, [pc, #248]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1ee      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	4b39      	ldr	r3, [pc, #228]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	4a38      	ldr	r2, [pc, #224]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004026:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80a1 	beq.w	8004174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004032:	4b34      	ldr	r3, [pc, #208]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b08      	cmp	r3, #8
 800403c:	d05c      	beq.n	80040f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d141      	bne.n	80040ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_RCC_OscConfig+0x478>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fc ff3e 	bl	8000ecc <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004054:	f7fc ff3a 	bl	8000ecc <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e087      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	019b      	lsls	r3, r3, #6
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	3b01      	subs	r3, #1
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	491b      	ldr	r1, [pc, #108]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_RCC_OscConfig+0x478>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fc ff13 	bl	8000ecc <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fc ff0f 	bl	8000ecc <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e05c      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x416>
 80040c8:	e054      	b.n	8004174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_RCC_OscConfig+0x478>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fc fefc 	bl	8000ecc <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fc fef8 	bl	8000ecc <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e045      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_OscConfig+0x470>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x444>
 80040f6:	e03d      	b.n	8004174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e038      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
 8004104:	40023800 	.word	0x40023800
 8004108:	40007000 	.word	0x40007000
 800410c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x4ec>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d028      	beq.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d121      	bne.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d11a      	bne.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004148:	4293      	cmp	r3, r2
 800414a:	d111      	bne.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	3b01      	subs	r3, #1
 800415a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0cc      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004198:	4b68      	ldr	r3, [pc, #416]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d90c      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b65      	ldr	r3, [pc, #404]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b63      	ldr	r3, [pc, #396]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0b8      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d8:	4b59      	ldr	r3, [pc, #356]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a58      	ldr	r2, [pc, #352]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f0:	4b53      	ldr	r3, [pc, #332]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a52      	ldr	r2, [pc, #328]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fc:	4b50      	ldr	r3, [pc, #320]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	494d      	ldr	r1, [pc, #308]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d044      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	4b47      	ldr	r3, [pc, #284]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d119      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e07f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d003      	beq.n	8004242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423e:	2b03      	cmp	r3, #3
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e06f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004252:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e067      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004262:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0203 	bic.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4934      	ldr	r1, [pc, #208]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004274:	f7fc fe2a 	bl	8000ecc <HAL_GetTick>
 8004278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	e00a      	b.n	8004292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800427c:	f7fc fe26 	bl	8000ecc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	; 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e04f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004292:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 020c 	and.w	r2, r3, #12
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d1eb      	bne.n	800427c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a4:	4b25      	ldr	r3, [pc, #148]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d20c      	bcs.n	80042cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b22      	ldr	r3, [pc, #136]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e032      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d8:	4b19      	ldr	r3, [pc, #100]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4916      	ldr	r1, [pc, #88]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	490e      	ldr	r1, [pc, #56]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800430a:	f000 f821 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 800430e:	4602      	mov	r2, r0
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	490a      	ldr	r1, [pc, #40]	; (8004344 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	5ccb      	ldrb	r3, [r1, r3]
 800431e:	fa22 f303 	lsr.w	r3, r2, r3
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fd8a 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023c00 	.word	0x40023c00
 8004340:	40023800 	.word	0x40023800
 8004344:	0800819c 	.word	0x0800819c
 8004348:	20000000 	.word	0x20000000
 800434c:	20000004 	.word	0x20000004

08004350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004354:	b094      	sub	sp, #80	; 0x50
 8004356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	647b      	str	r3, [r7, #68]	; 0x44
 800435c:	2300      	movs	r3, #0
 800435e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004360:	2300      	movs	r3, #0
 8004362:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004368:	4b79      	ldr	r3, [pc, #484]	; (8004550 <HAL_RCC_GetSysClockFreq+0x200>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d00d      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x40>
 8004374:	2b08      	cmp	r3, #8
 8004376:	f200 80e1 	bhi.w	800453c <HAL_RCC_GetSysClockFreq+0x1ec>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x34>
 800437e:	2b04      	cmp	r3, #4
 8004380:	d003      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x3a>
 8004382:	e0db      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004384:	4b73      	ldr	r3, [pc, #460]	; (8004554 <HAL_RCC_GetSysClockFreq+0x204>)
 8004386:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004388:	e0db      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800438a:	4b73      	ldr	r3, [pc, #460]	; (8004558 <HAL_RCC_GetSysClockFreq+0x208>)
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800438e:	e0d8      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004390:	4b6f      	ldr	r3, [pc, #444]	; (8004550 <HAL_RCC_GetSysClockFreq+0x200>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004398:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439a:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <HAL_RCC_GetSysClockFreq+0x200>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d063      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a6:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	099b      	lsrs	r3, r3, #6
 80043ac:	2200      	movs	r2, #0
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b8:	633b      	str	r3, [r7, #48]	; 0x30
 80043ba:	2300      	movs	r3, #0
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
 80043be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043c2:	4622      	mov	r2, r4
 80043c4:	462b      	mov	r3, r5
 80043c6:	f04f 0000 	mov.w	r0, #0
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	0159      	lsls	r1, r3, #5
 80043d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d4:	0150      	lsls	r0, r2, #5
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4621      	mov	r1, r4
 80043dc:	1a51      	subs	r1, r2, r1
 80043de:	6139      	str	r1, [r7, #16]
 80043e0:	4629      	mov	r1, r5
 80043e2:	eb63 0301 	sbc.w	r3, r3, r1
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f4:	4659      	mov	r1, fp
 80043f6:	018b      	lsls	r3, r1, #6
 80043f8:	4651      	mov	r1, sl
 80043fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043fe:	4651      	mov	r1, sl
 8004400:	018a      	lsls	r2, r1, #6
 8004402:	4651      	mov	r1, sl
 8004404:	ebb2 0801 	subs.w	r8, r2, r1
 8004408:	4659      	mov	r1, fp
 800440a:	eb63 0901 	sbc.w	r9, r3, r1
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800441a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800441e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004422:	4690      	mov	r8, r2
 8004424:	4699      	mov	r9, r3
 8004426:	4623      	mov	r3, r4
 8004428:	eb18 0303 	adds.w	r3, r8, r3
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	462b      	mov	r3, r5
 8004430:	eb49 0303 	adc.w	r3, r9, r3
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004442:	4629      	mov	r1, r5
 8004444:	024b      	lsls	r3, r1, #9
 8004446:	4621      	mov	r1, r4
 8004448:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800444c:	4621      	mov	r1, r4
 800444e:	024a      	lsls	r2, r1, #9
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004456:	2200      	movs	r2, #0
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
 800445a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800445c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004460:	f7fb feb2 	bl	80001c8 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800446c:	e058      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446e:	4b38      	ldr	r3, [pc, #224]	; (8004550 <HAL_RCC_GetSysClockFreq+0x200>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	2200      	movs	r2, #0
 8004476:	4618      	mov	r0, r3
 8004478:	4611      	mov	r1, r2
 800447a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800447e:	623b      	str	r3, [r7, #32]
 8004480:	2300      	movs	r3, #0
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
 8004484:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	f04f 0000 	mov.w	r0, #0
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	0159      	lsls	r1, r3, #5
 8004496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449a:	0150      	lsls	r0, r2, #5
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4641      	mov	r1, r8
 80044a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044a6:	4649      	mov	r1, r9
 80044a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044c0:	ebb2 040a 	subs.w	r4, r2, sl
 80044c4:	eb63 050b 	sbc.w	r5, r3, fp
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	00eb      	lsls	r3, r5, #3
 80044d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d6:	00e2      	lsls	r2, r4, #3
 80044d8:	4614      	mov	r4, r2
 80044da:	461d      	mov	r5, r3
 80044dc:	4643      	mov	r3, r8
 80044de:	18e3      	adds	r3, r4, r3
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	464b      	mov	r3, r9
 80044e4:	eb45 0303 	adc.w	r3, r5, r3
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044f6:	4629      	mov	r1, r5
 80044f8:	028b      	lsls	r3, r1, #10
 80044fa:	4621      	mov	r1, r4
 80044fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004500:	4621      	mov	r1, r4
 8004502:	028a      	lsls	r2, r1, #10
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450a:	2200      	movs	r2, #0
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	61fa      	str	r2, [r7, #28]
 8004510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004514:	f7fb fe58 	bl	80001c8 <__aeabi_uldivmod>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4613      	mov	r3, r2
 800451e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_GetSysClockFreq+0x200>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	0c1b      	lsrs	r3, r3, #16
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	3301      	adds	r3, #1
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800453a:	e002      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetSysClockFreq+0x204>)
 800453e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004544:	4618      	mov	r0, r3
 8004546:	3750      	adds	r7, #80	; 0x50
 8004548:	46bd      	mov	sp, r7
 800454a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	00f42400 	.word	0x00f42400
 8004558:	007a1200 	.word	0x007a1200

0800455c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <HAL_RCC_GetHCLKFreq+0x14>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000000 	.word	0x20000000

08004574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004578:	f7ff fff0 	bl	800455c <HAL_RCC_GetHCLKFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0a9b      	lsrs	r3, r3, #10
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	4903      	ldr	r1, [pc, #12]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40023800 	.word	0x40023800
 8004598:	080081ac 	.word	0x080081ac

0800459c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d035      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045c4:	4b62      	ldr	r3, [pc, #392]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ca:	f7fc fc7f 	bl	8000ecc <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045d2:	f7fc fc7b 	bl	8000ecc <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e0b0      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e4:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	019a      	lsls	r2, r3, #6
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	071b      	lsls	r3, r3, #28
 80045fc:	4955      	ldr	r1, [pc, #340]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004604:	4b52      	ldr	r3, [pc, #328]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800460a:	f7fc fc5f 	bl	8000ecc <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004612:	f7fc fc5b 	bl	8000ecc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e090      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004624:	4b4b      	ldr	r3, [pc, #300]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8083 	beq.w	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a43      	ldr	r2, [pc, #268]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800465a:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3e      	ldr	r2, [pc, #248]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004666:	f7fc fc31 	bl	8000ecc <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fc fc2d 	bl	8000ecc <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e062      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004680:	4b35      	ldr	r3, [pc, #212]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800468c:	4b31      	ldr	r3, [pc, #196]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004694:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02f      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d028      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046aa:	4b2a      	ldr	r3, [pc, #168]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ba:	4b28      	ldr	r3, [pc, #160]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046c0:	4a24      	ldr	r2, [pc, #144]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d114      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fc fbfb 	bl	8000ecc <HAL_GetTick>
 80046d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fc fbf7 	bl	8000ecc <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e02a      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ee      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004708:	d10d      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471e:	490d      	ldr	r1, [pc, #52]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004720:	4313      	orrs	r3, r2
 8004722:	608b      	str	r3, [r1, #8]
 8004724:	e005      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004734:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473e:	4905      	ldr	r1, [pc, #20]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	42470068 	.word	0x42470068
 8004754:	40023800 	.word	0x40023800
 8004758:	40007000 	.word	0x40007000
 800475c:	42470e40 	.word	0x42470e40

08004760 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d13e      	bne.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d12f      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004794:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004796:	617b      	str	r3, [r7, #20]
          break;
 8004798:	e02f      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800479a:	4b1c      	ldr	r3, [pc, #112]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a6:	d108      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047a8:	4b18      	ldr	r3, [pc, #96]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b0:	4a18      	ldr	r2, [pc, #96]	; (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	e007      	b.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047ba:	4b14      	ldr	r3, [pc, #80]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	0f1b      	lsrs	r3, r3, #28
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
          break;
 80047f2:	e002      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
          break;
 80047f8:	bf00      	nop
        }
      }
      break;
 80047fa:	bf00      	nop
    }
  }
  return frequency;
 80047fc:	697b      	ldr	r3, [r7, #20]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	00bb8000 	.word	0x00bb8000
 8004814:	007a1200 	.word	0x007a1200
 8004818:	00f42400 	.word	0x00f42400

0800481c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e07b      	b.n	8004926 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	2b00      	cmp	r3, #0
 8004834:	d108      	bne.n	8004848 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483e:	d009      	beq.n	8004854 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	61da      	str	r2, [r3, #28]
 8004846:	e005      	b.n	8004854 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc f9d8 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	ea42 0103 	orr.w	r1, r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	f003 0104 	and.w	r1, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	f003 0210 	and.w	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004914:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800492e:	b084      	sub	sp, #16
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	f107 001c 	add.w	r0, r7, #28
 800493c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	2b01      	cmp	r3, #1
 8004944:	d122      	bne.n	800498c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800495a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800496e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d105      	bne.n	8004980 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f9bf 	bl	8004d04 <USB_CoreReset>
 8004986:	4603      	mov	r3, r0
 8004988:	73fb      	strb	r3, [r7, #15]
 800498a:	e01a      	b.n	80049c2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f9b3 	bl	8004d04 <USB_CoreReset>
 800499e:	4603      	mov	r3, r0
 80049a0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
 80049b4:	e005      	b.n	80049c2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10b      	bne.n	80049e0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f043 0206 	orr.w	r2, r3, #6
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049ec:	b004      	add	sp, #16
 80049ee:	4770      	bx	lr

080049f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f043 0201 	orr.w	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d115      	bne.n	8004a82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a62:	2001      	movs	r0, #1
 8004a64:	f7fc fa3e 	bl	8000ee4 <HAL_Delay>
      ms++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f939 	bl	8004ce6 <USB_GetMode>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d01e      	beq.n	8004ab8 <USB_SetCurrentMode+0x84>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b31      	cmp	r3, #49	; 0x31
 8004a7e:	d9f0      	bls.n	8004a62 <USB_SetCurrentMode+0x2e>
 8004a80:	e01a      	b.n	8004ab8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d115      	bne.n	8004ab4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a94:	2001      	movs	r0, #1
 8004a96:	f7fc fa25 	bl	8000ee4 <HAL_Delay>
      ms++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f920 	bl	8004ce6 <USB_GetMode>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <USB_SetCurrentMode+0x84>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b31      	cmp	r3, #49	; 0x31
 8004ab0:	d9f0      	bls.n	8004a94 <USB_SetCurrentMode+0x60>
 8004ab2:	e001      	b.n	8004ab8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e005      	b.n	8004ac4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b32      	cmp	r3, #50	; 0x32
 8004abc:	d101      	bne.n	8004ac2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <USB_FlushTxFifo+0x64>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e01b      	b.n	8004b24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	daf2      	bge.n	8004ada <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	019b      	lsls	r3, r3, #6
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3301      	adds	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <USB_FlushTxFifo+0x64>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e006      	b.n	8004b24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d0f0      	beq.n	8004b04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	00030d40 	.word	0x00030d40

08004b34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <USB_FlushRxFifo+0x5c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e018      	b.n	8004b84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	daf2      	bge.n	8004b40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2210      	movs	r2, #16
 8004b62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <USB_FlushRxFifo+0x5c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e006      	b.n	8004b84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d0f0      	beq.n	8004b64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	00030d40 	.word	0x00030d40

08004b94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	; 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	71fb      	strb	r3, [r7, #7]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d123      	bne.n	8004c02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bba:	88bb      	ldrh	r3, [r7, #4]
 8004bbc:	3303      	adds	r3, #3
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e018      	b.n	8004bfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	031a      	lsls	r2, r3, #12
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	3301      	adds	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d3e2      	bcc.n	8004bc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3724      	adds	r7, #36	; 0x24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b08b      	sub	sp, #44	; 0x2c
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	089b      	lsrs	r3, r3, #2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	623b      	str	r3, [r7, #32]
 8004c3a:	e014      	b.n	8004c66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	3301      	adds	r3, #1
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	3301      	adds	r3, #1
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	3301      	adds	r3, #1
 8004c64:	623b      	str	r3, [r7, #32]
 8004c66:	6a3a      	ldr	r2, [r7, #32]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d3e6      	bcc.n	8004c3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c6e:	8bfb      	ldrh	r3, [r7, #30]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01e      	beq.n	8004cb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f107 0310 	add.w	r3, r7, #16
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	701a      	strb	r2, [r3, #0]
      i++;
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ca6:	8bfb      	ldrh	r3, [r7, #30]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cac:	8bfb      	ldrh	r3, [r7, #30]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1ea      	bne.n	8004c88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	372c      	adds	r7, #44	; 0x2c
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <USB_CoreReset+0x64>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e01b      	b.n	8004d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	daf2      	bge.n	8004d10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <USB_CoreReset+0x64>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e006      	b.n	8004d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d0f0      	beq.n	8004d3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	00030d40 	.word	0x00030d40

08004d6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b086      	sub	sp, #24
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d018      	beq.n	8004df4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d10a      	bne.n	8004dde <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dd6:	f043 0304 	orr.w	r3, r3, #4
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e014      	b.n	8004e08 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e009      	b.n	8004e08 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e02:	f023 0304 	bic.w	r3, r3, #4
 8004e06:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e08:	2110      	movs	r1, #16
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff fe5e 	bl	8004acc <USB_FlushTxFifo>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fe8a 	bl	8004b34 <USB_FlushRxFifo>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	e015      	b.n	8004e5c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3e5      	bcc.n	8004e30 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <USB_HostInit+0x16c>)
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <USB_HostInit+0x170>)
 8004e90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004e94:	e009      	b.n	8004eaa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2280      	movs	r2, #128	; 0x80
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a10      	ldr	r2, [pc, #64]	; (8004ee0 <USB_HostInit+0x174>)
 8004ea0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a0f      	ldr	r2, [pc, #60]	; (8004ee4 <USB_HostInit+0x178>)
 8004ea6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f043 0210 	orr.w	r2, r3, #16
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <USB_HostInit+0x17c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ed4:	b004      	add	sp, #16
 8004ed6:	4770      	bx	lr
 8004ed8:	01000200 	.word	0x01000200
 8004edc:	00e00300 	.word	0x00e00300
 8004ee0:	00600080 	.word	0x00600080
 8004ee4:	004000e0 	.word	0x004000e0
 8004ee8:	a3200008 	.word	0xa3200008

08004eec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f24:	4313      	orrs	r3, r2
 8004f26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d107      	bne.n	8004f3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f34:	461a      	mov	r2, r3
 8004f36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f3a:	6053      	str	r3, [r2, #4]
 8004f3c:	e009      	b.n	8004f52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d106      	bne.n	8004f52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004f50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004f90:	2064      	movs	r0, #100	; 0x64
 8004f92:	f7fb ffa7 	bl	8000ee4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004fa4:	200a      	movs	r0, #10
 8004fa6:	f7fb ff9d 	bl	8000ee4 <HAL_Delay>

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <USB_DriveVbus+0x44>
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d106      	bne.n	8004ff8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ff2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ff6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	d109      	bne.n	8005018 <USB_DriveVbus+0x64>
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005016:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	0c5b      	lsrs	r3, r3, #17
 8005044:	f003 0303 	and.w	r3, r3, #3
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	b29b      	uxth	r3, r3
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	461a      	mov	r2, r3
 8005086:	4603      	mov	r3, r0
 8005088:	70fb      	strb	r3, [r7, #3]
 800508a:	460b      	mov	r3, r1
 800508c:	70bb      	strb	r3, [r7, #2]
 800508e:	4613      	mov	r3, r2
 8005090:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a6:	461a      	mov	r2, r3
 80050a8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80050ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d87e      	bhi.n	80051b4 <USB_HC_Init+0x13c>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <USB_HC_Init+0x44>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050cd 	.word	0x080050cd
 80050c0:	08005177 	.word	0x08005177
 80050c4:	080050cd 	.word	0x080050cd
 80050c8:	08005139 	.word	0x08005139
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d8:	461a      	mov	r2, r3
 80050da:	f240 439d 	movw	r3, #1181	; 0x49d
 80050de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80050e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	da10      	bge.n	800510a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	78fa      	ldrb	r2, [r7, #3]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005106:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005108:	e057      	b.n	80051ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d051      	beq.n	80051ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	440a      	add	r2, r1
 800512c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005130:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005134:	60d3      	str	r3, [r2, #12]
      break;
 8005136:	e040      	b.n	80051ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4413      	add	r3, r2
 8005140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005144:	461a      	mov	r2, r3
 8005146:	f240 639d 	movw	r3, #1693	; 0x69d
 800514a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800514c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005150:	2b00      	cmp	r3, #0
 8005152:	da34      	bge.n	80051be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005174:	e023      	b.n	80051be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005176:	78fb      	ldrb	r3, [r7, #3]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	461a      	mov	r2, r3
 8005184:	f240 2325 	movw	r3, #549	; 0x225
 8005188:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800518a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800518e:	2b00      	cmp	r3, #0
 8005190:	da17      	bge.n	80051c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80051b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80051b2:	e006      	b.n	80051c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	77fb      	strb	r3, [r7, #31]
      break;
 80051b8:	e004      	b.n	80051c4 <USB_HC_Init+0x14c>
      break;
 80051ba:	bf00      	nop
 80051bc:	e002      	b.n	80051c4 <USB_HC_Init+0x14c>
      break;
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <USB_HC_Init+0x14c>
      break;
 80051c2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	2101      	movs	r1, #1
 80051f4:	fa01 f303 	lsl.w	r3, r1, r3
 80051f8:	6939      	ldr	r1, [r7, #16]
 80051fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051fe:	4313      	orrs	r3, r2
 8005200:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800520e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005212:	2b00      	cmp	r3, #0
 8005214:	da03      	bge.n	800521e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	e001      	b.n	8005222 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff feff 	bl	8005026 <USB_GetHostSpeed>
 8005228:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800522a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800522e:	2b02      	cmp	r3, #2
 8005230:	d106      	bne.n	8005240 <USB_HC_Init+0x1c8>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d003      	beq.n	8005240 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e001      	b.n	8005244 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005244:	787b      	ldrb	r3, [r7, #1]
 8005246:	059b      	lsls	r3, r3, #22
 8005248:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800524c:	78bb      	ldrb	r3, [r7, #2]
 800524e:	02db      	lsls	r3, r3, #11
 8005250:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005254:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005256:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800525a:	049b      	lsls	r3, r3, #18
 800525c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005260:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005262:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005264:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005268:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	0159      	lsls	r1, r3, #5
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	440b      	add	r3, r1
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005280:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005282:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005286:	2b03      	cmp	r3, #3
 8005288:	d003      	beq.n	8005292 <USB_HC_Init+0x21a>
 800528a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10f      	bne.n	80052b2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	78fa      	ldrb	r2, [r7, #3]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80052b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08c      	sub	sp, #48	; 0x30
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80052d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02d      	beq.n	8005342 <USB_HC_StartXfer+0x86>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	791b      	ldrb	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d129      	bne.n	8005342 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d117      	bne.n	8005324 <USB_HC_StartXfer+0x68>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	79db      	ldrb	r3, [r3, #7]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <USB_HC_StartXfer+0x48>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	79db      	ldrb	r3, [r3, #7]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d10f      	bne.n	8005324 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	440a      	add	r2, r1
 800531a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <USB_HC_StartXfer+0x86>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	795b      	ldrb	r3, [r3, #5]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d107      	bne.n	8005342 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	4619      	mov	r1, r3
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fa0f 	bl	800575c <USB_DoPing>
      return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e0f8      	b.n	8005534 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d018      	beq.n	800537c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	8912      	ldrh	r2, [r2, #8]
 8005352:	4413      	add	r3, r2
 8005354:	3b01      	subs	r3, #1
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	8912      	ldrh	r2, [r2, #8]
 800535a:	fbb3 f3f2 	udiv	r3, r3, r2
 800535e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005360:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005362:	8b7b      	ldrh	r3, [r7, #26]
 8005364:	429a      	cmp	r2, r3
 8005366:	d90b      	bls.n	8005380 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005368:	8b7b      	ldrh	r3, [r7, #26]
 800536a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800536c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	8912      	ldrh	r2, [r2, #8]
 8005372:	fb03 f202 	mul.w	r2, r3, r2
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	611a      	str	r2, [r3, #16]
 800537a:	e001      	b.n	8005380 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800537c:	2301      	movs	r3, #1
 800537e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	78db      	ldrb	r3, [r3, #3]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005388:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	8912      	ldrh	r2, [r2, #8]
 800538e:	fb03 f202 	mul.w	r2, r3, r2
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	611a      	str	r2, [r3, #16]
 8005396:	e003      	b.n	80053a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053aa:	04d9      	lsls	r1, r3, #19
 80053ac:	4b63      	ldr	r3, [pc, #396]	; (800553c <USB_HC_StartXfer+0x280>)
 80053ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	7a9b      	ldrb	r3, [r3, #10]
 80053b6:	075b      	lsls	r3, r3, #29
 80053b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053bc:	69f9      	ldr	r1, [r7, #28]
 80053be:	0148      	lsls	r0, r1, #5
 80053c0:	6a39      	ldr	r1, [r7, #32]
 80053c2:	4401      	add	r1, r0
 80053c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	68d9      	ldr	r1, [r3, #12]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e2:	460a      	mov	r2, r1
 80053e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	4413      	add	r3, r2
 8005406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	6a3a      	ldr	r2, [r7, #32]
 8005412:	440a      	add	r2, r1
 8005414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005418:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800541c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	7e7b      	ldrb	r3, [r7, #25]
 800542e:	075b      	lsls	r3, r3, #29
 8005430:	69f9      	ldr	r1, [r7, #28]
 8005432:	0148      	lsls	r0, r1, #5
 8005434:	6a39      	ldr	r1, [r7, #32]
 8005436:	4401      	add	r1, r0
 8005438:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	4413      	add	r3, r2
 8005448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005456:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	e003      	b.n	8005472 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005470:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005478:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	461a      	mov	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	e04e      	b.n	8005534 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	78db      	ldrb	r3, [r3, #3]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d149      	bne.n	8005532 <USB_HC_StartXfer+0x276>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d045      	beq.n	8005532 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	79db      	ldrb	r3, [r3, #7]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d830      	bhi.n	8005510 <USB_HC_StartXfer+0x254>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <USB_HC_StartXfer+0x1f8>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054c5 	.word	0x080054c5
 80054b8:	080054e9 	.word	0x080054e9
 80054bc:	080054c5 	.word	0x080054c5
 80054c0:	080054e9 	.word	0x080054e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	3303      	adds	r3, #3
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80054ce:	8afa      	ldrh	r2, [r7, #22]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d91c      	bls.n	8005514 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80054e6:	e015      	b.n	8005514 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	3303      	adds	r3, #3
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80054f2:	8afa      	ldrh	r2, [r7, #22]
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	429a      	cmp	r2, r3
 8005500:	d90a      	bls.n	8005518 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	619a      	str	r2, [r3, #24]
        }
        break;
 800550e:	e003      	b.n	8005518 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005510:	bf00      	nop
 8005512:	e002      	b.n	800551a <USB_HC_StartXfer+0x25e>
        break;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <USB_HC_StartXfer+0x25e>
        break;
 8005518:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	68d9      	ldr	r1, [r3, #12]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	785a      	ldrb	r2, [r3, #1]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	b29b      	uxth	r3, r3
 8005528:	2000      	movs	r0, #0
 800552a:	9000      	str	r0, [sp, #0]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff fb31 	bl	8004b94 <USB_WritePacket>
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3728      	adds	r7, #40	; 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	1ff80000 	.word	0x1ff80000

08005540 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	b29b      	uxth	r3, r3
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005562:	b480      	push	{r7}
 8005564:	b089      	sub	sp, #36	; 0x24
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	0c9b      	lsrs	r3, r3, #18
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	0fdb      	lsrs	r3, r3, #31
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d104      	bne.n	80055bc <USB_HC_Halt+0x5a>
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e0c8      	b.n	800574e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <USB_HC_Halt+0x66>
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d163      	bne.n	8005690 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f040 80ab 	bne.w	800574c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d133      	bne.n	800566a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800561c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005620:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005640:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3301      	adds	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800564e:	d81d      	bhi.n	800568c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005666:	d0ec      	beq.n	8005642 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005668:	e070      	b.n	800574c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	440a      	add	r2, r1
 8005680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005688:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800568a:	e05f      	b.n	800574c <USB_HC_Halt+0x1ea>
            break;
 800568c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800568e:	e05d      	b.n	800574c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d133      	bne.n	8005728 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056fe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800570c:	d81d      	bhi.n	800574a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005724:	d0ec      	beq.n	8005700 <USB_HC_Halt+0x19e>
 8005726:	e011      	b.n	800574c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	440a      	add	r2, r1
 800573e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e000      	b.n	800574c <USB_HC_Halt+0x1ea>
          break;
 800574a:	bf00      	nop
    }
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3724      	adds	r7, #36	; 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005770:	2301      	movs	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	04da      	lsls	r2, r3, #19
 8005778:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <USB_DoPing+0x74>)
 800577a:	4013      	ands	r3, r2
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	440a      	add	r2, r1
 8005784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800578c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	1ff80000 	.word	0x1ff80000

080057d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff f912 	bl	8004a12 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057ee:	2110      	movs	r1, #16
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff f96b 	bl	8004acc <USB_FlushTxFifo>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff f997 	bl	8004b34 <USB_FlushRxFifo>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e01f      	b.n	8005856 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800582c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005834:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800583c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4413      	add	r3, r2
 8005846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584a:	461a      	mov	r2, r3
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	3301      	adds	r3, #1
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b0f      	cmp	r3, #15
 800585a:	d9dc      	bls.n	8005816 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e034      	b.n	80058cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005878:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005880:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005888:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005896:	461a      	mov	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a8:	d80c      	bhi.n	80058c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058c0:	d0ec      	beq.n	800589c <USB_StopHost+0xc8>
 80058c2:	e000      	b.n	80058c6 <USB_StopHost+0xf2>
        break;
 80058c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	d9c7      	bls.n	8005862 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d8:	461a      	mov	r2, r3
 80058da:	f04f 33ff 	mov.w	r3, #4294967295
 80058de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f04f 32ff 	mov.w	r2, #4294967295
 80058e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff f881 	bl	80049f0 <USB_EnableGlobalInt>

  return ret;
 80058ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b089      	sub	sp, #36	; 0x24
 80058fc:	af04      	add	r7, sp, #16
 80058fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005900:	2301      	movs	r3, #1
 8005902:	2202      	movs	r2, #2
 8005904:	2102      	movs	r1, #2
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fc66 	bl	80061d8 <USBH_FindInterface>
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2bff      	cmp	r3, #255	; 0xff
 8005914:	d002      	beq.n	800591c <USBH_CDC_InterfaceInit+0x24>
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d901      	bls.n	8005920 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800591c:	2302      	movs	r3, #2
 800591e:	e13d      	b.n	8005b9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fc3b 	bl	80061a0 <USBH_SelectInterface>
 800592a:	4603      	mov	r3, r0
 800592c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005934:	2302      	movs	r3, #2
 8005936:	e131      	b.n	8005b9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800593e:	2050      	movs	r0, #80	; 0x50
 8005940:	f002 fad2 	bl	8007ee8 <malloc>
 8005944:	4603      	mov	r3, r0
 8005946:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005958:	2302      	movs	r3, #2
 800595a:	e11f      	b.n	8005b9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800595c:	2250      	movs	r2, #80	; 0x50
 800595e:	2100      	movs	r1, #0
 8005960:	68b8      	ldr	r0, [r7, #8]
 8005962:	f002 fb7d 	bl	8008060 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	211a      	movs	r1, #26
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	4413      	add	r3, r2
 8005972:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	b25b      	sxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	da15      	bge.n	80059aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	211a      	movs	r1, #26
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	4413      	add	r3, r2
 800598a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	211a      	movs	r1, #26
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 ff2e 	bl	8007812 <USBH_AllocPipe>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	7819      	ldrb	r1, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	7858      	ldrb	r0, [r3, #1]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	8952      	ldrh	r2, [r2, #10]
 80059d6:	9202      	str	r2, [sp, #8]
 80059d8:	2203      	movs	r2, #3
 80059da:	9201      	str	r2, [sp, #4]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	4623      	mov	r3, r4
 80059e0:	4602      	mov	r2, r0
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fee6 	bl	80077b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2200      	movs	r2, #0
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f002 f9f5 	bl	8007de0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80059f6:	2300      	movs	r3, #0
 80059f8:	2200      	movs	r2, #0
 80059fa:	210a      	movs	r1, #10
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fbeb 	bl	80061d8 <USBH_FindInterface>
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2bff      	cmp	r3, #255	; 0xff
 8005a0a:	d002      	beq.n	8005a12 <USBH_CDC_InterfaceInit+0x11a>
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d901      	bls.n	8005a16 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a12:	2302      	movs	r3, #2
 8005a14:	e0c2      	b.n	8005b9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	211a      	movs	r1, #26
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	4413      	add	r3, r2
 8005a22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	b25b      	sxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	da16      	bge.n	8005a5c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	211a      	movs	r1, #26
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	4413      	add	r3, r2
 8005a3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	211a      	movs	r1, #26
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	835a      	strh	r2, [r3, #26]
 8005a5a:	e015      	b.n	8005a88 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	211a      	movs	r1, #26
 8005a62:	fb01 f303 	mul.w	r3, r1, r3
 8005a66:	4413      	add	r3, r2
 8005a68:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a6c:	781a      	ldrb	r2, [r3, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	211a      	movs	r1, #26
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a82:	881a      	ldrh	r2, [r3, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	211a      	movs	r1, #26
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	4413      	add	r3, r2
 8005a94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	b25b      	sxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	da16      	bge.n	8005ace <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	211a      	movs	r1, #26
 8005aa6:	fb01 f303 	mul.w	r3, r1, r3
 8005aaa:	4413      	add	r3, r2
 8005aac:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	211a      	movs	r1, #26
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ac6:	881a      	ldrh	r2, [r3, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	835a      	strh	r2, [r3, #26]
 8005acc:	e015      	b.n	8005afa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	211a      	movs	r1, #26
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	4413      	add	r3, r2
 8005ada:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	211a      	movs	r1, #26
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005af4:	881a      	ldrh	r2, [r3, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	7b9b      	ldrb	r3, [r3, #14]
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fe86 	bl	8007812 <USBH_AllocPipe>
 8005b06:	4603      	mov	r3, r0
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	7bdb      	ldrb	r3, [r3, #15]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 fe7c 	bl	8007812 <USBH_AllocPipe>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	7b59      	ldrb	r1, [r3, #13]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	7b98      	ldrb	r0, [r3, #14]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	8b12      	ldrh	r2, [r2, #24]
 8005b3a:	9202      	str	r2, [sp, #8]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	9201      	str	r2, [sp, #4]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	4623      	mov	r3, r4
 8005b44:	4602      	mov	r2, r0
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fe34 	bl	80077b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	7b19      	ldrb	r1, [r3, #12]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	7bd8      	ldrb	r0, [r3, #15]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	8b52      	ldrh	r2, [r2, #26]
 8005b64:	9202      	str	r2, [sp, #8]
 8005b66:	2202      	movs	r2, #2
 8005b68:	9201      	str	r2, [sp, #4]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 fe1f 	bl	80077b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	7b5b      	ldrb	r3, [r3, #13]
 8005b82:	2200      	movs	r2, #0
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f002 f92a 	bl	8007de0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	7b1b      	ldrb	r3, [r3, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f002 f923 	bl	8007de0 <USBH_LL_SetToggle>

  return USBH_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd90      	pop	{r4, r7, pc}

08005ba4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00e      	beq.n	8005bdc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 fe14 	bl	80077f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 fe3f 	bl	8007854 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	7b1b      	ldrb	r3, [r3, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00e      	beq.n	8005c02 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	7b1b      	ldrb	r3, [r3, #12]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fe01 	bl	80077f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	7b1b      	ldrb	r3, [r3, #12]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fe2c 	bl	8007854 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	7b5b      	ldrb	r3, [r3, #13]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00e      	beq.n	8005c28 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	7b5b      	ldrb	r3, [r3, #13]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fdee 	bl	80077f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	7b5b      	ldrb	r3, [r3, #13]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fe19 	bl	8007854 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f002 f95b 	bl	8007ef8 <free>
    phost->pActiveClass->pData = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c48:	2200      	movs	r2, #0
 8005c4a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3340      	adds	r3, #64	; 0x40
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f8b1 	bl	8005dd6 <GetLineCoding>
 8005c74:	4603      	mov	r3, r0
 8005c76:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005c78:	7afb      	ldrb	r3, [r7, #11]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d105      	bne.n	8005c8a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c84:	2102      	movs	r1, #2
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d877      	bhi.n	8005da8 <USBH_CDC_Process+0x114>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <USBH_CDC_Process+0x2c>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd5 	.word	0x08005cd5
 8005cc4:	08005cdb 	.word	0x08005cdb
 8005cc8:	08005d0b 	.word	0x08005d0b
 8005ccc:	08005d7f 	.word	0x08005d7f
 8005cd0:	08005d8d 	.word	0x08005d8d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd8:	e06d      	b.n	8005db6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f897 	bl	8005e14 <SetLineCoding>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005cf8:	e058      	b.n	8005dac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d055      	beq.n	8005dac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2204      	movs	r2, #4
 8005d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005d08:	e050      	b.n	8005dac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3340      	adds	r3, #64	; 0x40
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f860 	bl	8005dd6 <GetLineCoding>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d1a:	7bbb      	ldrb	r3, [r7, #14]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d126      	bne.n	8005d6e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d32:	791b      	ldrb	r3, [r3, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d13b      	bne.n	8005db0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d42:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d133      	bne.n	8005db0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d52:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d12b      	bne.n	8005db0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d60:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d124      	bne.n	8005db0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f958 	bl	800601c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005d6c:	e020      	b.n	8005db0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d01d      	beq.n	8005db0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2204      	movs	r2, #4
 8005d78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005d7c:	e018      	b.n	8005db0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f867 	bl	8005e52 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8da 	bl	8005f3e <CDC_ProcessReception>
      break;
 8005d8a:	e014      	b.n	8005db6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 ffef 	bl	8006d72 <USBH_ClrFeature>
 8005d94:	4603      	mov	r3, r0
 8005d96:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005da6:	e005      	b.n	8005db4 <USBH_CDC_Process+0x120>

    default:
      break;
 8005da8:	bf00      	nop
 8005daa:	e004      	b.n	8005db6 <USBH_CDC_Process+0x122>
      break;
 8005dac:	bf00      	nop
 8005dae:	e002      	b.n	8005db6 <USBH_CDC_Process+0x122>
      break;
 8005db0:	bf00      	nop
 8005db2:	e000      	b.n	8005db6 <USBH_CDC_Process+0x122>
      break;
 8005db4:	bf00      	nop

  }

  return status;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	22a1      	movs	r2, #161	; 0xa1
 8005de4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2221      	movs	r2, #33	; 0x21
 8005dea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2207      	movs	r2, #7
 8005dfc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2207      	movs	r2, #7
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 fa83 	bl	8007310 <USBH_CtlReq>
 8005e0a:	4603      	mov	r3, r0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2221      	movs	r2, #33	; 0x21
 8005e22:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2207      	movs	r2, #7
 8005e3a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2207      	movs	r2, #7
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fa64 	bl	8007310 <USBH_CtlReq>
 8005e48:	4603      	mov	r3, r0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af02      	add	r7, sp, #8
 8005e58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d002      	beq.n	8005e78 <CDC_ProcessTransmission+0x26>
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d023      	beq.n	8005ebe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005e76:	e05e      	b.n	8005f36 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	8b12      	ldrh	r2, [r2, #24]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d90b      	bls.n	8005e9c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	69d9      	ldr	r1, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8b1a      	ldrh	r2, [r3, #24]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	7b5b      	ldrb	r3, [r3, #13]
 8005e90:	2001      	movs	r0, #1
 8005e92:	9000      	str	r0, [sp, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 fc4a 	bl	800772e <USBH_BulkSendData>
 8005e9a:	e00b      	b.n	8005eb4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	7b5b      	ldrb	r3, [r3, #13]
 8005eaa:	2001      	movs	r0, #1
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fc3d 	bl	800772e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ebc:	e03b      	b.n	8005f36 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	7b5b      	ldrb	r3, [r3, #13]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 ff61 	bl	8007d8c <USBH_LL_GetURBState>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d128      	bne.n	8005f26 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	8b12      	ldrh	r2, [r2, #24]
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d90e      	bls.n	8005efe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	8b12      	ldrh	r2, [r2, #24]
 8005ee8:	1a9a      	subs	r2, r3, r2
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	8b12      	ldrh	r2, [r2, #24]
 8005ef6:	441a      	add	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	61da      	str	r2, [r3, #28]
 8005efc:	e002      	b.n	8005f04 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f14:	e00e      	b.n	8005f34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f868 	bl	8005ff4 <USBH_CDC_TransmitCallback>
      break;
 8005f24:	e006      	b.n	8005f34 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d103      	bne.n	8005f34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f34:	bf00      	nop
  }
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b086      	sub	sp, #24
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f50:	2300      	movs	r3, #0
 8005f52:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d002      	beq.n	8005f64 <CDC_ProcessReception+0x26>
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d00e      	beq.n	8005f80 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005f62:	e043      	b.n	8005fec <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	6a19      	ldr	r1, [r3, #32]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	8b5a      	ldrh	r2, [r3, #26]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	7b1b      	ldrb	r3, [r3, #12]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 fc01 	bl	8007778 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005f7e:	e035      	b.n	8005fec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	7b1b      	ldrb	r3, [r3, #12]
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f001 ff00 	bl	8007d8c <USBH_LL_GetURBState>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d129      	bne.n	8005fea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	7b1b      	ldrb	r3, [r3, #12]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 fe63 	bl	8007c68 <USBH_LL_GetLastXferSize>
 8005fa2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d016      	beq.n	8005fdc <CDC_ProcessReception+0x9e>
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	8b5b      	ldrh	r3, [r3, #26]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d910      	bls.n	8005fdc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad2      	subs	r2, r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	6a1a      	ldr	r2, [r3, #32]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	441a      	add	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005fda:	e006      	b.n	8005fea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f80f 	bl	8006008 <USBH_CDC_ReceiveCallback>
      break;
 8005fea:	bf00      	nop
  }
}
 8005fec:	bf00      	nop
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006044:	2302      	movs	r3, #2
 8006046:	e029      	b.n	800609c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	79fa      	ldrb	r2, [r7, #7]
 800604c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f81f 	bl	80060a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f001 fd33 	bl	8007b00 <USBH_LL_Init>

  return USBH_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e009      	b.n	80060ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	33e0      	adds	r3, #224	; 0xe0
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	2200      	movs	r2, #0
 80060c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d9f2      	bls.n	80060b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e009      	b.n	80060ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f0:	d3f1      	bcc.n	80060d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2240      	movs	r2, #64	; 0x40
 8006116:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d016      	beq.n	800618e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10e      	bne.n	8006188 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	33de      	adds	r3, #222	; 0xde
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	e004      	b.n	8006192 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006188:	2302      	movs	r3, #2
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e001      	b.n	8006192 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800618e:	2302      	movs	r3, #2
 8006190:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d204      	bcs.n	80061c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	78fa      	ldrb	r2, [r7, #3]
 80061c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80061c4:	e001      	b.n	80061ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80061c6:	2302      	movs	r3, #2
 80061c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	70fb      	strb	r3, [r7, #3]
 80061ea:	460b      	mov	r3, r1
 80061ec:	70bb      	strb	r3, [r7, #2]
 80061ee:	4613      	mov	r3, r2
 80061f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006200:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006202:	e025      	b.n	8006250 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	221a      	movs	r2, #26
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	3308      	adds	r3, #8
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	3302      	adds	r3, #2
 8006214:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	795b      	ldrb	r3, [r3, #5]
 800621a:	78fa      	ldrb	r2, [r7, #3]
 800621c:	429a      	cmp	r2, r3
 800621e:	d002      	beq.n	8006226 <USBH_FindInterface+0x4e>
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	2bff      	cmp	r3, #255	; 0xff
 8006224:	d111      	bne.n	800624a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800622a:	78ba      	ldrb	r2, [r7, #2]
 800622c:	429a      	cmp	r2, r3
 800622e:	d002      	beq.n	8006236 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006230:	78bb      	ldrb	r3, [r7, #2]
 8006232:	2bff      	cmp	r3, #255	; 0xff
 8006234:	d109      	bne.n	800624a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800623a:	787a      	ldrb	r2, [r7, #1]
 800623c:	429a      	cmp	r2, r3
 800623e:	d002      	beq.n	8006246 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006240:	787b      	ldrb	r3, [r7, #1]
 8006242:	2bff      	cmp	r3, #255	; 0xff
 8006244:	d101      	bne.n	800624a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	e006      	b.n	8006258 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	3301      	adds	r3, #1
 800624e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d9d6      	bls.n	8006204 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006256:	23ff      	movs	r3, #255	; 0xff
}
 8006258:	4618      	mov	r0, r3
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 fc83 	bl	8007b78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006272:	2101      	movs	r1, #1
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fd9c 	bl	8007db2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af04      	add	r7, sp, #16
 800628a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800628c:	2302      	movs	r3, #2
 800628e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d102      	bne.n	80062a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2203      	movs	r2, #3
 80062a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b0b      	cmp	r3, #11
 80062ae:	f200 81be 	bhi.w	800662e <USBH_Process+0x3aa>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <USBH_Process+0x34>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062e9 	.word	0x080062e9
 80062bc:	0800631b 	.word	0x0800631b
 80062c0:	08006383 	.word	0x08006383
 80062c4:	080065c9 	.word	0x080065c9
 80062c8:	0800662f 	.word	0x0800662f
 80062cc:	08006427 	.word	0x08006427
 80062d0:	0800656f 	.word	0x0800656f
 80062d4:	0800645d 	.word	0x0800645d
 80062d8:	0800647d 	.word	0x0800647d
 80062dc:	0800649d 	.word	0x0800649d
 80062e0:	080064e1 	.word	0x080064e1
 80062e4:	080065b1 	.word	0x080065b1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 819e 	beq.w	8006632 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80062fc:	20c8      	movs	r0, #200	; 0xc8
 80062fe:	f001 fd9f 	bl	8007e40 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fc95 	bl	8007c32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006318:	e18b      	b.n	8006632 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006320:	2b01      	cmp	r3, #1
 8006322:	d107      	bne.n	8006334 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006332:	e18d      	b.n	8006650 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800633a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800633e:	d914      	bls.n	800636a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006346:	3301      	adds	r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006356:	2b03      	cmp	r3, #3
 8006358:	d903      	bls.n	8006362 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	220d      	movs	r2, #13
 800635e:	701a      	strb	r2, [r3, #0]
      break;
 8006360:	e176      	b.n	8006650 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
      break;
 8006368:	e172      	b.n	8006650 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006370:	f103 020a 	add.w	r2, r3, #10
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800637a:	200a      	movs	r0, #10
 800637c:	f001 fd60 	bl	8007e40 <USBH_Delay>
      break;
 8006380:	e166      	b.n	8006650 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006392:	2104      	movs	r1, #4
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006398:	2064      	movs	r0, #100	; 0x64
 800639a:	f001 fd51 	bl	8007e40 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fc20 	bl	8007be4 <USBH_LL_GetSpeed>
 80063a4:	4603      	mov	r3, r0
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2205      	movs	r2, #5
 80063b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80063b4:	2100      	movs	r1, #0
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fa2b 	bl	8007812 <USBH_AllocPipe>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80063c4:	2180      	movs	r1, #128	; 0x80
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fa23 	bl	8007812 <USBH_AllocPipe>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7919      	ldrb	r1, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80063e8:	b292      	uxth	r2, r2
 80063ea:	9202      	str	r2, [sp, #8]
 80063ec:	2200      	movs	r2, #0
 80063ee:	9201      	str	r2, [sp, #4]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4603      	mov	r3, r0
 80063f4:	2280      	movs	r2, #128	; 0x80
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 f9dc 	bl	80077b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	7959      	ldrb	r1, [r3, #5]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006410:	b292      	uxth	r2, r2
 8006412:	9202      	str	r2, [sp, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	9201      	str	r2, [sp, #4]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	4603      	mov	r3, r0
 800641c:	2200      	movs	r2, #0
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f9c8 	bl	80077b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006424:	e114      	b.n	8006650 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f918 	bl	800665c <USBH_HandleEnum>
 800642c:	4603      	mov	r3, r0
 800642e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	f040 80fe 	bne.w	8006636 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006448:	2b01      	cmp	r3, #1
 800644a:	d103      	bne.n	8006454 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2208      	movs	r2, #8
 8006450:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006452:	e0f0      	b.n	8006636 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2207      	movs	r2, #7
 8006458:	701a      	strb	r2, [r3, #0]
      break;
 800645a:	e0ec      	b.n	8006636 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80e9 	beq.w	800663a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800646e:	2101      	movs	r1, #1
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2208      	movs	r2, #8
 8006478:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800647a:	e0de      	b.n	800663a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006482:	b29b      	uxth	r3, r3
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fc2c 	bl	8006ce4 <USBH_SetCfg>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 80d5 	bne.w	800663e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2209      	movs	r2, #9
 8006498:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800649a:	e0d0      	b.n	800663e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80064aa:	2101      	movs	r1, #1
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fc3c 	bl	8006d2a <USBH_SetFeature>
 80064b2:	4603      	mov	r3, r0
 80064b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	220a      	movs	r2, #10
 80064c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80064c4:	e0bd      	b.n	8006642 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	f040 80b9 	bne.w	8006642 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	220a      	movs	r2, #10
 80064d4:	701a      	strb	r2, [r3, #0]
      break;
 80064d6:	e0b4      	b.n	8006642 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	220a      	movs	r2, #10
 80064dc:	701a      	strb	r2, [r3, #0]
      break;
 80064de:	e0b0      	b.n	8006642 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 80ad 	beq.w	8006646 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]
 80064f8:	e016      	b.n	8006528 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80064fa:	7bfa      	ldrb	r2, [r7, #15]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	32de      	adds	r2, #222	; 0xde
 8006500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006504:	791a      	ldrb	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800650c:	429a      	cmp	r2, r3
 800650e:	d108      	bne.n	8006522 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006510:	7bfa      	ldrb	r2, [r7, #15]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	32de      	adds	r2, #222	; 0xde
 8006516:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006520:	e005      	b.n	800652e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	3301      	adds	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0e5      	beq.n	80064fa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006534:	2b00      	cmp	r3, #0
 8006536:	d016      	beq.n	8006566 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d109      	bne.n	800655e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2206      	movs	r2, #6
 800654e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006556:	2103      	movs	r1, #3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800655c:	e073      	b.n	8006646 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	220d      	movs	r2, #13
 8006562:	701a      	strb	r2, [r3, #0]
      break;
 8006564:	e06f      	b.n	8006646 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	220d      	movs	r2, #13
 800656a:	701a      	strb	r2, [r3, #0]
      break;
 800656c:	e06b      	b.n	8006646 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d017      	beq.n	80065a8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
 8006584:	4603      	mov	r3, r0
 8006586:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d103      	bne.n	8006598 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	220b      	movs	r2, #11
 8006594:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006596:	e058      	b.n	800664a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d154      	bne.n	800664a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	220d      	movs	r2, #13
 80065a4:	701a      	strb	r2, [r3, #0]
      break;
 80065a6:	e050      	b.n	800664a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	220d      	movs	r2, #13
 80065ac:	701a      	strb	r2, [r3, #0]
      break;
 80065ae:	e04c      	b.n	800664a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d049      	beq.n	800664e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
      }
      break;
 80065c6:	e042      	b.n	800664e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fd67 	bl	80060a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006604:	2105      	movs	r1, #5
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b01      	cmp	r3, #1
 8006614:	d107      	bne.n	8006626 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fe20 	bl	8006264 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006624:	e014      	b.n	8006650 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 faa6 	bl	8007b78 <USBH_LL_Start>
      break;
 800662c:	e010      	b.n	8006650 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800662e:	bf00      	nop
 8006630:	e00e      	b.n	8006650 <USBH_Process+0x3cc>
      break;
 8006632:	bf00      	nop
 8006634:	e00c      	b.n	8006650 <USBH_Process+0x3cc>
      break;
 8006636:	bf00      	nop
 8006638:	e00a      	b.n	8006650 <USBH_Process+0x3cc>
    break;
 800663a:	bf00      	nop
 800663c:	e008      	b.n	8006650 <USBH_Process+0x3cc>
      break;
 800663e:	bf00      	nop
 8006640:	e006      	b.n	8006650 <USBH_Process+0x3cc>
      break;
 8006642:	bf00      	nop
 8006644:	e004      	b.n	8006650 <USBH_Process+0x3cc>
      break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <USBH_Process+0x3cc>
      break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <USBH_Process+0x3cc>
      break;
 800664e:	bf00      	nop
  }
  return USBH_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop

0800665c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af04      	add	r7, sp, #16
 8006662:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006668:	2301      	movs	r3, #1
 800666a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b07      	cmp	r3, #7
 8006672:	f200 81c1 	bhi.w	80069f8 <USBH_HandleEnum+0x39c>
 8006676:	a201      	add	r2, pc, #4	; (adr r2, 800667c <USBH_HandleEnum+0x20>)
 8006678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667c:	0800669d 	.word	0x0800669d
 8006680:	0800675b 	.word	0x0800675b
 8006684:	080067c5 	.word	0x080067c5
 8006688:	08006853 	.word	0x08006853
 800668c:	080068bd 	.word	0x080068bd
 8006690:	0800692d 	.word	0x0800692d
 8006694:	08006973 	.word	0x08006973
 8006698:	080069b9 	.word	0x080069b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800669c:	2108      	movs	r1, #8
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa50 	bl	8006b44 <USBH_Get_DevDesc>
 80066a4:	4603      	mov	r3, r0
 80066a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d130      	bne.n	8006710 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7919      	ldrb	r1, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80066d2:	b292      	uxth	r2, r2
 80066d4:	9202      	str	r2, [sp, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	9201      	str	r2, [sp, #4]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	4603      	mov	r3, r0
 80066de:	2280      	movs	r2, #128	; 0x80
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 f867 	bl	80077b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7959      	ldrb	r1, [r3, #5]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066fa:	b292      	uxth	r2, r2
 80066fc:	9202      	str	r2, [sp, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	9201      	str	r2, [sp, #4]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	4603      	mov	r3, r0
 8006706:	2200      	movs	r2, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 f853 	bl	80077b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800670e:	e175      	b.n	80069fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b03      	cmp	r3, #3
 8006714:	f040 8172 	bne.w	80069fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800671e:	3301      	adds	r3, #1
 8006720:	b2da      	uxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800672e:	2b03      	cmp	r3, #3
 8006730:	d903      	bls.n	800673a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	220d      	movs	r2, #13
 8006736:	701a      	strb	r2, [r3, #0]
      break;
 8006738:	e160      	b.n	80069fc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	795b      	ldrb	r3, [r3, #5]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f887 	bl	8007854 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	791b      	ldrb	r3, [r3, #4]
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 f881 	bl	8007854 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
      break;
 8006758:	e150      	b.n	80069fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800675a:	2112      	movs	r1, #18
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f9f1 	bl	8006b44 <USBH_Get_DevDesc>
 8006762:	4603      	mov	r3, r0
 8006764:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006772:	e145      	b.n	8006a00 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	2b03      	cmp	r3, #3
 8006778:	f040 8142 	bne.w	8006a00 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006782:	3301      	adds	r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006792:	2b03      	cmp	r3, #3
 8006794:	d903      	bls.n	800679e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	220d      	movs	r2, #13
 800679a:	701a      	strb	r2, [r3, #0]
      break;
 800679c:	e130      	b.n	8006a00 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	795b      	ldrb	r3, [r3, #5]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f855 	bl	8007854 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	791b      	ldrb	r3, [r3, #4]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 f84f 	bl	8007854 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	701a      	strb	r2, [r3, #0]
      break;
 80067c2:	e11d      	b.n	8006a00 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80067c4:	2101      	movs	r1, #1
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa68 	bl	8006c9c <USBH_SetAddress>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d132      	bne.n	800683c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80067d6:	2002      	movs	r0, #2
 80067d8:	f001 fb32 	bl	8007e40 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2203      	movs	r2, #3
 80067e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	7919      	ldrb	r1, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80067fe:	b292      	uxth	r2, r2
 8006800:	9202      	str	r2, [sp, #8]
 8006802:	2200      	movs	r2, #0
 8006804:	9201      	str	r2, [sp, #4]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	4603      	mov	r3, r0
 800680a:	2280      	movs	r2, #128	; 0x80
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 ffd1 	bl	80077b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	7959      	ldrb	r1, [r3, #5]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006826:	b292      	uxth	r2, r2
 8006828:	9202      	str	r2, [sp, #8]
 800682a:	2200      	movs	r2, #0
 800682c:	9201      	str	r2, [sp, #4]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	4603      	mov	r3, r0
 8006832:	2200      	movs	r2, #0
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 ffbd 	bl	80077b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800683a:	e0e3      	b.n	8006a04 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	2b03      	cmp	r3, #3
 8006840:	f040 80e0 	bne.w	8006a04 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	220d      	movs	r2, #13
 8006848:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	705a      	strb	r2, [r3, #1]
      break;
 8006850:	e0d8      	b.n	8006a04 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006852:	2109      	movs	r1, #9
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f99d 	bl	8006b94 <USBH_Get_CfgDesc>
 800685a:	4603      	mov	r3, r0
 800685c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d103      	bne.n	800686c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2204      	movs	r2, #4
 8006868:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800686a:	e0cd      	b.n	8006a08 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	2b03      	cmp	r3, #3
 8006870:	f040 80ca 	bne.w	8006a08 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800687a:	3301      	adds	r3, #1
 800687c:	b2da      	uxtb	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800688a:	2b03      	cmp	r3, #3
 800688c:	d903      	bls.n	8006896 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	220d      	movs	r2, #13
 8006892:	701a      	strb	r2, [r3, #0]
      break;
 8006894:	e0b8      	b.n	8006a08 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	795b      	ldrb	r3, [r3, #5]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 ffd9 	bl	8007854 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	791b      	ldrb	r3, [r3, #4]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 ffd3 	bl	8007854 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	701a      	strb	r2, [r3, #0]
      break;
 80068ba:	e0a5      	b.n	8006a08 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f965 	bl	8006b94 <USBH_Get_CfgDesc>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d103      	bne.n	80068dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2205      	movs	r2, #5
 80068d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80068da:	e097      	b.n	8006a0c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	2b03      	cmp	r3, #3
 80068e0:	f040 8094 	bne.w	8006a0c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068ea:	3301      	adds	r3, #1
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d903      	bls.n	8006906 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	220d      	movs	r2, #13
 8006902:	701a      	strb	r2, [r3, #0]
      break;
 8006904:	e082      	b.n	8006a0c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	795b      	ldrb	r3, [r3, #5]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 ffa1 	bl	8007854 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	791b      	ldrb	r3, [r3, #4]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 ff9b 	bl	8007854 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
      break;
 800692a:	e06f      	b.n	8006a0c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006932:	2b00      	cmp	r3, #0
 8006934:	d019      	beq.n	800696a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006942:	23ff      	movs	r3, #255	; 0xff
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f949 	bl	8006bdc <USBH_Get_StringDesc>
 800694a:	4603      	mov	r3, r0
 800694c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d103      	bne.n	800695c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2206      	movs	r2, #6
 8006958:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800695a:	e059      	b.n	8006a10 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d156      	bne.n	8006a10 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2206      	movs	r2, #6
 8006966:	705a      	strb	r2, [r3, #1]
      break;
 8006968:	e052      	b.n	8006a10 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2206      	movs	r2, #6
 800696e:	705a      	strb	r2, [r3, #1]
      break;
 8006970:	e04e      	b.n	8006a10 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006978:	2b00      	cmp	r3, #0
 800697a:	d019      	beq.n	80069b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006988:	23ff      	movs	r3, #255	; 0xff
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f926 	bl	8006bdc <USBH_Get_StringDesc>
 8006990:	4603      	mov	r3, r0
 8006992:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2207      	movs	r2, #7
 800699e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80069a0:	e038      	b.n	8006a14 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d135      	bne.n	8006a14 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2207      	movs	r2, #7
 80069ac:	705a      	strb	r2, [r3, #1]
      break;
 80069ae:	e031      	b.n	8006a14 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2207      	movs	r2, #7
 80069b4:	705a      	strb	r2, [r3, #1]
      break;
 80069b6:	e02d      	b.n	8006a14 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d017      	beq.n	80069f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80069ce:	23ff      	movs	r3, #255	; 0xff
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f903 	bl	8006bdc <USBH_Get_StringDesc>
 80069d6:	4603      	mov	r3, r0
 80069d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80069e4:	e018      	b.n	8006a18 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d115      	bne.n	8006a18 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]
      break;
 80069f0:	e012      	b.n	8006a18 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]
      break;
 80069f6:	e00f      	b.n	8006a18 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80069f8:	bf00      	nop
 80069fa:	e00e      	b.n	8006a1a <USBH_HandleEnum+0x3be>
      break;
 80069fc:	bf00      	nop
 80069fe:	e00c      	b.n	8006a1a <USBH_HandleEnum+0x3be>
      break;
 8006a00:	bf00      	nop
 8006a02:	e00a      	b.n	8006a1a <USBH_HandleEnum+0x3be>
      break;
 8006a04:	bf00      	nop
 8006a06:	e008      	b.n	8006a1a <USBH_HandleEnum+0x3be>
      break;
 8006a08:	bf00      	nop
 8006a0a:	e006      	b.n	8006a1a <USBH_HandleEnum+0x3be>
      break;
 8006a0c:	bf00      	nop
 8006a0e:	e004      	b.n	8006a1a <USBH_HandleEnum+0x3be>
      break;
 8006a10:	bf00      	nop
 8006a12:	e002      	b.n	8006a1a <USBH_HandleEnum+0x3be>
      break;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <USBH_HandleEnum+0x3be>
      break;
 8006a18:	bf00      	nop
  }
  return Status;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f804 	bl	8006a66 <USBH_HandleSof>
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b0b      	cmp	r3, #11
 8006a76:	d10a      	bne.n	8006a8e <USBH_HandleSof+0x28>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
  }
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006aa6:	bf00      	nop
}
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006ac2:	bf00      	nop
}
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f846 	bl	8007bae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	791b      	ldrb	r3, [r3, #4]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fe93 	bl	8007854 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	795b      	ldrb	r3, [r3, #5]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fe8d 	bl	8007854 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b62:	2100      	movs	r1, #0
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f864 	bl	8006c32 <USBH_GetDescriptor>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	b292      	uxth	r2, r2
 8006b84:	4619      	mov	r1, r3
 8006b86:	f000 f919 	bl	8006dbc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	331c      	adds	r3, #28
 8006ba4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006ba6:	887b      	ldrh	r3, [r7, #2]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f83d 	bl	8006c32 <USBH_GetDescriptor>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d107      	bne.n	8006bd2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006bc2:	887b      	ldrh	r3, [r7, #2]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f989 	bl	8006ee0 <USBH_ParseCfgDesc>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	461a      	mov	r2, r3
 8006be8:	460b      	mov	r3, r1
 8006bea:	72fb      	strb	r3, [r7, #11]
 8006bec:	4613      	mov	r3, r2
 8006bee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bf8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	460b      	mov	r3, r1
 8006c06:	2100      	movs	r1, #0
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f812 	bl	8006c32 <USBH_GetDescriptor>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c1e:	893a      	ldrh	r2, [r7, #8]
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fb26 	bl	8007274 <USBH_ParseStringDesc>
  }

  return status;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	72fb      	strb	r3, [r7, #11]
 8006c40:	4613      	mov	r3, r2
 8006c42:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	789b      	ldrb	r3, [r3, #2]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d11c      	bne.n	8006c86 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006c4c:	7afb      	ldrb	r3, [r7, #11]
 8006c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2206      	movs	r2, #6
 8006c5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	893a      	ldrh	r2, [r7, #8]
 8006c62:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006c64:	893b      	ldrh	r3, [r7, #8]
 8006c66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6e:	d104      	bne.n	8006c7a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f240 4209 	movw	r2, #1033	; 0x409
 8006c76:	829a      	strh	r2, [r3, #20]
 8006c78:	e002      	b.n	8006c80 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8b3a      	ldrh	r2, [r7, #24]
 8006c84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006c86:	8b3b      	ldrh	r3, [r7, #24]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 fb3f 	bl	8007310 <USBH_CtlReq>
 8006c92:	4603      	mov	r3, r0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	789b      	ldrb	r3, [r3, #2]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10f      	bne.n	8006cd0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2205      	movs	r2, #5
 8006cba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fb1b 	bl	8007310 <USBH_CtlReq>
 8006cda:	4603      	mov	r3, r0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	789b      	ldrb	r3, [r3, #2]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d10e      	bne.n	8006d16 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2209      	movs	r2, #9
 8006d02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	887a      	ldrh	r2, [r7, #2]
 8006d08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006d16:	2200      	movs	r2, #0
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 faf8 	bl	8007310 <USBH_CtlReq>
 8006d20:	4603      	mov	r3, r0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	789b      	ldrb	r3, [r3, #2]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10f      	bne.n	8006d5e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2203      	movs	r2, #3
 8006d48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fad4 	bl	8007310 <USBH_CtlReq>
 8006d68:	4603      	mov	r3, r0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	789b      	ldrb	r3, [r3, #2]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d10f      	bne.n	8006da6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006da6:	2200      	movs	r2, #0
 8006da8:	2100      	movs	r1, #0
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fab0 	bl	8007310 <USBH_CtlReq>
 8006db0:	4603      	mov	r3, r0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	785a      	ldrb	r2, [r3, #1]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	3302      	adds	r3, #2
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	3303      	adds	r3, #3
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	791a      	ldrb	r2, [r3, #4]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	795a      	ldrb	r2, [r3, #5]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	799a      	ldrb	r2, [r3, #6]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	79da      	ldrb	r2, [r3, #7]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	79db      	ldrb	r3, [r3, #7]
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	dc0f      	bgt.n	8006e3e <USBH_ParseDevDesc+0x82>
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	db14      	blt.n	8006e4c <USBH_ParseDevDesc+0x90>
 8006e22:	3b08      	subs	r3, #8
 8006e24:	4a2d      	ldr	r2, [pc, #180]	; (8006edc <USBH_ParseDevDesc+0x120>)
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bf14      	ite	ne
 8006e32:	2301      	movne	r3, #1
 8006e34:	2300      	moveq	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <USBH_ParseDevDesc+0x86>
 8006e3c:	e006      	b.n	8006e4c <USBH_ParseDevDesc+0x90>
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d104      	bne.n	8006e4c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	79da      	ldrb	r2, [r3, #7]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	71da      	strb	r2, [r3, #7]
      break;
 8006e4a:	e003      	b.n	8006e54 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2240      	movs	r2, #64	; 0x40
 8006e50:	71da      	strb	r2, [r3, #7]
      break;
 8006e52:	bf00      	nop
  }

  if (length > 8U)
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d939      	bls.n	8006ece <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	3309      	adds	r3, #9
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	330a      	adds	r3, #10
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	330b      	adds	r3, #11
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	330c      	adds	r3, #12
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	330d      	adds	r3, #13
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	7b9a      	ldrb	r2, [r3, #14]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	7bda      	ldrb	r2, [r3, #15]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	7c1a      	ldrb	r2, [r3, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	7c5a      	ldrb	r2, [r3, #17]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	745a      	strb	r2, [r3, #17]
  }
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	01000101 	.word	0x01000101

08006ee0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	; 0x30
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	4613      	mov	r3, r2
 8006eec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ef4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	781a      	ldrb	r2, [r3, #0]
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	785a      	ldrb	r2, [r3, #1]
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	3302      	adds	r3, #2
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	3303      	adds	r3, #3
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4313      	orrs	r3, r2
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3c:	bf28      	it	cs
 8006f3e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	791a      	ldrb	r2, [r3, #4]
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	795a      	ldrb	r2, [r3, #5]
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	799a      	ldrb	r2, [r3, #6]
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	79da      	ldrb	r2, [r3, #7]
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	7a1a      	ldrb	r2, [r3, #8]
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	d002      	beq.n	8006f7e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	2209      	movs	r2, #9
 8006f7c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006f7e:	88fb      	ldrh	r3, [r7, #6]
 8006f80:	2b09      	cmp	r3, #9
 8006f82:	f240 809d 	bls.w	80070c0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006f86:	2309      	movs	r3, #9
 8006f88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f8e:	e081      	b.n	8007094 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f90:	f107 0316 	add.w	r3, r7, #22
 8006f94:	4619      	mov	r1, r3
 8006f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f98:	f000 f99f 	bl	80072da <USBH_GetNextDesc>
 8006f9c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d176      	bne.n	8007094 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b09      	cmp	r3, #9
 8006fac:	d002      	beq.n	8006fb4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	2209      	movs	r2, #9
 8006fb2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb8:	221a      	movs	r2, #26
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	6a3a      	ldr	r2, [r7, #32]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fca:	69f8      	ldr	r0, [r7, #28]
 8006fcc:	f000 f87e 	bl	80070cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006fda:	e043      	b.n	8007064 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006fdc:	f107 0316 	add.w	r3, r7, #22
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe4:	f000 f979 	bl	80072da <USBH_GetNextDesc>
 8006fe8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d138      	bne.n	8007064 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	795b      	ldrb	r3, [r3, #5]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d10f      	bne.n	800701a <USBH_ParseCfgDesc+0x13a>
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	799b      	ldrb	r3, [r3, #6]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d10b      	bne.n	800701a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	79db      	ldrb	r3, [r3, #7]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10f      	bne.n	800702a <USBH_ParseCfgDesc+0x14a>
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b09      	cmp	r3, #9
 8007010:	d00b      	beq.n	800702a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	2209      	movs	r2, #9
 8007016:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007018:	e007      	b.n	800702a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b07      	cmp	r3, #7
 8007020:	d004      	beq.n	800702c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	2207      	movs	r2, #7
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	e000      	b.n	800702c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800702a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800702c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007030:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007034:	3201      	adds	r2, #1
 8007036:	00d2      	lsls	r2, r2, #3
 8007038:	211a      	movs	r1, #26
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	4413      	add	r3, r2
 8007040:	3308      	adds	r3, #8
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	4413      	add	r3, r2
 8007046:	3304      	adds	r3, #4
 8007048:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800704a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800704c:	69b9      	ldr	r1, [r7, #24]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f86b 	bl	800712a <USBH_ParseEPDesc>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800705a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800705e:	3301      	adds	r3, #1
 8007060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	791b      	ldrb	r3, [r3, #4]
 8007068:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800706c:	429a      	cmp	r2, r3
 800706e:	d204      	bcs.n	800707a <USBH_ParseCfgDesc+0x19a>
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	885a      	ldrh	r2, [r3, #2]
 8007074:	8afb      	ldrh	r3, [r7, #22]
 8007076:	429a      	cmp	r2, r3
 8007078:	d8b0      	bhi.n	8006fdc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007082:	429a      	cmp	r2, r3
 8007084:	d201      	bcs.n	800708a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007086:	2303      	movs	r3, #3
 8007088:	e01c      	b.n	80070c4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800708a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800708e:	3301      	adds	r3, #1
 8007090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007098:	2b01      	cmp	r3, #1
 800709a:	d805      	bhi.n	80070a8 <USBH_ParseCfgDesc+0x1c8>
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	885a      	ldrh	r2, [r3, #2]
 80070a0:	8afb      	ldrh	r3, [r7, #22]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	f63f af74 	bhi.w	8006f90 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	791b      	ldrb	r3, [r3, #4]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	bf28      	it	cs
 80070b0:	2302      	movcs	r3, #2
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d201      	bcs.n	80070c0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80070bc:	2303      	movs	r3, #3
 80070be:	e001      	b.n	80070c4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80070c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3730      	adds	r7, #48	; 0x30
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	785a      	ldrb	r2, [r3, #1]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	789a      	ldrb	r2, [r3, #2]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	78da      	ldrb	r2, [r3, #3]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	791a      	ldrb	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	795a      	ldrb	r2, [r3, #5]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	799a      	ldrb	r2, [r3, #6]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	79da      	ldrb	r2, [r3, #7]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	7a1a      	ldrb	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	721a      	strb	r2, [r3, #8]
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	785a      	ldrb	r2, [r3, #1]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	789a      	ldrb	r2, [r3, #2]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	78da      	ldrb	r2, [r3, #3]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b29a      	uxth	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3305      	adds	r3, #5
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	b29b      	uxth	r3, r3
 800716e:	4313      	orrs	r3, r2
 8007170:	b29a      	uxth	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	799a      	ldrb	r2, [r3, #6]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	889b      	ldrh	r3, [r3, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007186:	2303      	movs	r3, #3
 8007188:	75fb      	strb	r3, [r7, #23]
 800718a:	e033      	b.n	80071f4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	889b      	ldrh	r3, [r3, #4]
 8007190:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	b29a      	uxth	r2, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	889b      	ldrh	r3, [r3, #4]
 80071a2:	b21a      	sxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3304      	adds	r3, #4
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	b299      	uxth	r1, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3305      	adds	r3, #5
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	430b      	orrs	r3, r1
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d110      	bne.n	80071e6 <USBH_ParseEPDesc+0xbc>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b299      	uxth	r1, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3305      	adds	r3, #5
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	430b      	orrs	r3, r1
 80071da:	b29b      	uxth	r3, r3
 80071dc:	b21b      	sxth	r3, r3
 80071de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071e2:	b21b      	sxth	r3, r3
 80071e4:	e001      	b.n	80071ea <USBH_ParseEPDesc+0xc0>
 80071e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ea:	4313      	orrs	r3, r2
 80071ec:	b21b      	sxth	r3, r3
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d116      	bne.n	800722c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	78db      	ldrb	r3, [r3, #3]
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d005      	beq.n	8007216 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	78db      	ldrb	r3, [r3, #3]
 800720e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007212:	2b03      	cmp	r3, #3
 8007214:	d127      	bne.n	8007266 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	799b      	ldrb	r3, [r3, #6]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <USBH_ParseEPDesc+0xfc>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	799b      	ldrb	r3, [r3, #6]
 8007222:	2b10      	cmp	r3, #16
 8007224:	d91f      	bls.n	8007266 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007226:	2303      	movs	r3, #3
 8007228:	75fb      	strb	r3, [r7, #23]
 800722a:	e01c      	b.n	8007266 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	78db      	ldrb	r3, [r3, #3]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b01      	cmp	r3, #1
 8007236:	d10a      	bne.n	800724e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	799b      	ldrb	r3, [r3, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <USBH_ParseEPDesc+0x11e>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	799b      	ldrb	r3, [r3, #6]
 8007244:	2b10      	cmp	r3, #16
 8007246:	d90e      	bls.n	8007266 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007248:	2303      	movs	r3, #3
 800724a:	75fb      	strb	r3, [r7, #23]
 800724c:	e00b      	b.n	8007266 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	78db      	ldrb	r3, [r3, #3]
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	2b03      	cmp	r3, #3
 8007258:	d105      	bne.n	8007266 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	799b      	ldrb	r3, [r3, #6]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007262:	2303      	movs	r3, #3
 8007264:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
}
 8007268:	4618      	mov	r0, r3
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b03      	cmp	r3, #3
 800728a:	d120      	bne.n	80072ce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	1e9a      	subs	r2, r3, #2
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	4293      	cmp	r3, r2
 8007296:	bf28      	it	cs
 8007298:	4613      	movcs	r3, r2
 800729a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3302      	adds	r3, #2
 80072a0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80072a2:	2300      	movs	r3, #0
 80072a4:	82fb      	strh	r3, [r7, #22]
 80072a6:	e00b      	b.n	80072c0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80072a8:	8afb      	ldrh	r3, [r7, #22]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	781a      	ldrb	r2, [r3, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80072ba:	8afb      	ldrh	r3, [r7, #22]
 80072bc:	3302      	adds	r3, #2
 80072be:	82fb      	strh	r3, [r7, #22]
 80072c0:	8afa      	ldrh	r2, [r7, #22]
 80072c2:	8abb      	ldrh	r3, [r7, #20]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d3ef      	bcc.n	80072a8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]
  }
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	881a      	ldrh	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800731e:	2301      	movs	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	789b      	ldrb	r3, [r3, #2]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d002      	beq.n	8007330 <USBH_CtlReq+0x20>
 800732a:	2b02      	cmp	r3, #2
 800732c:	d00f      	beq.n	800734e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800732e:	e027      	b.n	8007380 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	88fa      	ldrh	r2, [r7, #6]
 800733a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2202      	movs	r2, #2
 8007346:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007348:	2301      	movs	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
      break;
 800734c:	e018      	b.n	8007380 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f81c 	bl	800738c <USBH_HandleControl>
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <USBH_CtlReq+0x54>
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	2b03      	cmp	r3, #3
 8007362:	d106      	bne.n	8007372 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	761a      	strb	r2, [r3, #24]
      break;
 8007370:	e005      	b.n	800737e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d102      	bne.n	800737e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	709a      	strb	r2, [r3, #2]
      break;
 800737e:	bf00      	nop
  }
  return status;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af02      	add	r7, sp, #8
 8007392:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007398:	2300      	movs	r3, #0
 800739a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	7e1b      	ldrb	r3, [r3, #24]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	2b0a      	cmp	r3, #10
 80073a4:	f200 8156 	bhi.w	8007654 <USBH_HandleControl+0x2c8>
 80073a8:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <USBH_HandleControl+0x24>)
 80073aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ae:	bf00      	nop
 80073b0:	080073dd 	.word	0x080073dd
 80073b4:	080073f7 	.word	0x080073f7
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007487 	.word	0x08007487
 80073c0:	080074bf 	.word	0x080074bf
 80073c4:	080074e9 	.word	0x080074e9
 80073c8:	0800753b 	.word	0x0800753b
 80073cc:	0800755d 	.word	0x0800755d
 80073d0:	08007599 	.word	0x08007599
 80073d4:	080075bf 	.word	0x080075bf
 80073d8:	080075fd 	.word	0x080075fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f103 0110 	add.w	r1, r3, #16
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	795b      	ldrb	r3, [r3, #5]
 80073e6:	461a      	mov	r2, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f943 	bl	8007674 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2202      	movs	r2, #2
 80073f2:	761a      	strb	r2, [r3, #24]
      break;
 80073f4:	e139      	b.n	800766a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	795b      	ldrb	r3, [r3, #5]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fcc5 	bl	8007d8c <USBH_LL_GetURBState>
 8007402:	4603      	mov	r3, r0
 8007404:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d11e      	bne.n	800744a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7c1b      	ldrb	r3, [r3, #16]
 8007410:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007414:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8adb      	ldrh	r3, [r3, #22]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800741e:	7b7b      	ldrb	r3, [r7, #13]
 8007420:	2b80      	cmp	r3, #128	; 0x80
 8007422:	d103      	bne.n	800742c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2203      	movs	r2, #3
 8007428:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800742a:	e115      	b.n	8007658 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2205      	movs	r2, #5
 8007430:	761a      	strb	r2, [r3, #24]
      break;
 8007432:	e111      	b.n	8007658 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007434:	7b7b      	ldrb	r3, [r7, #13]
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d103      	bne.n	8007442 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2209      	movs	r2, #9
 800743e:	761a      	strb	r2, [r3, #24]
      break;
 8007440:	e10a      	b.n	8007658 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2207      	movs	r2, #7
 8007446:	761a      	strb	r2, [r3, #24]
      break;
 8007448:	e106      	b.n	8007658 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	2b04      	cmp	r3, #4
 800744e:	d003      	beq.n	8007458 <USBH_HandleControl+0xcc>
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b02      	cmp	r3, #2
 8007454:	f040 8100 	bne.w	8007658 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	220b      	movs	r2, #11
 800745c:	761a      	strb	r2, [r3, #24]
      break;
 800745e:	e0fb      	b.n	8007658 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6899      	ldr	r1, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	899a      	ldrh	r2, [r3, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	791b      	ldrb	r3, [r3, #4]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f93a 	bl	80076f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2204      	movs	r2, #4
 8007482:	761a      	strb	r2, [r3, #24]
      break;
 8007484:	e0f1      	b.n	800766a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	791b      	ldrb	r3, [r3, #4]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc7d 	bl	8007d8c <USBH_LL_GetURBState>
 8007492:	4603      	mov	r3, r0
 8007494:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d102      	bne.n	80074a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2209      	movs	r2, #9
 80074a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b05      	cmp	r3, #5
 80074a6:	d102      	bne.n	80074ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80074a8:	2303      	movs	r3, #3
 80074aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80074ac:	e0d6      	b.n	800765c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	f040 80d3 	bne.w	800765c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	220b      	movs	r2, #11
 80074ba:	761a      	strb	r2, [r3, #24]
      break;
 80074bc:	e0ce      	b.n	800765c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6899      	ldr	r1, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	899a      	ldrh	r2, [r3, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	795b      	ldrb	r3, [r3, #5]
 80074ca:	2001      	movs	r0, #1
 80074cc:	9000      	str	r0, [sp, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8ea 	bl	80076a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074da:	b29a      	uxth	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2206      	movs	r2, #6
 80074e4:	761a      	strb	r2, [r3, #24]
      break;
 80074e6:	e0c0      	b.n	800766a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	795b      	ldrb	r3, [r3, #5]
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fc4c 	bl	8007d8c <USBH_LL_GetURBState>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d103      	bne.n	8007506 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2207      	movs	r2, #7
 8007502:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007504:	e0ac      	b.n	8007660 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	2b05      	cmp	r3, #5
 800750a:	d105      	bne.n	8007518 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	220c      	movs	r2, #12
 8007510:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007512:	2303      	movs	r3, #3
 8007514:	73fb      	strb	r3, [r7, #15]
      break;
 8007516:	e0a3      	b.n	8007660 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d103      	bne.n	8007526 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2205      	movs	r2, #5
 8007522:	761a      	strb	r2, [r3, #24]
      break;
 8007524:	e09c      	b.n	8007660 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b04      	cmp	r3, #4
 800752a:	f040 8099 	bne.w	8007660 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	220b      	movs	r2, #11
 8007532:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007534:	2302      	movs	r3, #2
 8007536:	73fb      	strb	r3, [r7, #15]
      break;
 8007538:	e092      	b.n	8007660 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	791b      	ldrb	r3, [r3, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8d5 	bl	80076f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800754e:	b29a      	uxth	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2208      	movs	r2, #8
 8007558:	761a      	strb	r2, [r3, #24]

      break;
 800755a:	e086      	b.n	800766a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	791b      	ldrb	r3, [r3, #4]
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fc12 	bl	8007d8c <USBH_LL_GetURBState>
 8007568:	4603      	mov	r3, r0
 800756a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d105      	bne.n	800757e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	220d      	movs	r2, #13
 8007576:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800757c:	e072      	b.n	8007664 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b04      	cmp	r3, #4
 8007582:	d103      	bne.n	800758c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	220b      	movs	r2, #11
 8007588:	761a      	strb	r2, [r3, #24]
      break;
 800758a:	e06b      	b.n	8007664 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b05      	cmp	r3, #5
 8007590:	d168      	bne.n	8007664 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007592:	2303      	movs	r3, #3
 8007594:	73fb      	strb	r3, [r7, #15]
      break;
 8007596:	e065      	b.n	8007664 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	795b      	ldrb	r3, [r3, #5]
 800759c:	2201      	movs	r2, #1
 800759e:	9200      	str	r2, [sp, #0]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2100      	movs	r1, #0
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f87f 	bl	80076a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	220a      	movs	r2, #10
 80075ba:	761a      	strb	r2, [r3, #24]
      break;
 80075bc:	e055      	b.n	800766a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	795b      	ldrb	r3, [r3, #5]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fbe1 	bl	8007d8c <USBH_LL_GetURBState>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d105      	bne.n	80075e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	220d      	movs	r2, #13
 80075dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80075de:	e043      	b.n	8007668 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d103      	bne.n	80075ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2209      	movs	r2, #9
 80075ea:	761a      	strb	r2, [r3, #24]
      break;
 80075ec:	e03c      	b.n	8007668 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d139      	bne.n	8007668 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	220b      	movs	r2, #11
 80075f8:	761a      	strb	r2, [r3, #24]
      break;
 80075fa:	e035      	b.n	8007668 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7e5b      	ldrb	r3, [r3, #25]
 8007600:	3301      	adds	r3, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	765a      	strb	r2, [r3, #25]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	7e5b      	ldrb	r3, [r3, #25]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d806      	bhi.n	800761e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800761c:	e025      	b.n	800766a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007624:	2106      	movs	r1, #6
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	795b      	ldrb	r3, [r3, #5]
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f90c 	bl	8007854 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	791b      	ldrb	r3, [r3, #4]
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f906 	bl	8007854 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800764e:	2302      	movs	r3, #2
 8007650:	73fb      	strb	r3, [r7, #15]
      break;
 8007652:	e00a      	b.n	800766a <USBH_HandleControl+0x2de>

    default:
      break;
 8007654:	bf00      	nop
 8007656:	e008      	b.n	800766a <USBH_HandleControl+0x2de>
      break;
 8007658:	bf00      	nop
 800765a:	e006      	b.n	800766a <USBH_HandleControl+0x2de>
      break;
 800765c:	bf00      	nop
 800765e:	e004      	b.n	800766a <USBH_HandleControl+0x2de>
      break;
 8007660:	bf00      	nop
 8007662:	e002      	b.n	800766a <USBH_HandleControl+0x2de>
      break;
 8007664:	bf00      	nop
 8007666:	e000      	b.n	800766a <USBH_HandleControl+0x2de>
      break;
 8007668:	bf00      	nop
  }

  return status;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af04      	add	r7, sp, #16
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	4613      	mov	r3, r2
 8007680:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007682:	79f9      	ldrb	r1, [r7, #7]
 8007684:	2300      	movs	r3, #0
 8007686:	9303      	str	r3, [sp, #12]
 8007688:	2308      	movs	r3, #8
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	2300      	movs	r3, #0
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	2200      	movs	r2, #0
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fb46 	bl	8007d2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af04      	add	r7, sp, #16
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	4611      	mov	r1, r2
 80076b4:	461a      	mov	r2, r3
 80076b6:	460b      	mov	r3, r1
 80076b8:	80fb      	strh	r3, [r7, #6]
 80076ba:	4613      	mov	r3, r2
 80076bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80076cc:	7979      	ldrb	r1, [r7, #5]
 80076ce:	7e3b      	ldrb	r3, [r7, #24]
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	9302      	str	r3, [sp, #8]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	2301      	movs	r3, #1
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	2300      	movs	r3, #0
 80076e0:	2200      	movs	r2, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fb21 	bl	8007d2a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b088      	sub	sp, #32
 80076f6:	af04      	add	r7, sp, #16
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	4611      	mov	r1, r2
 80076fe:	461a      	mov	r2, r3
 8007700:	460b      	mov	r3, r1
 8007702:	80fb      	strh	r3, [r7, #6]
 8007704:	4613      	mov	r3, r2
 8007706:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007708:	7979      	ldrb	r1, [r7, #5]
 800770a:	2300      	movs	r3, #0
 800770c:	9303      	str	r3, [sp, #12]
 800770e:	88fb      	ldrh	r3, [r7, #6]
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	2301      	movs	r3, #1
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	2201      	movs	r2, #1
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fb03 	bl	8007d2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007724:	2300      	movs	r3, #0

}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b088      	sub	sp, #32
 8007732:	af04      	add	r7, sp, #16
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	4611      	mov	r1, r2
 800773a:	461a      	mov	r2, r3
 800773c:	460b      	mov	r3, r1
 800773e:	80fb      	strh	r3, [r7, #6]
 8007740:	4613      	mov	r3, r2
 8007742:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007752:	7979      	ldrb	r1, [r7, #5]
 8007754:	7e3b      	ldrb	r3, [r7, #24]
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	9302      	str	r3, [sp, #8]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	2301      	movs	r3, #1
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	2302      	movs	r3, #2
 8007766:	2200      	movs	r2, #0
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fade 	bl	8007d2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af04      	add	r7, sp, #16
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4611      	mov	r1, r2
 8007784:	461a      	mov	r2, r3
 8007786:	460b      	mov	r3, r1
 8007788:	80fb      	strh	r3, [r7, #6]
 800778a:	4613      	mov	r3, r2
 800778c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800778e:	7979      	ldrb	r1, [r7, #5]
 8007790:	2300      	movs	r3, #0
 8007792:	9303      	str	r3, [sp, #12]
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	9302      	str	r3, [sp, #8]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	2301      	movs	r3, #1
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	2302      	movs	r3, #2
 80077a2:	2201      	movs	r2, #1
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fac0 	bl	8007d2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af04      	add	r7, sp, #16
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	461a      	mov	r2, r3
 80077c2:	4603      	mov	r3, r0
 80077c4:	70fb      	strb	r3, [r7, #3]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70bb      	strb	r3, [r7, #2]
 80077ca:	4613      	mov	r3, r2
 80077cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80077ce:	7878      	ldrb	r0, [r7, #1]
 80077d0:	78ba      	ldrb	r2, [r7, #2]
 80077d2:	78f9      	ldrb	r1, [r7, #3]
 80077d4:	8b3b      	ldrh	r3, [r7, #24]
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	7d3b      	ldrb	r3, [r7, #20]
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	7c3b      	ldrb	r3, [r7, #16]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4603      	mov	r3, r0
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa53 	bl	8007c8e <USBH_LL_OpenPipe>

  return USBH_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa72 	bl	8007cec <USBH_LL_ClosePipe>

  return USBH_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f836 	bl	8007890 <USBH_GetFreePipe>
 8007824:	4603      	mov	r3, r0
 8007826:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007828:	89fb      	ldrh	r3, [r7, #14]
 800782a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800782e:	4293      	cmp	r3, r2
 8007830:	d00a      	beq.n	8007848 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	89fb      	ldrh	r3, [r7, #14]
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	33e0      	adds	r3, #224	; 0xe0
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007848:	89fb      	ldrh	r3, [r7, #14]
 800784a:	b2db      	uxtb	r3, r3
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	2b0f      	cmp	r3, #15
 8007864:	d80d      	bhi.n	8007882 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	33e0      	adds	r3, #224	; 0xe0
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	33e0      	adds	r3, #224	; 0xe0
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
 80078a0:	e00f      	b.n	80078c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	33e0      	adds	r3, #224	; 0xe0
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	e007      	b.n	80078cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	3301      	adds	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	2b0f      	cmp	r3, #15
 80078c6:	d9ec      	bls.n	80078a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80078c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80078dc:	2201      	movs	r2, #1
 80078de:	490e      	ldr	r1, [pc, #56]	; (8007918 <MX_USB_HOST_Init+0x40>)
 80078e0:	480e      	ldr	r0, [pc, #56]	; (800791c <MX_USB_HOST_Init+0x44>)
 80078e2:	f7fe fba5 	bl	8006030 <USBH_Init>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80078ec:	f7f9 f8a4 	bl	8000a38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80078f0:	490b      	ldr	r1, [pc, #44]	; (8007920 <MX_USB_HOST_Init+0x48>)
 80078f2:	480a      	ldr	r0, [pc, #40]	; (800791c <MX_USB_HOST_Init+0x44>)
 80078f4:	f7fe fc2a 	bl	800614c <USBH_RegisterClass>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80078fe:	f7f9 f89b 	bl	8000a38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007902:	4806      	ldr	r0, [pc, #24]	; (800791c <MX_USB_HOST_Init+0x44>)
 8007904:	f7fe fcae 	bl	8006264 <USBH_Start>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800790e:	f7f9 f893 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007912:	bf00      	nop
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	08007939 	.word	0x08007939
 800791c:	200001bc 	.word	0x200001bc
 8007920:	2000000c 	.word	0x2000000c

08007924 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007928:	4802      	ldr	r0, [pc, #8]	; (8007934 <MX_USB_HOST_Process+0x10>)
 800792a:	f7fe fcab 	bl	8006284 <USBH_Process>
}
 800792e:	bf00      	nop
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200001bc 	.word	0x200001bc

08007938 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	3b01      	subs	r3, #1
 8007948:	2b04      	cmp	r3, #4
 800794a:	d819      	bhi.n	8007980 <USBH_UserProcess+0x48>
 800794c:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <USBH_UserProcess+0x1c>)
 800794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007952:	bf00      	nop
 8007954:	08007981 	.word	0x08007981
 8007958:	08007971 	.word	0x08007971
 800795c:	08007981 	.word	0x08007981
 8007960:	08007979 	.word	0x08007979
 8007964:	08007969 	.word	0x08007969
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007968:	4b09      	ldr	r3, [pc, #36]	; (8007990 <USBH_UserProcess+0x58>)
 800796a:	2203      	movs	r2, #3
 800796c:	701a      	strb	r2, [r3, #0]
  break;
 800796e:	e008      	b.n	8007982 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <USBH_UserProcess+0x58>)
 8007972:	2202      	movs	r2, #2
 8007974:	701a      	strb	r2, [r3, #0]
  break;
 8007976:	e004      	b.n	8007982 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <USBH_UserProcess+0x58>)
 800797a:	2201      	movs	r2, #1
 800797c:	701a      	strb	r2, [r3, #0]
  break;
 800797e:	e000      	b.n	8007982 <USBH_UserProcess+0x4a>

  default:
  break;
 8007980:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20000594 	.word	0x20000594

08007994 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	; 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800799c:	f107 0314 	add.w	r3, r7, #20
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	609a      	str	r2, [r3, #8]
 80079a8:	60da      	str	r2, [r3, #12]
 80079aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079b4:	d147      	bne.n	8007a46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	4b25      	ldr	r3, [pc, #148]	; (8007a50 <HAL_HCD_MspInit+0xbc>)
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	4a24      	ldr	r2, [pc, #144]	; (8007a50 <HAL_HCD_MspInit+0xbc>)
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	6313      	str	r3, [r2, #48]	; 0x30
 80079c6:	4b22      	ldr	r3, [pc, #136]	; (8007a50 <HAL_HCD_MspInit+0xbc>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80079d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079d8:	2300      	movs	r3, #0
 80079da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80079e0:	f107 0314 	add.w	r3, r7, #20
 80079e4:	4619      	mov	r1, r3
 80079e6:	481b      	ldr	r0, [pc, #108]	; (8007a54 <HAL_HCD_MspInit+0xc0>)
 80079e8:	f7f9 fdb0 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80079ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80079f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f2:	2302      	movs	r3, #2
 80079f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079fa:	2300      	movs	r3, #0
 80079fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079fe:	230a      	movs	r3, #10
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a02:	f107 0314 	add.w	r3, r7, #20
 8007a06:	4619      	mov	r1, r3
 8007a08:	4812      	ldr	r0, [pc, #72]	; (8007a54 <HAL_HCD_MspInit+0xc0>)
 8007a0a:	f7f9 fd9f 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <HAL_HCD_MspInit+0xbc>)
 8007a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a12:	4a0f      	ldr	r2, [pc, #60]	; (8007a50 <HAL_HCD_MspInit+0xbc>)
 8007a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a18:	6353      	str	r3, [r2, #52]	; 0x34
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <HAL_HCD_MspInit+0xbc>)
 8007a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a22:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <HAL_HCD_MspInit+0xbc>)
 8007a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a28:	6453      	str	r3, [r2, #68]	; 0x44
 8007a2a:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <HAL_HCD_MspInit+0xbc>)
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	2043      	movs	r0, #67	; 0x43
 8007a3c:	f7f9 fb51 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a40:	2043      	movs	r0, #67	; 0x43
 8007a42:	f7f9 fb6a 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a46:	bf00      	nop
 8007a48:	3728      	adds	r7, #40	; 0x28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	40023800 	.word	0x40023800
 8007a54:	40020000 	.word	0x40020000

08007a58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe ffeb 	bl	8006a42 <USBH_LL_IncTimer>
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff f823 	bl	8006ace <USBH_LL_Connect>
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff f82c 	bl	8006afc <USBH_LL_Disconnect>
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe ffdd 	bl	8006a96 <USBH_LL_PortEnabled>
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe ffdd 	bl	8006ab2 <USBH_LL_PortDisabled>
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d12a      	bne.n	8007b68 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007b12:	4a18      	ldr	r2, [pc, #96]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b22:	4b14      	ldr	r3, [pc, #80]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b28:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007b30:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b3e:	2202      	movs	r2, #2
 8007b40:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007b48:	480a      	ldr	r0, [pc, #40]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b4a:	f7f9 feb4 	bl	80018b6 <HAL_HCD_Init>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007b54:	f7f8 ff70 	bl	8000a38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007b58:	4806      	ldr	r0, [pc, #24]	; (8007b74 <USBH_LL_Init+0x74>)
 8007b5a:	f7fa fa98 	bl	800208e <HAL_HCD_GetCurrentFrame>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fe ff5e 	bl	8006a24 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000598 	.word	0x20000598

08007b78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fa fa07 	bl	8001fa2 <HAL_HCD_Start>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 f95c 	bl	8007e58 <USBH_Get_USB_Status>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fa fa0f 	bl	8001fe8 <HAL_HCD_Stop>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f941 	bl	8007e58 <USBH_Get_USB_Status>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007bec:	2301      	movs	r3, #1
 8007bee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fa fa57 	bl	80020aa <HAL_HCD_GetCurrentSpeed>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d00c      	beq.n	8007c1c <USBH_LL_GetSpeed+0x38>
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d80d      	bhi.n	8007c22 <USBH_LL_GetSpeed+0x3e>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <USBH_LL_GetSpeed+0x2c>
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d003      	beq.n	8007c16 <USBH_LL_GetSpeed+0x32>
 8007c0e:	e008      	b.n	8007c22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
    break;
 8007c14:	e008      	b.n	8007c28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1a:	e005      	b.n	8007c28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c20:	e002      	b.n	8007c28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007c22:	2301      	movs	r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
    break;
 8007c26:	bf00      	nop
  }
  return  speed;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fa f9ea 	bl	8002022 <HAL_HCD_ResetPort>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 f8ff 	bl	8007e58 <USBH_Get_USB_Status>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fa f9f1 	bl	8002066 <HAL_HCD_HC_GetXferCount>
 8007c84:	4603      	mov	r3, r0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c8e:	b590      	push	{r4, r7, lr}
 8007c90:	b089      	sub	sp, #36	; 0x24
 8007c92:	af04      	add	r7, sp, #16
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	4608      	mov	r0, r1
 8007c98:	4611      	mov	r1, r2
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	70fb      	strb	r3, [r7, #3]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70bb      	strb	r3, [r7, #2]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007cb6:	787c      	ldrb	r4, [r7, #1]
 8007cb8:	78ba      	ldrb	r2, [r7, #2]
 8007cba:	78f9      	ldrb	r1, [r7, #3]
 8007cbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cbe:	9302      	str	r3, [sp, #8]
 8007cc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4623      	mov	r3, r4
 8007cce:	f7f9 fe54 	bl	800197a <HAL_HCD_HC_Init>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f8bd 	bl	8007e58 <USBH_Get_USB_Status>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd90      	pop	{r4, r7, pc}

08007cec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7f9 fec4 	bl	8001a98 <HAL_HCD_HC_Halt>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f89e 	bl	8007e58 <USBH_Get_USB_Status>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007d2a:	b590      	push	{r4, r7, lr}
 8007d2c:	b089      	sub	sp, #36	; 0x24
 8007d2e:	af04      	add	r7, sp, #16
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	4608      	mov	r0, r1
 8007d34:	4611      	mov	r1, r2
 8007d36:	461a      	mov	r2, r3
 8007d38:	4603      	mov	r3, r0
 8007d3a:	70fb      	strb	r3, [r7, #3]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70bb      	strb	r3, [r7, #2]
 8007d40:	4613      	mov	r3, r2
 8007d42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d52:	787c      	ldrb	r4, [r7, #1]
 8007d54:	78ba      	ldrb	r2, [r7, #2]
 8007d56:	78f9      	ldrb	r1, [r7, #3]
 8007d58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d5c:	9303      	str	r3, [sp, #12]
 8007d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d60:	9302      	str	r3, [sp, #8]
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	f7f9 feb7 	bl	8001ae0 <HAL_HCD_HC_SubmitRequest>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 f86d 	bl	8007e58 <USBH_Get_USB_Status>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd90      	pop	{r4, r7, pc}

08007d8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	4611      	mov	r1, r2
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fa f94b 	bl	800203e <HAL_HCD_HC_GetURBState>
 8007da8:	4603      	mov	r3, r0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d103      	bne.n	8007dd0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007dc8:	78fb      	ldrb	r3, [r7, #3]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f870 	bl	8007eb0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007dd0:	20c8      	movs	r0, #200	; 0xc8
 8007dd2:	f7f9 f887 	bl	8000ee4 <HAL_Delay>
  return USBH_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
 8007dec:	4613      	mov	r3, r2
 8007dee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007df6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	212c      	movs	r1, #44	; 0x2c
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	4413      	add	r3, r2
 8007e04:	333b      	adds	r3, #59	; 0x3b
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007e0c:	78fb      	ldrb	r3, [r7, #3]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	212c      	movs	r1, #44	; 0x2c
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	4413      	add	r3, r2
 8007e18:	3354      	adds	r3, #84	; 0x54
 8007e1a:	78ba      	ldrb	r2, [r7, #2]
 8007e1c:	701a      	strb	r2, [r3, #0]
 8007e1e:	e008      	b.n	8007e32 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	212c      	movs	r1, #44	; 0x2c
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3355      	adds	r3, #85	; 0x55
 8007e2e:	78ba      	ldrb	r2, [r7, #2]
 8007e30:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7f9 f84b 	bl	8000ee4 <HAL_Delay>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d817      	bhi.n	8007e9c <USBH_Get_USB_Status+0x44>
 8007e6c:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <USBH_Get_USB_Status+0x1c>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007e85 	.word	0x08007e85
 8007e78:	08007e8b 	.word	0x08007e8b
 8007e7c:	08007e91 	.word	0x08007e91
 8007e80:	08007e97 	.word	0x08007e97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]
    break;
 8007e88:	e00b      	b.n	8007ea2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8e:	e008      	b.n	8007ea2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]
    break;
 8007e94:	e005      	b.n	8007ea2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007e96:	2302      	movs	r3, #2
 8007e98:	73fb      	strb	r3, [r7, #15]
    break;
 8007e9a:	e002      	b.n	8007ea2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea0:	bf00      	nop
  }
  return usb_status;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
 8007ec8:	e001      	b.n	8007ece <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	4803      	ldr	r0, [pc, #12]	; (8007ee4 <MX_DriverVbusFS+0x34>)
 8007ed6:	f7f9 fcd5 	bl	8001884 <HAL_GPIO_WritePin>
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40020800 	.word	0x40020800

08007ee8 <malloc>:
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <malloc+0xc>)
 8007eea:	4601      	mov	r1, r0
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	f000 b82b 	b.w	8007f48 <_malloc_r>
 8007ef2:	bf00      	nop
 8007ef4:	20000078 	.word	0x20000078

08007ef8 <free>:
 8007ef8:	4b02      	ldr	r3, [pc, #8]	; (8007f04 <free+0xc>)
 8007efa:	4601      	mov	r1, r0
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	f000 b8f3 	b.w	80080e8 <_free_r>
 8007f02:	bf00      	nop
 8007f04:	20000078 	.word	0x20000078

08007f08 <sbrk_aligned>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	4e0e      	ldr	r6, [pc, #56]	; (8007f44 <sbrk_aligned+0x3c>)
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	6831      	ldr	r1, [r6, #0]
 8007f10:	4605      	mov	r5, r0
 8007f12:	b911      	cbnz	r1, 8007f1a <sbrk_aligned+0x12>
 8007f14:	f000 f8ac 	bl	8008070 <_sbrk_r>
 8007f18:	6030      	str	r0, [r6, #0]
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 f8a7 	bl	8008070 <_sbrk_r>
 8007f22:	1c43      	adds	r3, r0, #1
 8007f24:	d00a      	beq.n	8007f3c <sbrk_aligned+0x34>
 8007f26:	1cc4      	adds	r4, r0, #3
 8007f28:	f024 0403 	bic.w	r4, r4, #3
 8007f2c:	42a0      	cmp	r0, r4
 8007f2e:	d007      	beq.n	8007f40 <sbrk_aligned+0x38>
 8007f30:	1a21      	subs	r1, r4, r0
 8007f32:	4628      	mov	r0, r5
 8007f34:	f000 f89c 	bl	8008070 <_sbrk_r>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d101      	bne.n	8007f40 <sbrk_aligned+0x38>
 8007f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8007f40:	4620      	mov	r0, r4
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	200008a0 	.word	0x200008a0

08007f48 <_malloc_r>:
 8007f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	1ccd      	adds	r5, r1, #3
 8007f4e:	f025 0503 	bic.w	r5, r5, #3
 8007f52:	3508      	adds	r5, #8
 8007f54:	2d0c      	cmp	r5, #12
 8007f56:	bf38      	it	cc
 8007f58:	250c      	movcc	r5, #12
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	db01      	blt.n	8007f64 <_malloc_r+0x1c>
 8007f60:	42a9      	cmp	r1, r5
 8007f62:	d905      	bls.n	8007f70 <_malloc_r+0x28>
 8007f64:	230c      	movs	r3, #12
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	2600      	movs	r6, #0
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008044 <_malloc_r+0xfc>
 8007f74:	f000 f868 	bl	8008048 <__malloc_lock>
 8007f78:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7c:	461c      	mov	r4, r3
 8007f7e:	bb5c      	cbnz	r4, 8007fd8 <_malloc_r+0x90>
 8007f80:	4629      	mov	r1, r5
 8007f82:	4638      	mov	r0, r7
 8007f84:	f7ff ffc0 	bl	8007f08 <sbrk_aligned>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	d155      	bne.n	800803a <_malloc_r+0xf2>
 8007f8e:	f8d8 4000 	ldr.w	r4, [r8]
 8007f92:	4626      	mov	r6, r4
 8007f94:	2e00      	cmp	r6, #0
 8007f96:	d145      	bne.n	8008024 <_malloc_r+0xdc>
 8007f98:	2c00      	cmp	r4, #0
 8007f9a:	d048      	beq.n	800802e <_malloc_r+0xe6>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	eb04 0903 	add.w	r9, r4, r3
 8007fa6:	f000 f863 	bl	8008070 <_sbrk_r>
 8007faa:	4581      	cmp	r9, r0
 8007fac:	d13f      	bne.n	800802e <_malloc_r+0xe6>
 8007fae:	6821      	ldr	r1, [r4, #0]
 8007fb0:	1a6d      	subs	r5, r5, r1
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f7ff ffa7 	bl	8007f08 <sbrk_aligned>
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d037      	beq.n	800802e <_malloc_r+0xe6>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	442b      	add	r3, r5
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d038      	beq.n	800803e <_malloc_r+0xf6>
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	42a2      	cmp	r2, r4
 8007fd0:	d12b      	bne.n	800802a <_malloc_r+0xe2>
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	605a      	str	r2, [r3, #4]
 8007fd6:	e00f      	b.n	8007ff8 <_malloc_r+0xb0>
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	1b52      	subs	r2, r2, r5
 8007fdc:	d41f      	bmi.n	800801e <_malloc_r+0xd6>
 8007fde:	2a0b      	cmp	r2, #11
 8007fe0:	d917      	bls.n	8008012 <_malloc_r+0xca>
 8007fe2:	1961      	adds	r1, r4, r5
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	6025      	str	r5, [r4, #0]
 8007fe8:	bf18      	it	ne
 8007fea:	6059      	strne	r1, [r3, #4]
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	bf08      	it	eq
 8007ff0:	f8c8 1000 	streq.w	r1, [r8]
 8007ff4:	5162      	str	r2, [r4, r5]
 8007ff6:	604b      	str	r3, [r1, #4]
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f104 060b 	add.w	r6, r4, #11
 8007ffe:	f000 f829 	bl	8008054 <__malloc_unlock>
 8008002:	f026 0607 	bic.w	r6, r6, #7
 8008006:	1d23      	adds	r3, r4, #4
 8008008:	1af2      	subs	r2, r6, r3
 800800a:	d0ae      	beq.n	8007f6a <_malloc_r+0x22>
 800800c:	1b9b      	subs	r3, r3, r6
 800800e:	50a3      	str	r3, [r4, r2]
 8008010:	e7ab      	b.n	8007f6a <_malloc_r+0x22>
 8008012:	42a3      	cmp	r3, r4
 8008014:	6862      	ldr	r2, [r4, #4]
 8008016:	d1dd      	bne.n	8007fd4 <_malloc_r+0x8c>
 8008018:	f8c8 2000 	str.w	r2, [r8]
 800801c:	e7ec      	b.n	8007ff8 <_malloc_r+0xb0>
 800801e:	4623      	mov	r3, r4
 8008020:	6864      	ldr	r4, [r4, #4]
 8008022:	e7ac      	b.n	8007f7e <_malloc_r+0x36>
 8008024:	4634      	mov	r4, r6
 8008026:	6876      	ldr	r6, [r6, #4]
 8008028:	e7b4      	b.n	8007f94 <_malloc_r+0x4c>
 800802a:	4613      	mov	r3, r2
 800802c:	e7cc      	b.n	8007fc8 <_malloc_r+0x80>
 800802e:	230c      	movs	r3, #12
 8008030:	603b      	str	r3, [r7, #0]
 8008032:	4638      	mov	r0, r7
 8008034:	f000 f80e 	bl	8008054 <__malloc_unlock>
 8008038:	e797      	b.n	8007f6a <_malloc_r+0x22>
 800803a:	6025      	str	r5, [r4, #0]
 800803c:	e7dc      	b.n	8007ff8 <_malloc_r+0xb0>
 800803e:	605b      	str	r3, [r3, #4]
 8008040:	deff      	udf	#255	; 0xff
 8008042:	bf00      	nop
 8008044:	2000089c 	.word	0x2000089c

08008048 <__malloc_lock>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__malloc_lock+0x8>)
 800804a:	f000 b84b 	b.w	80080e4 <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	200009e0 	.word	0x200009e0

08008054 <__malloc_unlock>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__malloc_unlock+0x8>)
 8008056:	f000 b846 	b.w	80080e6 <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	200009e0 	.word	0x200009e0

08008060 <memset>:
 8008060:	4402      	add	r2, r0
 8008062:	4603      	mov	r3, r0
 8008064:	4293      	cmp	r3, r2
 8008066:	d100      	bne.n	800806a <memset+0xa>
 8008068:	4770      	bx	lr
 800806a:	f803 1b01 	strb.w	r1, [r3], #1
 800806e:	e7f9      	b.n	8008064 <memset+0x4>

08008070 <_sbrk_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d06      	ldr	r5, [pc, #24]	; (800808c <_sbrk_r+0x1c>)
 8008074:	2300      	movs	r3, #0
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	602b      	str	r3, [r5, #0]
 800807c:	f7f8 fe4e 	bl	8000d1c <_sbrk>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_sbrk_r+0x1a>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_sbrk_r+0x1a>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	200009dc 	.word	0x200009dc

08008090 <__errno>:
 8008090:	4b01      	ldr	r3, [pc, #4]	; (8008098 <__errno+0x8>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000078 	.word	0x20000078

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4d0d      	ldr	r5, [pc, #52]	; (80080d4 <__libc_init_array+0x38>)
 80080a0:	4c0d      	ldr	r4, [pc, #52]	; (80080d8 <__libc_init_array+0x3c>)
 80080a2:	1b64      	subs	r4, r4, r5
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	2600      	movs	r6, #0
 80080a8:	42a6      	cmp	r6, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	4d0b      	ldr	r5, [pc, #44]	; (80080dc <__libc_init_array+0x40>)
 80080ae:	4c0c      	ldr	r4, [pc, #48]	; (80080e0 <__libc_init_array+0x44>)
 80080b0:	f000 f866 	bl	8008180 <_init>
 80080b4:	1b64      	subs	r4, r4, r5
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	2600      	movs	r6, #0
 80080ba:	42a6      	cmp	r6, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c4:	4798      	blx	r3
 80080c6:	3601      	adds	r6, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ce:	4798      	blx	r3
 80080d0:	3601      	adds	r6, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	080081bc 	.word	0x080081bc
 80080d8:	080081bc 	.word	0x080081bc
 80080dc:	080081bc 	.word	0x080081bc
 80080e0:	080081c0 	.word	0x080081c0

080080e4 <__retarget_lock_acquire_recursive>:
 80080e4:	4770      	bx	lr

080080e6 <__retarget_lock_release_recursive>:
 80080e6:	4770      	bx	lr

080080e8 <_free_r>:
 80080e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ea:	2900      	cmp	r1, #0
 80080ec:	d044      	beq.n	8008178 <_free_r+0x90>
 80080ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f2:	9001      	str	r0, [sp, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f1a1 0404 	sub.w	r4, r1, #4
 80080fa:	bfb8      	it	lt
 80080fc:	18e4      	addlt	r4, r4, r3
 80080fe:	f7ff ffa3 	bl	8008048 <__malloc_lock>
 8008102:	4a1e      	ldr	r2, [pc, #120]	; (800817c <_free_r+0x94>)
 8008104:	9801      	ldr	r0, [sp, #4]
 8008106:	6813      	ldr	r3, [r2, #0]
 8008108:	b933      	cbnz	r3, 8008118 <_free_r+0x30>
 800810a:	6063      	str	r3, [r4, #4]
 800810c:	6014      	str	r4, [r2, #0]
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008114:	f7ff bf9e 	b.w	8008054 <__malloc_unlock>
 8008118:	42a3      	cmp	r3, r4
 800811a:	d908      	bls.n	800812e <_free_r+0x46>
 800811c:	6825      	ldr	r5, [r4, #0]
 800811e:	1961      	adds	r1, r4, r5
 8008120:	428b      	cmp	r3, r1
 8008122:	bf01      	itttt	eq
 8008124:	6819      	ldreq	r1, [r3, #0]
 8008126:	685b      	ldreq	r3, [r3, #4]
 8008128:	1949      	addeq	r1, r1, r5
 800812a:	6021      	streq	r1, [r4, #0]
 800812c:	e7ed      	b.n	800810a <_free_r+0x22>
 800812e:	461a      	mov	r2, r3
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b10b      	cbz	r3, 8008138 <_free_r+0x50>
 8008134:	42a3      	cmp	r3, r4
 8008136:	d9fa      	bls.n	800812e <_free_r+0x46>
 8008138:	6811      	ldr	r1, [r2, #0]
 800813a:	1855      	adds	r5, r2, r1
 800813c:	42a5      	cmp	r5, r4
 800813e:	d10b      	bne.n	8008158 <_free_r+0x70>
 8008140:	6824      	ldr	r4, [r4, #0]
 8008142:	4421      	add	r1, r4
 8008144:	1854      	adds	r4, r2, r1
 8008146:	42a3      	cmp	r3, r4
 8008148:	6011      	str	r1, [r2, #0]
 800814a:	d1e0      	bne.n	800810e <_free_r+0x26>
 800814c:	681c      	ldr	r4, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	6053      	str	r3, [r2, #4]
 8008152:	440c      	add	r4, r1
 8008154:	6014      	str	r4, [r2, #0]
 8008156:	e7da      	b.n	800810e <_free_r+0x26>
 8008158:	d902      	bls.n	8008160 <_free_r+0x78>
 800815a:	230c      	movs	r3, #12
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	e7d6      	b.n	800810e <_free_r+0x26>
 8008160:	6825      	ldr	r5, [r4, #0]
 8008162:	1961      	adds	r1, r4, r5
 8008164:	428b      	cmp	r3, r1
 8008166:	bf04      	itt	eq
 8008168:	6819      	ldreq	r1, [r3, #0]
 800816a:	685b      	ldreq	r3, [r3, #4]
 800816c:	6063      	str	r3, [r4, #4]
 800816e:	bf04      	itt	eq
 8008170:	1949      	addeq	r1, r1, r5
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	6054      	str	r4, [r2, #4]
 8008176:	e7ca      	b.n	800810e <_free_r+0x26>
 8008178:	b003      	add	sp, #12
 800817a:	bd30      	pop	{r4, r5, pc}
 800817c:	2000089c 	.word	0x2000089c

08008180 <_init>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr

0800818c <_fini>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr
