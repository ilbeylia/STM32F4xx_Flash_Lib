
Flash_Lib_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008004  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a8  080081a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081b0  080081b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081b0  080081b0  000181b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080081b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000968  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009e4  200009e4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001551d  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e51  00000000  00000000  0003560c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001278  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e04  00000000  00000000  0003a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000243e2  00000000  00000000  0003b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019ba0  00000000  00000000  0005f8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb547  00000000  00000000  0007945e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f24  00000000  00000000  001449a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001498cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008174 	.word	0x08008174

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008174 	.word	0x08008174

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Flash_WR>:
 *      Author: ilbeyli
 */
#include "Flash_Process.h"


void Flash_WR(uint32_t Flash_Address, uint32_t Flash_WR_Data){
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80004ce:	f000 fe8d 	bl	80011ec <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);  // add sector usage
 80004d2:	2102      	movs	r1, #2
 80004d4:	200b      	movs	r0, #11
 80004d6:	f000 ffeb 	bl	80014b0 <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_WR_Data);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2200      	movs	r2, #0
 80004de:	461c      	mov	r4, r3
 80004e0:	4615      	mov	r5, r2
 80004e2:	4622      	mov	r2, r4
 80004e4:	462b      	mov	r3, r5
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	2002      	movs	r0, #2
 80004ea:	f000 fe2b 	bl	8001144 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80004ee:	f000 fe9f 	bl	8001230 <HAL_FLASH_Lock>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bdb0      	pop	{r4, r5, r7, pc}

080004fa <Flash_RD>:

uint32_t Flash_RD(uint32_t Flash_Address){
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
	return *((uint32_t*)Flash_Address);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
}
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc6c 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f88a 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f986 	bl	8000830 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000524:	f000 f8f0 	bl	8000708 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000528:	f000 f91c 	bl	8000764 <MX_I2S3_Init>
  MX_SPI1_Init();
 800052c:	f000 f94a 	bl	80007c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000530:	f007 f9cc 	bl	80078cc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
//  Flash_WR(0x080E0000, 0x00);
  read_data = Flash_RD(0x080E0000);
 8000534:	483b      	ldr	r0, [pc, #236]	; (8000624 <main+0x110>)
 8000536:	f7ff ffe0 	bl	80004fa <Flash_RD>
 800053a:	4603      	mov	r3, r0
 800053c:	4a3a      	ldr	r2, [pc, #232]	; (8000628 <main+0x114>)
 800053e:	6013      	str	r3, [r2, #0]
  if (read_data<=10){
 8000540:	4b39      	ldr	r3, [pc, #228]	; (8000628 <main+0x114>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b0a      	cmp	r3, #10
 8000546:	d80d      	bhi.n	8000564 <main+0x50>
	  read_data +=1;
 8000548:	4b37      	ldr	r3, [pc, #220]	; (8000628 <main+0x114>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a36      	ldr	r2, [pc, #216]	; (8000628 <main+0x114>)
 8000550:	6013      	str	r3, [r2, #0]
//	  Flash_Erase(0x0080E0000, 4);
	  test=1;
 8000552:	4b36      	ldr	r3, [pc, #216]	; (800062c <main+0x118>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
	  Flash_WR(0x080E0000, read_data);
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <main+0x114>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	4831      	ldr	r0, [pc, #196]	; (8000624 <main+0x110>)
 8000560:	f7ff ffb0 	bl	80004c4 <Flash_WR>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000564:	f007 f9d8 	bl	8007918 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if(read_data < 5){
 8000568:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <main+0x114>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d840      	bhi.n	80005f2 <main+0xde>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	482e      	ldr	r0, [pc, #184]	; (8000630 <main+0x11c>)
 8000578:	f001 f97e 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000582:	482b      	ldr	r0, [pc, #172]	; (8000630 <main+0x11c>)
 8000584:	f001 f978 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058e:	4828      	ldr	r0, [pc, #160]	; (8000630 <main+0x11c>)
 8000590:	f001 f972 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059a:	4825      	ldr	r0, [pc, #148]	; (8000630 <main+0x11c>)
 800059c:	f001 f96c 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_Delay(read_data*50);
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x114>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2232      	movs	r2, #50	; 0x32
 80005a6:	fb02 f303 	mul.w	r3, r2, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fc94 	bl	8000ed8 <HAL_Delay>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	481e      	ldr	r0, [pc, #120]	; (8000630 <main+0x11c>)
 80005b8:	f001 f95e 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	481b      	ldr	r0, [pc, #108]	; (8000630 <main+0x11c>)
 80005c4:	f001 f958 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ce:	4818      	ldr	r0, [pc, #96]	; (8000630 <main+0x11c>)
 80005d0:	f001 f952 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005da:	4815      	ldr	r0, [pc, #84]	; (8000630 <main+0x11c>)
 80005dc:	f001 f94c 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_Delay(read_data*50);
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <main+0x114>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2232      	movs	r2, #50	; 0x32
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fc74 	bl	8000ed8 <HAL_Delay>
 80005f0:	e7b8      	b.n	8000564 <main+0x50>
    }
    else{
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <main+0x11c>)
 80005fa:	f001 f93d 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <main+0x11c>)
 8000606:	f001 f937 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <main+0x11c>)
 8000612:	f001 f931 	bl	8001878 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <main+0x11c>)
 800061e:	f001 f92b 	bl	8001878 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000622:	e79f      	b.n	8000564 <main+0x50>
 8000624:	080e0000 	.word	0x080e0000
 8000628:	2000018c 	.word	0x2000018c
 800062c:	20000190 	.word	0x20000190
 8000630:	40020c00 	.word	0x40020c00

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 fd06 	bl	8008054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fae4 	bl	8003c88 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c6:	f000 f9b1 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fd45 	bl	8004178 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f4:	f000 f99a 	bl	8000a2c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C1_Init+0x50>)
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_I2C1_Init+0x54>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2C1_Init+0x50>)
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_I2C1_Init+0x58>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_I2C1_Init+0x50>)
 8000726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_I2C1_Init+0x50>)
 8000746:	f002 fcbb 	bl	80030c0 <HAL_I2C_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000750:	f000 f96c 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000098 	.word	0x20000098
 800075c:	40005400 	.word	0x40005400
 8000760:	000186a0 	.word	0x000186a0

08000764 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_I2S3_Init+0x54>)
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <MX_I2S3_Init+0x58>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_I2S3_Init+0x54>)
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <MX_I2S3_Init+0x5c>)
 800078e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_I2S3_Init+0x54>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2S3_Init+0x54>)
 80007a4:	f002 fdd0 	bl	8003348 <HAL_I2S_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ae:	f000 f93d 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000ec 	.word	0x200000ec
 80007bc:	40003c00 	.word	0x40003c00
 80007c0:	00017700 	.word	0x00017700

080007c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_SPI1_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_SPI1_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI1_Init+0x64>)
 8000810:	220a      	movs	r2, #10
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_SPI1_Init+0x64>)
 8000816:	f003 fffb 	bl	8004810 <HAL_SPI_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000820:	f000 f904 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000134 	.word	0x20000134
 800082c:	40013000 	.word	0x40013000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b72      	ldr	r3, [pc, #456]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a71      	ldr	r2, [pc, #452]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b6f      	ldr	r3, [pc, #444]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b6b      	ldr	r3, [pc, #428]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a6a      	ldr	r2, [pc, #424]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b68      	ldr	r3, [pc, #416]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b64      	ldr	r3, [pc, #400]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a63      	ldr	r2, [pc, #396]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b61      	ldr	r3, [pc, #388]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b5d      	ldr	r3, [pc, #372]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a5c      	ldr	r2, [pc, #368]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b5a      	ldr	r3, [pc, #360]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b56      	ldr	r3, [pc, #344]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a55      	ldr	r2, [pc, #340]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b53      	ldr	r3, [pc, #332]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b4f      	ldr	r3, [pc, #316]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a4e      	ldr	r2, [pc, #312]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b4c      	ldr	r3, [pc, #304]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	4849      	ldr	r0, [pc, #292]	; (8000a18 <MX_GPIO_Init+0x1e8>)
 80008f4:	f000 ffc0 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	4847      	ldr	r0, [pc, #284]	; (8000a1c <MX_GPIO_Init+0x1ec>)
 80008fe:	f000 ffbb 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	2200      	movs	r2, #0
 8000904:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000908:	4845      	ldr	r0, [pc, #276]	; (8000a20 <MX_GPIO_Init+0x1f0>)
 800090a:	f000 ffb5 	bl	8001878 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	483c      	ldr	r0, [pc, #240]	; (8000a18 <MX_GPIO_Init+0x1e8>)
 8000926:	f000 fe0b 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4836      	ldr	r0, [pc, #216]	; (8000a1c <MX_GPIO_Init+0x1ec>)
 8000942:	f000 fdfd 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	482e      	ldr	r0, [pc, #184]	; (8000a1c <MX_GPIO_Init+0x1ec>)
 8000962:	f000 fded 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 800097c:	f000 fde0 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 8000994:	f000 fdd4 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009aa:	2305      	movs	r3, #5
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 80009b6:	f000 fdc3 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_GPIO_Init+0x1f0>)
 80009d4:	f000 fdb4 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_GPIO_Init+0x1f0>)
 80009ec:	f000 fda8 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0x1e8>)
 8000a06:	f000 fd9b 	bl	8001540 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	; 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a76:	2007      	movs	r0, #7
 8000a78:	f000 fb22 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_I2C_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12c      	bne.n	8000b04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000acc:	2312      	movs	r3, #18
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <HAL_I2C_MspInit+0x8c>)
 8000ae4:	f000 fd2c 	bl	8001540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <HAL_I2S_MspInit+0xf0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d15a      	bne.n	8000bfe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b4c:	23c0      	movs	r3, #192	; 0xc0
 8000b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fd19 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b64:	f7ff ff62 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <HAL_I2S_MspInit+0xf8>)
 8000bd8:	f000 fcb2 	bl	8001540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bdc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bee:	2306      	movs	r3, #6
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <HAL_I2S_MspInit+0xfc>)
 8000bfa:	f000 fca1 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3738      	adds	r7, #56	; 0x38
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40003c00 	.word	0x40003c00
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020800 	.word	0x40020800

08000c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_SPI_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12b      	bne.n	8000c92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c72:	23e0      	movs	r3, #224	; 0xe0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c82:	2305      	movs	r3, #5
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_SPI_MspInit+0x8c>)
 8000c8e:	f000 fc57 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8d0 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <OTG_FS_IRQHandler+0x10>)
 8000d02:	f001 f83d 	bl	8001d80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000598 	.word	0x20000598

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f007 f9a0 	bl	8008084 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20020000 	.word	0x20020000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20000194 	.word	0x20000194
 8000d78:	200009e8 	.word	0x200009e8

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da6:	490e      	ldr	r1, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dbc:	4c0b      	ldr	r4, [pc, #44]	; (8000dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd7 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f007 f95f 	bl	8008090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fb9f 	bl	8000514 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000de4:	080081b8 	.word	0x080081b8
  ldr r2, =_sbss
 8000de8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dec:	200009e4 	.word	0x200009e4

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f94f 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fe06 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f967 	bl	800112a <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f92f 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000198 	.word	0x20000198

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000198 	.word	0x20000198

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_FLASH_Program+0xa0>)
 8001158:	7e1b      	ldrb	r3, [r3, #24]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_FLASH_Program+0x1e>
 800115e:	2302      	movs	r3, #2
 8001160:	e03b      	b.n	80011da <HAL_FLASH_Program+0x96>
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_FLASH_Program+0xa0>)
 8001164:	2201      	movs	r2, #1
 8001166:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800116c:	f000 f870 	bl	8001250 <FLASH_WaitForLastOperation>
 8001170:	4603      	mov	r3, r0
 8001172:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12b      	bne.n	80011d2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001180:	783b      	ldrb	r3, [r7, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f000 f91b 	bl	80013c0 <FLASH_Program_Byte>
 800118a:	e016      	b.n	80011ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d105      	bne.n	800119e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001192:	883b      	ldrh	r3, [r7, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	68b8      	ldr	r0, [r7, #8]
 8001198:	f000 f8ee 	bl	8001378 <FLASH_Program_HalfWord>
 800119c:	e00d      	b.n	80011ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d105      	bne.n	80011b0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	68b8      	ldr	r0, [r7, #8]
 80011aa:	f000 f8c3 	bl	8001334 <FLASH_Program_Word>
 80011ae:	e004      	b.n	80011ba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80011b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f000 f88b 	bl	80012d0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011be:	f000 f847 	bl	8001250 <FLASH_WaitForLastOperation>
 80011c2:	4603      	mov	r3, r0
 80011c4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_FLASH_Program+0xa4>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_FLASH_Program+0xa4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_FLASH_Program+0xa0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000019c 	.word	0x2000019c
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_FLASH_Unlock+0x38>)
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	da0b      	bge.n	8001216 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_FLASH_Unlock+0x38>)
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_FLASH_Unlock+0x3c>)
 8001202:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <HAL_FLASH_Unlock+0x38>)
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_FLASH_Unlock+0x40>)
 8001208:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_FLASH_Unlock+0x38>)
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	da01      	bge.n	8001216 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001216:	79fb      	ldrb	r3, [r7, #7]
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40023c00 	.word	0x40023c00
 8001228:	45670123 	.word	0x45670123
 800122c:	cdef89ab 	.word	0xcdef89ab

08001230 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_FLASH_Lock+0x1c>)
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_FLASH_Lock+0x1c>)
 800123a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800123e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023c00 	.word	0x40023c00

08001250 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <FLASH_WaitForLastOperation+0x78>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001262:	f7ff fe2d 	bl	8000ec0 <HAL_GetTick>
 8001266:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001268:	e010      	b.n	800128c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d00c      	beq.n	800128c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <FLASH_WaitForLastOperation+0x38>
 8001278:	f7ff fe22 	bl	8000ec0 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d201      	bcs.n	800128c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e019      	b.n	80012c0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <FLASH_WaitForLastOperation+0x7c>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e8      	bne.n	800126a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <FLASH_WaitForLastOperation+0x7c>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <FLASH_WaitForLastOperation+0x7c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <FLASH_WaitForLastOperation+0x7c>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012b6:	f000 f8a5 	bl	8001404 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
  
}  
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000019c 	.word	0x2000019c
 80012cc:	40023c00 	.word	0x40023c00

080012d0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4a13      	ldr	r2, [pc, #76]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4a10      	ldr	r2, [pc, #64]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <FLASH_Program_DoubleWord+0x60>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001306:	f3bf 8f6f 	isb	sy
}
 800130a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800130c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	000a      	movs	r2, r1
 800131a:	2300      	movs	r3, #0
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	3104      	adds	r1, #4
 8001320:	4613      	mov	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40023c00 	.word	0x40023c00

08001334 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <FLASH_Program_Word+0x40>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <FLASH_Program_Word+0x40>)
 8001344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001348:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <FLASH_Program_Word+0x40>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <FLASH_Program_Word+0x40>)
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <FLASH_Program_Word+0x40>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <FLASH_Program_Word+0x40>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40023c00 	.word	0x40023c00

08001378 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 800138a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800138e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <FLASH_Program_HalfWord+0x44>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	801a      	strh	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <FLASH_Program_Byte+0x40>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	701a      	strb	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00

08001404 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	4a23      	ldr	r2, [pc, #140]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 800141e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 8001422:	2210      	movs	r2, #16
 8001424:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 800143c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 8001440:	2220      	movs	r2, #32
 8001442:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 800145a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 800145e:	2240      	movs	r2, #64	; 0x40
 8001460:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 8001478:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f043 0320 	orr.w	r3, r3, #32
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <FLASH_SetErrorCode+0xa8>)
 8001496:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <FLASH_SetErrorCode+0xa4>)
 800149a:	2202      	movs	r2, #2
 800149c:	60da      	str	r2, [r3, #12]
  }
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023c00 	.word	0x40023c00
 80014ac:	2000019c 	.word	0x2000019c

080014b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e010      	b.n	80014ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d103      	bne.n	80014da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80014d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e009      	b.n	80014ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d103      	bne.n	80014e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80014e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e002      	b.n	80014ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80014e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <FLASH_Erase_Sector+0x8c>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <FLASH_Erase_Sector+0x8c>)
 80014f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <FLASH_Erase_Sector+0x8c>)
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	490f      	ldr	r1, [pc, #60]	; (800153c <FLASH_Erase_Sector+0x8c>)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <FLASH_Erase_Sector+0x8c>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <FLASH_Erase_Sector+0x8c>)
 800150c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001510:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <FLASH_Erase_Sector+0x8c>)
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4313      	orrs	r3, r2
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <FLASH_Erase_Sector+0x8c>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <FLASH_Erase_Sector+0x8c>)
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <FLASH_Erase_Sector+0x8c>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	6113      	str	r3, [r2, #16]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40023c00 	.word	0x40023c00

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e16b      	b.n	8001834 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	429a      	cmp	r2, r3
 8001576:	f040 815a 	bne.w	800182e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d005      	beq.n	8001592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158e:	2b02      	cmp	r3, #2
 8001590:	d130      	bne.n	80015f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c8:	2201      	movs	r2, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 0201 	and.w	r2, r3, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d017      	beq.n	8001630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d123      	bne.n	8001684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	08da      	lsrs	r2, r3, #3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3208      	adds	r2, #8
 8001644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0203 	and.w	r2, r3, #3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80b4 	beq.w	800182e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b60      	ldr	r3, [pc, #384]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a5f      	ldr	r2, [pc, #380]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e2:	4a5b      	ldr	r2, [pc, #364]	; (8001850 <HAL_GPIO_Init+0x310>)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	220f      	movs	r2, #15
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_GPIO_Init+0x314>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d02b      	beq.n	8001766 <HAL_GPIO_Init+0x226>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a51      	ldr	r2, [pc, #324]	; (8001858 <HAL_GPIO_Init+0x318>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d025      	beq.n	8001762 <HAL_GPIO_Init+0x222>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a50      	ldr	r2, [pc, #320]	; (800185c <HAL_GPIO_Init+0x31c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01f      	beq.n	800175e <HAL_GPIO_Init+0x21e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4f      	ldr	r2, [pc, #316]	; (8001860 <HAL_GPIO_Init+0x320>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x21a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4e      	ldr	r2, [pc, #312]	; (8001864 <HAL_GPIO_Init+0x324>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x216>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4d      	ldr	r2, [pc, #308]	; (8001868 <HAL_GPIO_Init+0x328>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x212>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4c      	ldr	r2, [pc, #304]	; (800186c <HAL_GPIO_Init+0x32c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x20e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4b      	ldr	r2, [pc, #300]	; (8001870 <HAL_GPIO_Init+0x330>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x20a>
 8001746:	2307      	movs	r3, #7
 8001748:	e00e      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800174a:	2308      	movs	r3, #8
 800174c:	e00c      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800174e:	2306      	movs	r3, #6
 8001750:	e00a      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001752:	2305      	movs	r3, #5
 8001754:	e008      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001756:	2304      	movs	r3, #4
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800175a:	2303      	movs	r3, #3
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001766:	2300      	movs	r3, #0
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001778:	4935      	ldr	r1, [pc, #212]	; (8001850 <HAL_GPIO_Init+0x310>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017aa:	4a32      	ldr	r2, [pc, #200]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fe:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_GPIO_Init+0x334>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3301      	adds	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	f67f ae90 	bls.w	800155c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40013800 	.word	0x40013800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40021000 	.word	0x40021000
 8001868:	40021400 	.word	0x40021400
 800186c:	40021800 	.word	0x40021800
 8001870:	40021c00 	.word	0x40021c00
 8001874:	40013c00 	.word	0x40013c00

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ac:	b08f      	sub	sp, #60	; 0x3c
 80018ae:	af0a      	add	r7, sp, #40	; 0x28
 80018b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e054      	b.n	8001966 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f006 f856 	bl	8007988 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2203      	movs	r2, #3
 80018e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f883 	bl	8004a06 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	687e      	ldr	r6, [r7, #4]
 8001908:	466d      	mov	r5, sp
 800190a:	f106 0410 	add.w	r4, r6, #16
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191a:	e885 0003 	stmia.w	r5, {r0, r1}
 800191e:	1d33      	adds	r3, r6, #4
 8001920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f002 fffd 	bl	8004922 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2101      	movs	r1, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f87a 	bl	8004a28 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	687e      	ldr	r6, [r7, #4]
 800193c:	466d      	mov	r5, sp
 800193e:	f106 0410 	add.w	r4, r6, #16
 8001942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800194e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001952:	1d33      	adds	r3, r6, #4
 8001954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001956:	6838      	ldr	r0, [r7, #0]
 8001958:	f003 fa02 	bl	8004d60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800196e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800196e:	b590      	push	{r4, r7, lr}
 8001970:	b089      	sub	sp, #36	; 0x24
 8001972:	af04      	add	r7, sp, #16
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	4608      	mov	r0, r1
 8001978:	4611      	mov	r1, r2
 800197a:	461a      	mov	r2, r3
 800197c:	4603      	mov	r3, r0
 800197e:	70fb      	strb	r3, [r7, #3]
 8001980:	460b      	mov	r3, r1
 8001982:	70bb      	strb	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_HCD_HC_Init+0x28>
 8001992:	2302      	movs	r3, #2
 8001994:	e076      	b.n	8001a84 <HAL_HCD_HC_Init+0x116>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	333d      	adds	r3, #61	; 0x3d
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3338      	adds	r3, #56	; 0x38
 80019be:	787a      	ldrb	r2, [r7, #1]
 80019c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3340      	adds	r3, #64	; 0x40
 80019d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019d2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3339      	adds	r3, #57	; 0x39
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	333f      	adds	r3, #63	; 0x3f
 80019f4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	78ba      	ldrb	r2, [r7, #2]
 80019fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a02:	b2d0      	uxtb	r0, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	333a      	adds	r3, #58	; 0x3a
 8001a10:	4602      	mov	r2, r0
 8001a12:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da09      	bge.n	8001a30 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	333b      	adds	r3, #59	; 0x3b
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e008      	b.n	8001a42 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	333b      	adds	r3, #59	; 0x3b
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	333c      	adds	r3, #60	; 0x3c
 8001a50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a54:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	787c      	ldrb	r4, [r7, #1]
 8001a5c:	78ba      	ldrb	r2, [r7, #2]
 8001a5e:	78f9      	ldrb	r1, [r7, #3]
 8001a60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4623      	mov	r3, r4
 8001a72:	f003 fafb 	bl	800506c <USB_HC_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_HCD_HC_Halt+0x1e>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e00f      	b.n	8001aca <HAL_HCD_HC_Halt+0x3e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fd4b 	bl	8005556 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	4608      	mov	r0, r1
 8001ade:	4611      	mov	r1, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	70fb      	strb	r3, [r7, #3]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	70bb      	strb	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	333b      	adds	r3, #59	; 0x3b
 8001afc:	78ba      	ldrb	r2, [r7, #2]
 8001afe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	333f      	adds	r3, #63	; 0x3f
 8001b0e:	787a      	ldrb	r2, [r7, #1]
 8001b10:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b12:	7c3b      	ldrb	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d112      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3342      	adds	r3, #66	; 0x42
 8001b26:	2203      	movs	r2, #3
 8001b28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	333d      	adds	r3, #61	; 0x3d
 8001b38:	7f3a      	ldrb	r2, [r7, #28]
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e008      	b.n	8001b50 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3342      	adds	r3, #66	; 0x42
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f200 80c6 	bhi.w	8001ce4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001cd1 	.word	0x08001cd1
 8001b68:	08001bd5 	.word	0x08001bd5
 8001b6c:	08001c53 	.word	0x08001c53
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b70:	7c3b      	ldrb	r3, [r7, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	f040 80b8 	bne.w	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80b4 	bne.w	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b80:	8b3b      	ldrh	r3, [r7, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	3355      	adds	r3, #85	; 0x55
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3355      	adds	r3, #85	; 0x55
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3342      	adds	r3, #66	; 0x42
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bbe:	e093      	b.n	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3342      	adds	r3, #66	; 0x42
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
      break;
 8001bd2:	e089      	b.n	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bd4:	78bb      	ldrb	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d11d      	bne.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	212c      	movs	r1, #44	; 0x2c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	3355      	adds	r3, #85	; 0x55
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3342      	adds	r3, #66	; 0x42
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c00:	e073      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3342      	adds	r3, #66	; 0x42
 8001c10:	2202      	movs	r2, #2
 8001c12:	701a      	strb	r2, [r3, #0]
      break;
 8001c14:	e069      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3354      	adds	r3, #84	; 0x54
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3342      	adds	r3, #66	; 0x42
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
      break;
 8001c3c:	e055      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3342      	adds	r3, #66	; 0x42
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	701a      	strb	r2, [r3, #0]
      break;
 8001c50:	e04b      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11d      	bne.n	8001c94 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3355      	adds	r3, #85	; 0x55
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3342      	adds	r3, #66	; 0x42
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c7e:	e034      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3342      	adds	r3, #66	; 0x42
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
      break;
 8001c92:	e02a      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3354      	adds	r3, #84	; 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3342      	adds	r3, #66	; 0x42
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
      break;
 8001cba:	e016      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e00c      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3342      	adds	r3, #66	; 0x42
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ce4:	bf00      	nop
 8001ce6:	e000      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ce8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3344      	adds	r3, #68	; 0x44
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	8b3a      	ldrh	r2, [r7, #24]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	202c      	movs	r0, #44	; 0x2c
 8001d04:	fb00 f303 	mul.w	r3, r0, r3
 8001d08:	440b      	add	r3, r1
 8001d0a:	334c      	adds	r3, #76	; 0x4c
 8001d0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3360      	adds	r3, #96	; 0x60
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3350      	adds	r3, #80	; 0x50
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3339      	adds	r3, #57	; 0x39
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3361      	adds	r3, #97	; 0x61
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	222c      	movs	r2, #44	; 0x2c
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	18d1      	adds	r1, r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f003 fa9e 	bl	80052b0 <USB_HC_StartXfer>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop

08001d80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 ff9f 	bl	8004cda <USB_GetMode>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	f040 80f6 	bne.w	8001f90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 ff83 	bl	8004cb4 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80ec 	beq.w	8001f8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 ff7a 	bl	8004cb4 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dca:	d104      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 ff6a 	bl	8004cb4 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dea:	d104      	bne.n	8001df6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 ff5a 	bl	8004cb4 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e0a:	d104      	bne.n	8001e16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 ff4a 	bl	8004cb4 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 ff3c 	bl	8004cb4 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e46:	d11c      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10f      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e62:	2110      	movs	r1, #16
 8001e64:	6938      	ldr	r0, [r7, #16]
 8001e66:	f002 fe2b 	bl	8004ac0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e6a:	6938      	ldr	r0, [r7, #16]
 8001e6c:	f002 fe5c 	bl	8004b28 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 f832 	bl	8004ee0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f005 fe01 	bl	8007a84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 ff14 	bl	8004cb4 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e96:	d102      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 f89e 	bl	8002fda <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 ff06 	bl	8004cb4 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d106      	bne.n	8001ec0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f005 fdca 	bl	8007a4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 fef5 	bl	8004cb4 <USB_ReadInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d101      	bne.n	8001ed8 <HAL_HCD_IRQHandler+0x158>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_HCD_IRQHandler+0x15a>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0210 	bic.w	r2, r2, #16
 8001eec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 ffa1 	bl	8002e36 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0210 	orr.w	r2, r2, #16
 8001f02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fed3 	bl	8004cb4 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f18:	d13a      	bne.n	8001f90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fb08 	bl	8005534 <USB_HC_ReadInterrupt>
 8001f24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e025      	b.n	8001f78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d018      	beq.n	8001f72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f56:	d106      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8ab 	bl	80020ba <HCD_HC_IN_IRQHandler>
 8001f64:	e005      	b.n	8001f72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fbf9 	bl	8002764 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3d4      	bcc.n	8001f2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8a:	615a      	str	r2, [r3, #20]
 8001f8c:	e000      	b.n	8001f90 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f8e:	bf00      	nop
    }
  }
}
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_HCD_Start+0x16>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e013      	b.n	8001fd4 <HAL_HCD_Start+0x3e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fff4 	bl	8004fa8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fd0d 	bl	80049e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_HCD_Stop+0x16>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e00d      	b.n	800200e <HAL_HCD_Stop+0x32>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fbe2 	bl	80057c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f002 ff96 	bl	8004f54 <USB_ResetPort>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3360      	adds	r3, #96	; 0x60
 800204c:	781b      	ldrb	r3, [r3, #0]
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3350      	adds	r3, #80	; 0x50
 8002074:	681b      	ldr	r3, [r3, #0]
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 ffda 	bl	8005048 <USB_GetCurrentFrame>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 ffb5 	bl	800501a <USB_GetHostSpeed>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d11a      	bne.n	8002120 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	461a      	mov	r2, r3
 80020f8:	2304      	movs	r3, #4
 80020fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3361      	adds	r3, #97	; 0x61
 800210a:	2206      	movs	r2, #6
 800210c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fa1c 	bl	8005556 <USB_HC_Halt>
 800211e:	e0af      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002136:	d11b      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	461a      	mov	r2, r3
 8002146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3361      	adds	r3, #97	; 0x61
 800215a:	2207      	movs	r2, #7
 800215c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f003 f9f4 	bl	8005556 <USB_HC_Halt>
 800216e:	e087      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b20      	cmp	r3, #32
 8002184:	d109      	bne.n	800219a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	461a      	mov	r2, r3
 8002194:	2320      	movs	r3, #32
 8002196:	6093      	str	r3, [r2, #8]
 8002198:	e072      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d11a      	bne.n	80021e6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	2308      	movs	r3, #8
 80021c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3361      	adds	r3, #97	; 0x61
 80021d0:	2205      	movs	r2, #5
 80021d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 f9b9 	bl	8005556 <USB_HC_Halt>
 80021e4:	e04c      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d11b      	bne.n	8002236 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002210:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3361      	adds	r3, #97	; 0x61
 8002220:	2208      	movs	r2, #8
 8002222:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f003 f991 	bl	8005556 <USB_HC_Halt>
 8002234:	e024      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d119      	bne.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	461a      	mov	r2, r3
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3361      	adds	r3, #97	; 0x61
 800226c:	2206      	movs	r2, #6
 800226e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f003 f96b 	bl	8005556 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002296:	d112      	bne.n	80022be <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f957 	bl	8005556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022bc:	e24e      	b.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 80df 	bne.w	8002494 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d019      	beq.n	8002312 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3348      	adds	r3, #72	; 0x48
 80022ec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	0159      	lsls	r1, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	440b      	add	r3, r1
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002300:	1ad2      	subs	r2, r2, r3
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	202c      	movs	r0, #44	; 0x2c
 8002308:	fb00 f303 	mul.w	r3, r0, r3
 800230c:	440b      	add	r3, r1
 800230e:	3350      	adds	r3, #80	; 0x50
 8002310:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3361      	adds	r3, #97	; 0x61
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	335c      	adds	r3, #92	; 0x5c
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	2301      	movs	r3, #1
 8002346:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	333f      	adds	r3, #63	; 0x3f
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	333f      	adds	r3, #63	; 0x3f
 800236a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800236c:	2b02      	cmp	r3, #2
 800236e:	d111      	bne.n	8002394 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f003 f8eb 	bl	8005556 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2310      	movs	r3, #16
 8002390:	6093      	str	r3, [r2, #8]
 8002392:	e03a      	b.n	800240a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	333f      	adds	r3, #63	; 0x3f
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d009      	beq.n	80023bc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	333f      	adds	r3, #63	; 0x3f
 80023b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d126      	bne.n	800240a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	0151      	lsls	r1, r2, #5
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	440a      	add	r2, r1
 80023d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3360      	adds	r3, #96	; 0x60
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	b2d9      	uxtb	r1, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	202c      	movs	r0, #44	; 0x2c
 80023f8:	fb00 f303 	mul.w	r3, r0, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3360      	adds	r3, #96	; 0x60
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f005 fb4b 	bl	8007aa0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d12b      	bne.n	800246a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3348      	adds	r3, #72	; 0x48
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	202c      	movs	r0, #44	; 0x2c
 8002428:	fb00 f202 	mul.w	r2, r0, r2
 800242c:	440a      	add	r2, r1
 800242e:	3240      	adds	r2, #64	; 0x40
 8002430:	8812      	ldrh	r2, [r2, #0]
 8002432:	fbb3 f3f2 	udiv	r3, r3, r2
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 818e 	beq.w	800275c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3354      	adds	r3, #84	; 0x54
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2d8      	uxtb	r0, r3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	212c      	movs	r1, #44	; 0x2c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	3354      	adds	r3, #84	; 0x54
 8002464:	4602      	mov	r2, r0
 8002466:	701a      	strb	r2, [r3, #0]
}
 8002468:	e178      	b.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3354      	adds	r3, #84	; 0x54
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	f083 0301 	eor.w	r3, r3, #1
 800247e:	b2d8      	uxtb	r0, r3
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3354      	adds	r3, #84	; 0x54
 800248e:	4602      	mov	r2, r0
 8002490:	701a      	strb	r2, [r3, #0]
}
 8002492:	e163      	b.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 80f6 	bne.w	8002698 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3361      	adds	r3, #97	; 0x61
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d109      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3360      	adds	r3, #96	; 0x60
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e0c9      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3361      	adds	r3, #97	; 0x61
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d109      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3360      	adds	r3, #96	; 0x60
 80024f6:	2205      	movs	r2, #5
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e0b5      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3361      	adds	r3, #97	; 0x61
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d009      	beq.n	8002524 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002520:	2b08      	cmp	r3, #8
 8002522:	d150      	bne.n	80025c6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	335c      	adds	r3, #92	; 0x5c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	202c      	movs	r0, #44	; 0x2c
 800253c:	fb00 f303 	mul.w	r3, r0, r3
 8002540:	440b      	add	r3, r1
 8002542:	335c      	adds	r3, #92	; 0x5c
 8002544:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	335c      	adds	r3, #92	; 0x5c
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d912      	bls.n	8002580 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	335c      	adds	r3, #92	; 0x5c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	2204      	movs	r2, #4
 800257c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800257e:	e073      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	2202      	movs	r2, #2
 8002590:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025a8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025b0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025c4:	e050      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3361      	adds	r3, #97	; 0x61
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d122      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3360      	adds	r3, #96	; 0x60
 80025e8:	2202      	movs	r2, #2
 80025ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002602:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800260a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e023      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3361      	adds	r3, #97	; 0x61
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b07      	cmp	r3, #7
 8002632:	d119      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	335c      	adds	r3, #92	; 0x5c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	202c      	movs	r0, #44	; 0x2c
 800264c:	fb00 f303 	mul.w	r3, r0, r3
 8002650:	440b      	add	r3, r1
 8002652:	335c      	adds	r3, #92	; 0x5c
 8002654:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	2204      	movs	r2, #4
 8002666:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2302      	movs	r3, #2
 8002678:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	b2d9      	uxtb	r1, r3
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	202c      	movs	r0, #44	; 0x2c
 8002684:	fb00 f303 	mul.w	r3, r0, r3
 8002688:	4413      	add	r3, r2
 800268a:	3360      	adds	r3, #96	; 0x60
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f005 fa05 	bl	8007aa0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002696:	e061      	b.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d156      	bne.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	333f      	adds	r3, #63	; 0x3f
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d111      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	335c      	adds	r3, #92	; 0x5c
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f002 ff39 	bl	8005556 <USB_HC_Halt>
 80026e4:	e031      	b.n	800274a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	333f      	adds	r3, #63	; 0x3f
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	333f      	adds	r3, #63	; 0x3f
 8002708:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800270a:	2b02      	cmp	r3, #2
 800270c:	d11d      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	335c      	adds	r3, #92	; 0x5c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d110      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3361      	adds	r3, #97	; 0x61
 8002736:	2203      	movs	r2, #3
 8002738:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f002 ff06 	bl	8005556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	2310      	movs	r3, #16
 800275a:	6093      	str	r3, [r2, #8]
}
 800275c:	bf00      	nop
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b04      	cmp	r3, #4
 8002792:	d11a      	bne.n	80027ca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2304      	movs	r3, #4
 80027a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3361      	adds	r3, #97	; 0x61
 80027b4:	2206      	movs	r2, #6
 80027b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fec7 	bl	8005556 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027c8:	e331      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d12e      	bne.n	800283e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	461a      	mov	r2, r3
 80027ee:	2320      	movs	r3, #32
 80027f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333d      	adds	r3, #61	; 0x3d
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	f040 8313 	bne.w	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	333d      	adds	r3, #61	; 0x3d
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	2202      	movs	r2, #2
 800282a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fe8d 	bl	8005556 <USB_HC_Halt>
}
 800283c:	e2f7      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002854:	d112      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002868:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fe6e 	bl	8005556 <USB_HC_Halt>
}
 800287a:	e2d8      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d140      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d111      	bne.n	80028de <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	333d      	adds	r3, #61	; 0x3d
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	2340      	movs	r3, #64	; 0x40
 80028dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	2301      	movs	r3, #1
 80028ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3361      	adds	r3, #97	; 0x61
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f002 fe22 	bl	8005556 <USB_HC_Halt>
}
 8002912:	e28c      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d12c      	bne.n	8002984 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3361      	adds	r3, #97	; 0x61
 8002938:	2204      	movs	r2, #4
 800293a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	333d      	adds	r3, #61	; 0x3d
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	335c      	adds	r3, #92	; 0x5c
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f002 fdf3 	bl	8005556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	6093      	str	r3, [r2, #8]
}
 8002982:	e254      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d11a      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	461a      	mov	r2, r3
 80029a8:	2308      	movs	r3, #8
 80029aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	2205      	movs	r2, #5
 80029bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f002 fdc4 	bl	8005556 <USB_HC_Halt>
}
 80029ce:	e22e      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d140      	bne.n	8002a68 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	335c      	adds	r3, #92	; 0x5c
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3361      	adds	r3, #97	; 0x61
 8002a06:	2203      	movs	r2, #3
 8002a08:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	333d      	adds	r3, #61	; 0x3d
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d112      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	333c      	adds	r3, #60	; 0x3c
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	333d      	adds	r3, #61	; 0x3d
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f002 fd81 	bl	8005556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	2310      	movs	r3, #16
 8002a64:	6093      	str	r3, [r2, #8]
}
 8002a66:	e1e2      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d164      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d111      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3361      	adds	r3, #97	; 0x61
 8002a94:	2206      	movs	r2, #6
 8002a96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f002 fd57 	bl	8005556 <USB_HC_Halt>
 8002aa8:	e044      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	202c      	movs	r0, #44	; 0x2c
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	335c      	adds	r3, #92	; 0x5c
 8002aca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	335c      	adds	r3, #92	; 0x5c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d920      	bls.n	8002b22 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	335c      	adds	r3, #92	; 0x5c
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3360      	adds	r3, #96	; 0x60
 8002b00:	2204      	movs	r2, #4
 8002b02:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	b2d9      	uxtb	r1, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	202c      	movs	r0, #44	; 0x2c
 8002b0e:	fb00 f303 	mul.w	r3, r0, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f004 ffc0 	bl	8007aa0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b20:	e008      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3360      	adds	r3, #96	; 0x60
 8002b30:	2202      	movs	r2, #2
 8002b32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	6093      	str	r3, [r2, #8]
}
 8002b46:	e172      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5e:	d11b      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3361      	adds	r3, #97	; 0x61
 8002b6e:	2208      	movs	r2, #8
 8002b70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f002 fcea 	bl	8005556 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b94:	6093      	str	r3, [r2, #8]
}
 8002b96:	e14a      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	f040 813f 	bne.w	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3361      	adds	r3, #97	; 0x61
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d17d      	bne.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3360      	adds	r3, #96	; 0x60
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	333f      	adds	r3, #63	; 0x3f
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d00a      	beq.n	8002c00 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	333f      	adds	r3, #63	; 0x3f
 8002bf8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	f040 8100 	bne.w	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d113      	bne.n	8002c30 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3355      	adds	r3, #85	; 0x55
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2d8      	uxtb	r0, r3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3355      	adds	r3, #85	; 0x55
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	f040 80e3 	bne.w	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	334c      	adds	r3, #76	; 0x4c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80d8 	beq.w	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	334c      	adds	r3, #76	; 0x4c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	202c      	movs	r0, #44	; 0x2c
 8002c66:	fb00 f202 	mul.w	r2, r0, r2
 8002c6a:	440a      	add	r2, r1
 8002c6c:	3240      	adds	r2, #64	; 0x40
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	3b01      	subs	r3, #1
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	202c      	movs	r0, #44	; 0x2c
 8002c7a:	fb00 f202 	mul.w	r2, r0, r2
 8002c7e:	440a      	add	r2, r1
 8002c80:	3240      	adds	r2, #64	; 0x40
 8002c82:	8812      	ldrh	r2, [r2, #0]
 8002c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80b5 	beq.w	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3355      	adds	r3, #85	; 0x55
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	f083 0301 	eor.w	r3, r3, #1
 8002caa:	b2d8      	uxtb	r0, r3
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3355      	adds	r3, #85	; 0x55
 8002cba:	4602      	mov	r2, r0
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e09f      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3361      	adds	r3, #97	; 0x61
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d109      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e08b      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3361      	adds	r3, #97	; 0x61
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d109      	bne.n	8002d10 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e077      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3361      	adds	r3, #97	; 0x61
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d109      	bne.n	8002d38 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3360      	adds	r3, #96	; 0x60
 8002d32:	2205      	movs	r2, #5
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e063      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3361      	adds	r3, #97	; 0x61
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b06      	cmp	r3, #6
 8002d4a:	d009      	beq.n	8002d60 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3361      	adds	r3, #97	; 0x61
 8002d5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d14f      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	335c      	adds	r3, #92	; 0x5c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	202c      	movs	r0, #44	; 0x2c
 8002d78:	fb00 f303 	mul.w	r3, r0, r3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	335c      	adds	r3, #92	; 0x5c
 8002d80:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	335c      	adds	r3, #92	; 0x5c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d912      	bls.n	8002dbc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	335c      	adds	r3, #92	; 0x5c
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3360      	adds	r3, #96	; 0x60
 8002db6:	2204      	movs	r2, #4
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e021      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3360      	adds	r3, #96	; 0x60
 8002dca:	2202      	movs	r2, #2
 8002dcc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002de4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2302      	movs	r3, #2
 8002e10:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	b2d9      	uxtb	r1, r3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	202c      	movs	r0, #44	; 0x2c
 8002e1c:	fb00 f303 	mul.w	r3, r0, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3360      	adds	r3, #96	; 0x60
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f004 fe39 	bl	8007aa0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e2e:	bf00      	nop
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08a      	sub	sp, #40	; 0x28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	0c5b      	lsrs	r3, r3, #17
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e6a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d004      	beq.n	8002e7c <HCD_RXQLVL_IRQHandler+0x46>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	f000 80a9 	beq.w	8002fcc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e7a:	e0aa      	b.n	8002fd2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80a6 	beq.w	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3344      	adds	r3, #68	; 0x44
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 809b 	beq.w	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3350      	adds	r3, #80	; 0x50
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	441a      	add	r2, r3
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	202c      	movs	r0, #44	; 0x2c
 8002eb4:	fb00 f303 	mul.w	r3, r0, r3
 8002eb8:	440b      	add	r3, r1
 8002eba:	334c      	adds	r3, #76	; 0x4c
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d87a      	bhi.n	8002fb8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3344      	adds	r3, #68	; 0x44
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f001 fe92 	bl	8004c04 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3344      	adds	r3, #68	; 0x44
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	202c      	movs	r0, #44	; 0x2c
 8002efa:	fb00 f303 	mul.w	r3, r0, r3
 8002efe:	440b      	add	r3, r1
 8002f00:	3344      	adds	r3, #68	; 0x44
 8002f02:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3350      	adds	r3, #80	; 0x50
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	441a      	add	r2, r3
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	202c      	movs	r0, #44	; 0x2c
 8002f1e:	fb00 f303 	mul.w	r3, r0, r3
 8002f22:	440b      	add	r3, r1
 8002f24:	3350      	adds	r3, #80	; 0x50
 8002f26:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	0cdb      	lsrs	r3, r3, #19
 8002f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3340      	adds	r3, #64	; 0x40
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d13c      	bne.n	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d039      	beq.n	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3354      	adds	r3, #84	; 0x54
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	f083 0301 	eor.w	r3, r3, #1
 8002fa2:	b2d8      	uxtb	r0, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3354      	adds	r3, #84	; 0x54
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	701a      	strb	r2, [r3, #0]
      break;
 8002fb6:	e00b      	b.n	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3360      	adds	r3, #96	; 0x60
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	701a      	strb	r2, [r3, #0]
      break;
 8002fca:	e001      	b.n	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fd0:	bf00      	nop
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	3728      	adds	r7, #40	; 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003006:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	d10b      	bne.n	800302a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f004 fd23 	bl	8007a68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d132      	bne.n	800309a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d126      	bne.n	8003094 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d113      	bne.n	8003076 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003058:	d106      	bne.n	8003068 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f001 ff3d 	bl	8004ee0 <USB_InitFSLSPClkSel>
 8003066:	e011      	b.n	800308c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f001 ff36 	bl	8004ee0 <USB_InitFSLSPClkSel>
 8003074:	e00a      	b.n	800308c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d106      	bne.n	800308c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003084:	461a      	mov	r2, r3
 8003086:	f64e 2360 	movw	r3, #60000	; 0xea60
 800308a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f004 fd15 	bl	8007abc <HAL_HCD_PortEnabled_Callback>
 8003092:	e002      	b.n	800309a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f004 fd1f 	bl	8007ad8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d103      	bne.n	80030ac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f043 0320 	orr.w	r3, r3, #32
 80030aa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e12b      	b.n	800332a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fcce 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003124:	f001 fa20 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 8003128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a81      	ldr	r2, [pc, #516]	; (8003334 <HAL_I2C_Init+0x274>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d807      	bhi.n	8003144 <HAL_I2C_Init+0x84>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <HAL_I2C_Init+0x278>)
 8003138:	4293      	cmp	r3, r2
 800313a:	bf94      	ite	ls
 800313c:	2301      	movls	r3, #1
 800313e:	2300      	movhi	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e006      	b.n	8003152 <HAL_I2C_Init+0x92>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a7d      	ldr	r2, [pc, #500]	; (800333c <HAL_I2C_Init+0x27c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0e7      	b.n	800332a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a78      	ldr	r2, [pc, #480]	; (8003340 <HAL_I2C_Init+0x280>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0c9b      	lsrs	r3, r3, #18
 8003164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <HAL_I2C_Init+0x274>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d802      	bhi.n	8003194 <HAL_I2C_Init+0xd4>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3301      	adds	r3, #1
 8003192:	e009      	b.n	80031a8 <HAL_I2C_Init+0xe8>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	4a69      	ldr	r2, [pc, #420]	; (8003344 <HAL_I2C_Init+0x284>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3301      	adds	r3, #1
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	495c      	ldr	r1, [pc, #368]	; (8003334 <HAL_I2C_Init+0x274>)
 80031c4:	428b      	cmp	r3, r1
 80031c6:	d819      	bhi.n	80031fc <HAL_I2C_Init+0x13c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e59      	subs	r1, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031dc:	400b      	ands	r3, r1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_I2C_Init+0x138>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e59      	subs	r1, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	e051      	b.n	800329c <HAL_I2C_Init+0x1dc>
 80031f8:	2304      	movs	r3, #4
 80031fa:	e04f      	b.n	800329c <HAL_I2C_Init+0x1dc>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <HAL_I2C_Init+0x168>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e58      	subs	r0, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e012      	b.n	800324e <HAL_I2C_Init+0x18e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e58      	subs	r0, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	0099      	lsls	r1, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Init+0x196>
 8003252:	2301      	movs	r3, #1
 8003254:	e022      	b.n	800329c <HAL_I2C_Init+0x1dc>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10e      	bne.n	800327c <HAL_I2C_Init+0x1bc>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e58      	subs	r0, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	440b      	add	r3, r1
 800326c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003270:	3301      	adds	r3, #1
 8003272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327a:	e00f      	b.n	800329c <HAL_I2C_Init+0x1dc>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	0099      	lsls	r1, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6809      	ldr	r1, [r1, #0]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6911      	ldr	r1, [r2, #16]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	4311      	orrs	r1, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	000186a0 	.word	0x000186a0
 8003338:	001e847f 	.word	0x001e847f
 800333c:	003d08ff 	.word	0x003d08ff
 8003340:	431bde83 	.word	0x431bde83
 8003344:	10624dd3 	.word	0x10624dd3

08003348 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e128      	b.n	80035ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a90      	ldr	r2, [pc, #576]	; (80035b4 <HAL_I2S_Init+0x26c>)
 8003372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fd fbcf 	bl	8000b18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2202      	movs	r2, #2
 800339c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d060      	beq.n	8003468 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033ae:	2310      	movs	r3, #16
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e001      	b.n	80033b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033b4:	2320      	movs	r3, #32
 80033b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d802      	bhi.n	80033c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f001 f9c4 	bl	8004754 <HAL_RCCEx_GetPeriphCLKFreq>
 80033cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d6:	d125      	bne.n	8003424 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d010      	beq.n	8003402 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	461a      	mov	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	3305      	adds	r3, #5
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e01f      	b.n	8003442 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	fbb2 f2f3 	udiv	r2, r2, r3
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	3305      	adds	r3, #5
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	e00e      	b.n	8003442 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	fbb2 f2f3 	udiv	r2, r2, r3
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	461a      	mov	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	3305      	adds	r3, #5
 8003440:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4a5c      	ldr	r2, [pc, #368]	; (80035b8 <HAL_I2S_Init+0x270>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	08db      	lsrs	r3, r3, #3
 800344c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e003      	b.n	8003470 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003468:	2302      	movs	r3, #2
 800346a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d902      	bls.n	800347c <HAL_I2S_Init+0x134>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2bff      	cmp	r3, #255	; 0xff
 800347a:	d907      	bls.n	800348c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	f043 0210 	orr.w	r2, r3, #16
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e08f      	b.n	80035ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	ea42 0103 	orr.w	r1, r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	430a      	orrs	r2, r1
 800349e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034aa:	f023 030f 	bic.w	r3, r3, #15
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6851      	ldr	r1, [r2, #4]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68d2      	ldr	r2, [r2, #12]
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6992      	ldr	r2, [r2, #24]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d161      	bne.n	800359c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a38      	ldr	r2, [pc, #224]	; (80035bc <HAL_I2S_Init+0x274>)
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a37      	ldr	r2, [pc, #220]	; (80035c0 <HAL_I2S_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_I2S_Init+0x1a4>
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_I2S_Init+0x27c>)
 80034ea:	e001      	b.n	80034f0 <HAL_I2S_Init+0x1a8>
 80034ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4932      	ldr	r1, [pc, #200]	; (80035c0 <HAL_I2S_Init+0x278>)
 80034f8:	428a      	cmp	r2, r1
 80034fa:	d101      	bne.n	8003500 <HAL_I2S_Init+0x1b8>
 80034fc:	4a31      	ldr	r2, [pc, #196]	; (80035c4 <HAL_I2S_Init+0x27c>)
 80034fe:	e001      	b.n	8003504 <HAL_I2S_Init+0x1bc>
 8003500:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003504:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003508:	f023 030f 	bic.w	r3, r3, #15
 800350c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <HAL_I2S_Init+0x278>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_I2S_Init+0x1d4>
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_I2S_Init+0x27c>)
 800351a:	e001      	b.n	8003520 <HAL_I2S_Init+0x1d8>
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	2202      	movs	r2, #2
 8003522:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <HAL_I2S_Init+0x278>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_I2S_Init+0x1ea>
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_I2S_Init+0x27c>)
 8003530:	e001      	b.n	8003536 <HAL_I2S_Init+0x1ee>
 8003532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003542:	d003      	beq.n	800354c <HAL_I2S_Init+0x204>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800354c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e001      	b.n	8003558 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003562:	4313      	orrs	r3, r2
 8003564:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800356c:	4313      	orrs	r3, r2
 800356e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003576:	4313      	orrs	r3, r2
 8003578:	b29a      	uxth	r2, r3
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	4313      	orrs	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003584:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <HAL_I2S_Init+0x278>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d101      	bne.n	8003594 <HAL_I2S_Init+0x24c>
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_I2S_Init+0x27c>)
 8003592:	e001      	b.n	8003598 <HAL_I2S_Init+0x250>
 8003594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003598:	897a      	ldrh	r2, [r7, #10]
 800359a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	080036bf 	.word	0x080036bf
 80035b8:	cccccccd 	.word	0xcccccccd
 80035bc:	080037d5 	.word	0x080037d5
 80035c0:	40003800 	.word	0x40003800
 80035c4:	40003400 	.word	0x40003400

080035c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	881a      	ldrh	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c9a      	adds	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10e      	bne.n	8003658 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003648:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ffb8 	bl	80035c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	b292      	uxth	r2, r2
 8003674:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	1c9a      	adds	r2, r3, #2
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10e      	bne.n	80036b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff93 	bl	80035dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d13a      	bne.n	8003750 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d109      	bne.n	80036f8 <I2S_IRQHandler+0x3a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d102      	bne.n	80036f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffb4 	bl	8003660 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d126      	bne.n	8003750 <I2S_IRQHandler+0x92>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d11f      	bne.n	8003750 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800371e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f043 0202 	orr.w	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff50 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b03      	cmp	r3, #3
 800375a:	d136      	bne.n	80037ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d109      	bne.n	800377a <I2S_IRQHandler+0xbc>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d102      	bne.n	800377a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff45 	bl	8003604 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b08      	cmp	r3, #8
 8003782:	d122      	bne.n	80037ca <I2S_IRQHandler+0x10c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b20      	cmp	r3, #32
 8003790:	d11b      	bne.n	80037ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f043 0204 	orr.w	r2, r3, #4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff13 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a92      	ldr	r2, [pc, #584]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037ee:	4b92      	ldr	r3, [pc, #584]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f0:	e001      	b.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a8b      	ldr	r2, [pc, #556]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d101      	bne.n	8003810 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800380c:	4b8a      	ldr	r3, [pc, #552]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800380e:	e001      	b.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003820:	d004      	beq.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 8099 	bne.w	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d107      	bne.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f925 	bl	8003a90 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9c8 	bl	8003bf0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d13a      	bne.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d035      	beq.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a6e      	ldr	r2, [pc, #440]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800387e:	4b6e      	ldr	r3, [pc, #440]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003880:	e001      	b.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4969      	ldr	r1, [pc, #420]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388e:	428b      	cmp	r3, r1
 8003890:	d101      	bne.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003892:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003894:	e001      	b.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800389e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fe88 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	f040 80c3 	bne.w	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80bd 	beq.w	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003906:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a49      	ldr	r2, [pc, #292]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003912:	4b49      	ldr	r3, [pc, #292]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003914:	e001      	b.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4944      	ldr	r1, [pc, #272]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003922:	428b      	cmp	r3, r1
 8003924:	d101      	bne.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003926:	4b44      	ldr	r3, [pc, #272]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003928:	e001      	b.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800392a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003932:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003934:	2300      	movs	r3, #0
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f043 0204 	orr.w	r2, r3, #4
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fe4a 	bl	80035f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800395c:	e089      	b.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d107      	bne.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8be 	bl	8003af4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8fd 	bl	8003b8c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d12f      	bne.n	80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02a      	beq.n	80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039c2:	e001      	b.n	80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4919      	ldr	r1, [pc, #100]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039d4:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d6:	e001      	b.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fdfa 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d136      	bne.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d031      	beq.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a07      	ldr	r2, [pc, #28]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a1c:	e001      	b.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4902      	ldr	r1, [pc, #8]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a2a:	428b      	cmp	r3, r1
 8003a2c:	d106      	bne.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a2e:	4b02      	ldr	r3, [pc, #8]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a30:	e006      	b.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a32:	bf00      	nop
 8003a34:	40003800 	.word	0x40003800
 8003a38:	40003400 	.word	0x40003400
 8003a3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a44:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fdc0 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a70:	e000      	b.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a72:	bf00      	nop
}
 8003a74:	bf00      	nop
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c99      	adds	r1, r3, #2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6251      	str	r1, [r2, #36]	; 0x24
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d113      	bne.n	8003aea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ffc9 	bl	8003a7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c99      	adds	r1, r3, #2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6251      	str	r1, [r2, #36]	; 0x24
 8003b06:	8819      	ldrh	r1, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <I2SEx_TxISR_I2SExt+0x90>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d101      	bne.n	8003b16 <I2SEx_TxISR_I2SExt+0x22>
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <I2SEx_TxISR_I2SExt+0x94>)
 8003b14:	e001      	b.n	8003b1a <I2SEx_TxISR_I2SExt+0x26>
 8003b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d121      	bne.n	8003b7a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <I2SEx_TxISR_I2SExt+0x90>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <I2SEx_TxISR_I2SExt+0x50>
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <I2SEx_TxISR_I2SExt+0x94>)
 8003b42:	e001      	b.n	8003b48 <I2SEx_TxISR_I2SExt+0x54>
 8003b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	490d      	ldr	r1, [pc, #52]	; (8003b84 <I2SEx_TxISR_I2SExt+0x90>)
 8003b50:	428b      	cmp	r3, r1
 8003b52:	d101      	bne.n	8003b58 <I2SEx_TxISR_I2SExt+0x64>
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <I2SEx_TxISR_I2SExt+0x94>)
 8003b56:	e001      	b.n	8003b5c <I2SEx_TxISR_I2SExt+0x68>
 8003b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff81 	bl	8003a7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40003800 	.word	0x40003800
 8003b88:	40003400 	.word	0x40003400

08003b8c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68d8      	ldr	r0, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	1c99      	adds	r1, r3, #2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ba4:	b282      	uxth	r2, r0
 8003ba6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d113      	bne.n	8003be8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ff4a 	bl	8003a7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a20      	ldr	r2, [pc, #128]	; (8003c80 <I2SEx_RxISR_I2SExt+0x90>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <I2SEx_RxISR_I2SExt+0x16>
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <I2SEx_RxISR_I2SExt+0x94>)
 8003c04:	e001      	b.n	8003c0a <I2SEx_RxISR_I2SExt+0x1a>
 8003c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0a:	68d8      	ldr	r0, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	1c99      	adds	r1, r3, #2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c16:	b282      	uxth	r2, r0
 8003c18:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d121      	bne.n	8003c76 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <I2SEx_RxISR_I2SExt+0x90>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <I2SEx_RxISR_I2SExt+0x50>
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <I2SEx_RxISR_I2SExt+0x94>)
 8003c3e:	e001      	b.n	8003c44 <I2SEx_RxISR_I2SExt+0x54>
 8003c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	490d      	ldr	r1, [pc, #52]	; (8003c80 <I2SEx_RxISR_I2SExt+0x90>)
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	d101      	bne.n	8003c54 <I2SEx_RxISR_I2SExt+0x64>
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <I2SEx_RxISR_I2SExt+0x94>)
 8003c52:	e001      	b.n	8003c58 <I2SEx_RxISR_I2SExt+0x68>
 8003c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c5c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff03 	bl	8003a7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40003800 	.word	0x40003800
 8003c84:	40003400 	.word	0x40003400

08003c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e267      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d075      	beq.n	8003d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca6:	4b88      	ldr	r3, [pc, #544]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d00c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb2:	4b85      	ldr	r3, [pc, #532]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d112      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cbe:	4b82      	ldr	r3, [pc, #520]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	4b7e      	ldr	r3, [pc, #504]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05b      	beq.n	8003d90 <HAL_RCC_OscConfig+0x108>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d157      	bne.n	8003d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e242      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d106      	bne.n	8003cfc <HAL_RCC_OscConfig+0x74>
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a75      	ldr	r2, [pc, #468]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e01d      	b.n	8003d38 <HAL_RCC_OscConfig+0xb0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x98>
 8003d06:	4b70      	ldr	r3, [pc, #448]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6f      	ldr	r2, [pc, #444]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6c      	ldr	r2, [pc, #432]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0xb0>
 8003d20:	4b69      	ldr	r3, [pc, #420]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a68      	ldr	r2, [pc, #416]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a65      	ldr	r2, [pc, #404]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fd f8be 	bl	8000ec0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d48:	f7fd f8ba 	bl	8000ec0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e207      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0xc0>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd f8aa 	bl	8000ec0 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fd f8a6 	bl	8000ec0 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1f3      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	4b51      	ldr	r3, [pc, #324]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0xe8>
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d063      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9e:	4b4a      	ldr	r3, [pc, #296]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d11c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db6:	4b44      	ldr	r3, [pc, #272]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	4b41      	ldr	r3, [pc, #260]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_RCC_OscConfig+0x152>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e1c7      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4937      	ldr	r1, [pc, #220]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	e03a      	b.n	8003e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df8:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_RCC_OscConfig+0x244>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7fd f85f 	bl	8000ec0 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e06:	f7fd f85b 	bl	8000ec0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e1a8      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4925      	ldr	r1, [pc, #148]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_RCC_OscConfig+0x244>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fd f83e 	bl	8000ec0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e48:	f7fd f83a 	bl	8000ec0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e187      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d036      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_RCC_OscConfig+0x248>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fd f81e 	bl	8000ec0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e88:	f7fd f81a 	bl	8000ec0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e167      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x200>
 8003ea6:	e01b      	b.n	8003ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCC_OscConfig+0x248>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eae:	f7fd f807 	bl	8000ec0 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb4:	e00e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb6:	f7fd f803 	bl	8000ec0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d907      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e150      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	42470000 	.word	0x42470000
 8003ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ea      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8097 	beq.w	800401c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef2:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	4b7d      	ldr	r3, [pc, #500]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a7c      	ldr	r2, [pc, #496]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b7a      	ldr	r3, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1e:	4b77      	ldr	r3, [pc, #476]	; (80040fc <HAL_RCC_OscConfig+0x474>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d118      	bne.n	8003f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2a:	4b74      	ldr	r3, [pc, #464]	; (80040fc <HAL_RCC_OscConfig+0x474>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a73      	ldr	r2, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0x474>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f36:	f7fc ffc3 	bl	8000ec0 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3e:	f7fc ffbf 	bl	8000ec0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e10c      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <HAL_RCC_OscConfig+0x474>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x2ea>
 8003f64:	4b64      	ldr	r3, [pc, #400]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a63      	ldr	r2, [pc, #396]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	e01c      	b.n	8003fac <HAL_RCC_OscConfig+0x324>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x30c>
 8003f7a:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a5e      	ldr	r2, [pc, #376]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	4b5c      	ldr	r3, [pc, #368]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a5b      	ldr	r2, [pc, #364]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0x324>
 8003f94:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa0:	4b55      	ldr	r3, [pc, #340]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a54      	ldr	r2, [pc, #336]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f023 0304 	bic.w	r3, r3, #4
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb4:	f7fc ff84 	bl	8000ec0 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbc:	f7fc ff80 	bl	8000ec0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0cb      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd2:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0ee      	beq.n	8003fbc <HAL_RCC_OscConfig+0x334>
 8003fde:	e014      	b.n	800400a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe0:	f7fc ff6e 	bl	8000ec0 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fc ff6a 	bl	8000ec0 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0b5      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffe:	4b3e      	ldr	r3, [pc, #248]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1ee      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004010:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	4a38      	ldr	r2, [pc, #224]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8004016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a1 	beq.w	8004168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004026:	4b34      	ldr	r3, [pc, #208]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b08      	cmp	r3, #8
 8004030:	d05c      	beq.n	80040ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d141      	bne.n	80040be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b31      	ldr	r3, [pc, #196]	; (8004100 <HAL_RCC_OscConfig+0x478>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fc ff3e 	bl	8000ec0 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004048:	f7fc ff3a 	bl	8000ec0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e087      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	019b      	lsls	r3, r3, #6
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	085b      	lsrs	r3, r3, #1
 800407e:	3b01      	subs	r3, #1
 8004080:	041b      	lsls	r3, r3, #16
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	061b      	lsls	r3, r3, #24
 800408a:	491b      	ldr	r1, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x478>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fc ff13 	bl	8000ec0 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409e:	f7fc ff0f 	bl	8000ec0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e05c      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x416>
 80040bc:	e054      	b.n	8004168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCC_OscConfig+0x478>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fc fefc 	bl	8000ec0 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fc fef8 	bl	8000ec0 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e045      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x444>
 80040ea:	e03d      	b.n	8004168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e038      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40007000 	.word	0x40007000
 8004100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x4ec>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d028      	beq.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d121      	bne.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d11a      	bne.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004134:	4013      	ands	r3, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800413a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	3b01      	subs	r3, #1
 800414e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800

08004178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0cc      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b68      	ldr	r3, [pc, #416]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d90c      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b65      	ldr	r3, [pc, #404]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b63      	ldr	r3, [pc, #396]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0b8      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041cc:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a58      	ldr	r2, [pc, #352]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e4:	4b53      	ldr	r3, [pc, #332]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a52      	ldr	r2, [pc, #328]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b50      	ldr	r3, [pc, #320]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	494d      	ldr	r1, [pc, #308]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d044      	beq.n	8004298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d119      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e07f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d003      	beq.n	8004236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004232:	2b03      	cmp	r3, #3
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e067      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004256:	4b37      	ldr	r3, [pc, #220]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4934      	ldr	r1, [pc, #208]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004268:	f7fc fe2a 	bl	8000ec0 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fc fe26 	bl	8000ec0 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e04f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 020c 	and.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d1eb      	bne.n	8004270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d20c      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b22      	ldr	r3, [pc, #136]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b20      	ldr	r3, [pc, #128]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e032      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4916      	ldr	r1, [pc, #88]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	490e      	ldr	r1, [pc, #56]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042fe:	f000 f821 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8004302:	4602      	mov	r2, r0
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	490a      	ldr	r1, [pc, #40]	; (8004338 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	5ccb      	ldrb	r3, [r1, r3]
 8004312:	fa22 f303 	lsr.w	r3, r2, r3
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc fd8a 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023c00 	.word	0x40023c00
 8004334:	40023800 	.word	0x40023800
 8004338:	08008190 	.word	0x08008190
 800433c:	20000000 	.word	0x20000000
 8004340:	20000004 	.word	0x20000004

08004344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b094      	sub	sp, #80	; 0x50
 800434a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	647b      	str	r3, [r7, #68]	; 0x44
 8004350:	2300      	movs	r3, #0
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004354:	2300      	movs	r3, #0
 8004356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800435c:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b08      	cmp	r3, #8
 8004366:	d00d      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x40>
 8004368:	2b08      	cmp	r3, #8
 800436a:	f200 80e1 	bhi.w	8004530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x34>
 8004372:	2b04      	cmp	r3, #4
 8004374:	d003      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x3a>
 8004376:	e0db      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b73      	ldr	r3, [pc, #460]	; (8004548 <HAL_RCC_GetSysClockFreq+0x204>)
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800437c:	e0db      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800437e:	4b73      	ldr	r3, [pc, #460]	; (800454c <HAL_RCC_GetSysClockFreq+0x208>)
 8004380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004382:	e0d8      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004384:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d063      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439a:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	2200      	movs	r2, #0
 80043a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30
 80043ae:	2300      	movs	r3, #0
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34
 80043b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	f04f 0000 	mov.w	r0, #0
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	0159      	lsls	r1, r3, #5
 80043c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c8:	0150      	lsls	r0, r2, #5
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4621      	mov	r1, r4
 80043d0:	1a51      	subs	r1, r2, r1
 80043d2:	6139      	str	r1, [r7, #16]
 80043d4:	4629      	mov	r1, r5
 80043d6:	eb63 0301 	sbc.w	r3, r3, r1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e8:	4659      	mov	r1, fp
 80043ea:	018b      	lsls	r3, r1, #6
 80043ec:	4651      	mov	r1, sl
 80043ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043f2:	4651      	mov	r1, sl
 80043f4:	018a      	lsls	r2, r1, #6
 80043f6:	4651      	mov	r1, sl
 80043f8:	ebb2 0801 	subs.w	r8, r2, r1
 80043fc:	4659      	mov	r1, fp
 80043fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800440e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004416:	4690      	mov	r8, r2
 8004418:	4699      	mov	r9, r3
 800441a:	4623      	mov	r3, r4
 800441c:	eb18 0303 	adds.w	r3, r8, r3
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	462b      	mov	r3, r5
 8004424:	eb49 0303 	adc.w	r3, r9, r3
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004436:	4629      	mov	r1, r5
 8004438:	024b      	lsls	r3, r1, #9
 800443a:	4621      	mov	r1, r4
 800443c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004440:	4621      	mov	r1, r4
 8004442:	024a      	lsls	r2, r1, #9
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444a:	2200      	movs	r2, #0
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 800444e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004454:	f7fb feb8 	bl	80001c8 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004460:	e058      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	2200      	movs	r2, #0
 800446a:	4618      	mov	r0, r3
 800446c:	4611      	mov	r1, r2
 800446e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004472:	623b      	str	r3, [r7, #32]
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
 8004478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	f04f 0000 	mov.w	r0, #0
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	0159      	lsls	r1, r3, #5
 800448a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448e:	0150      	lsls	r0, r2, #5
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4641      	mov	r1, r8
 8004496:	ebb2 0a01 	subs.w	sl, r2, r1
 800449a:	4649      	mov	r1, r9
 800449c:	eb63 0b01 	sbc.w	fp, r3, r1
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044b4:	ebb2 040a 	subs.w	r4, r2, sl
 80044b8:	eb63 050b 	sbc.w	r5, r3, fp
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	00eb      	lsls	r3, r5, #3
 80044c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ca:	00e2      	lsls	r2, r4, #3
 80044cc:	4614      	mov	r4, r2
 80044ce:	461d      	mov	r5, r3
 80044d0:	4643      	mov	r3, r8
 80044d2:	18e3      	adds	r3, r4, r3
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	464b      	mov	r3, r9
 80044d8:	eb45 0303 	adc.w	r3, r5, r3
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ea:	4629      	mov	r1, r5
 80044ec:	028b      	lsls	r3, r1, #10
 80044ee:	4621      	mov	r1, r4
 80044f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044f4:	4621      	mov	r1, r4
 80044f6:	028a      	lsls	r2, r1, #10
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fe:	2200      	movs	r2, #0
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	61fa      	str	r2, [r7, #28]
 8004504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004508:	f7fb fe5e 	bl	80001c8 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4613      	mov	r3, r2
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	3301      	adds	r3, #1
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800452e:	e002      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetSysClockFreq+0x204>)
 8004532:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004538:	4618      	mov	r0, r3
 800453a:	3750      	adds	r7, #80	; 0x50
 800453c:	46bd      	mov	sp, r7
 800453e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	00f42400 	.word	0x00f42400
 800454c:	007a1200 	.word	0x007a1200

08004550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <HAL_RCC_GetHCLKFreq+0x14>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000000 	.word	0x20000000

08004568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800456c:	f7ff fff0 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	0a9b      	lsrs	r3, r3, #10
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4903      	ldr	r1, [pc, #12]	; (800458c <HAL_RCC_GetPCLK1Freq+0x24>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40023800 	.word	0x40023800
 800458c:	080081a0 	.word	0x080081a0

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d035      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045b8:	4b62      	ldr	r3, [pc, #392]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045be:	f7fc fc7f 	bl	8000ec0 <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045c6:	f7fc fc7b 	bl	8000ec0 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0b0      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045d8:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	019a      	lsls	r2, r3, #6
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	071b      	lsls	r3, r3, #28
 80045f0:	4955      	ldr	r1, [pc, #340]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045f8:	4b52      	ldr	r3, [pc, #328]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045fe:	f7fc fc5f 	bl	8000ec0 <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004606:	f7fc fc5b 	bl	8000ec0 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e090      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004618:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8083 	beq.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	4b44      	ldr	r3, [pc, #272]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	4a43      	ldr	r2, [pc, #268]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004640:	6413      	str	r3, [r2, #64]	; 0x40
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3e      	ldr	r2, [pc, #248]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800465a:	f7fc fc31 	bl	8000ec0 <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fc fc2d 	bl	8000ec0 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e062      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004680:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d02f      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	429a      	cmp	r2, r3
 800469c:	d028      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ae:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d114      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fc fbfb 	bl	8000ec0 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fc fbf7 	bl	8000ec0 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e02a      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ee      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fc:	d10d      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800470e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004712:	490d      	ldr	r1, [pc, #52]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]
 8004718:	e005      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004720:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004724:	6093      	str	r3, [r2, #8]
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004732:	4905      	ldr	r1, [pc, #20]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	42470068 	.word	0x42470068
 8004748:	40023800 	.word	0x40023800
 800474c:	40007000 	.word	0x40007000
 8004750:	42470e40 	.word	0x42470e40

08004754 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d13e      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d12f      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004788:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800478a:	617b      	str	r3, [r7, #20]
          break;
 800478c:	e02f      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d108      	bne.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a4:	4a18      	ldr	r2, [pc, #96]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e007      	b.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d8:	0f1b      	lsrs	r3, r3, #28
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
          break;
 80047e6:	e002      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
          break;
 80047ec:	bf00      	nop
        }
      }
      break;
 80047ee:	bf00      	nop
    }
  }
  return frequency;
 80047f0:	697b      	ldr	r3, [r7, #20]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	00bb8000 	.word	0x00bb8000
 8004808:	007a1200 	.word	0x007a1200
 800480c:	00f42400 	.word	0x00f42400

08004810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07b      	b.n	800491a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d108      	bne.n	800483c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004832:	d009      	beq.n	8004848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
 800483a:	e005      	b.n	8004848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fc f9d8 	bl	8000c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	ea42 0103 	orr.w	r1, r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0104 	and.w	r1, r3, #4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0210 	and.w	r2, r3, #16
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004908:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004922:	b084      	sub	sp, #16
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	f107 001c 	add.w	r0, r7, #28
 8004930:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	2b01      	cmp	r3, #1
 8004938:	d122      	bne.n	8004980 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800494e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f9bf 	bl	8004cf8 <USB_CoreReset>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	e01a      	b.n	80049b6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f9b3 	bl	8004cf8 <USB_CoreReset>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
 80049a8:	e005      	b.n	80049b6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10b      	bne.n	80049d4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f043 0206 	orr.w	r2, r3, #6
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049e0:	b004      	add	sp, #16
 80049e2:	4770      	bx	lr

080049e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f043 0201 	orr.w	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 0201 	bic.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d115      	bne.n	8004a76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f7fc fa3e 	bl	8000ed8 <HAL_Delay>
      ms++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f939 	bl	8004cda <USB_GetMode>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d01e      	beq.n	8004aac <USB_SetCurrentMode+0x84>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b31      	cmp	r3, #49	; 0x31
 8004a72:	d9f0      	bls.n	8004a56 <USB_SetCurrentMode+0x2e>
 8004a74:	e01a      	b.n	8004aac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d115      	bne.n	8004aa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f7fc fa25 	bl	8000ed8 <HAL_Delay>
      ms++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f920 	bl	8004cda <USB_GetMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <USB_SetCurrentMode+0x84>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b31      	cmp	r3, #49	; 0x31
 8004aa4:	d9f0      	bls.n	8004a88 <USB_SetCurrentMode+0x60>
 8004aa6:	e001      	b.n	8004aac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e005      	b.n	8004ab8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b32      	cmp	r3, #50	; 0x32
 8004ab0:	d101      	bne.n	8004ab6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <USB_FlushTxFifo+0x64>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e01b      	b.n	8004b18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	daf2      	bge.n	8004ace <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	019b      	lsls	r3, r3, #6
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a08      	ldr	r2, [pc, #32]	; (8004b24 <USB_FlushTxFifo+0x64>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e006      	b.n	8004b18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d0f0      	beq.n	8004af8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	00030d40 	.word	0x00030d40

08004b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <USB_FlushRxFifo+0x5c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e018      	b.n	8004b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	daf2      	bge.n	8004b34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2210      	movs	r2, #16
 8004b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <USB_FlushRxFifo+0x5c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e006      	b.n	8004b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d0f0      	beq.n	8004b58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	00030d40 	.word	0x00030d40

08004b88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b089      	sub	sp, #36	; 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4611      	mov	r1, r2
 8004b94:	461a      	mov	r2, r3
 8004b96:	460b      	mov	r3, r1
 8004b98:	71fb      	strb	r3, [r7, #7]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d123      	bne.n	8004bf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bae:	88bb      	ldrh	r3, [r7, #4]
 8004bb0:	3303      	adds	r3, #3
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	e018      	b.n	8004bee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	031a      	lsls	r2, r3, #12
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc8:	461a      	mov	r2, r3
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	3301      	adds	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d3e2      	bcc.n	8004bbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3724      	adds	r7, #36	; 0x24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b08b      	sub	sp, #44	; 0x2c
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	e014      	b.n	8004c5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	3301      	adds	r3, #1
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	3301      	adds	r3, #1
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	3301      	adds	r3, #1
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	3301      	adds	r3, #1
 8004c58:	623b      	str	r3, [r7, #32]
 8004c5a:	6a3a      	ldr	r2, [r7, #32]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d3e6      	bcc.n	8004c30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c62:	8bfb      	ldrh	r3, [r7, #30]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01e      	beq.n	8004ca6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c72:	461a      	mov	r2, r3
 8004c74:	f107 0310 	add.w	r3, r7, #16
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	701a      	strb	r2, [r3, #0]
      i++;
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	3301      	adds	r3, #1
 8004c92:	623b      	str	r3, [r7, #32]
      pDest++;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	3301      	adds	r3, #1
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004c9a:	8bfb      	ldrh	r3, [r7, #30]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ca0:	8bfb      	ldrh	r3, [r7, #30]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ea      	bne.n	8004c7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	372c      	adds	r7, #44	; 0x2c
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <USB_CoreReset+0x64>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e01b      	b.n	8004d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	daf2      	bge.n	8004d04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <USB_CoreReset+0x64>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e006      	b.n	8004d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d0f0      	beq.n	8004d2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	00030d40 	.word	0x00030d40

08004d60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d60:	b084      	sub	sp, #16
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b086      	sub	sp, #24
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d80:	461a      	mov	r2, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d10a      	bne.n	8004dd2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dca:	f043 0304 	orr.w	r3, r3, #4
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	e014      	b.n	8004dfc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e009      	b.n	8004dfc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004df6:	f023 0304 	bic.w	r3, r3, #4
 8004dfa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dfc:	2110      	movs	r1, #16
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fe5e 	bl	8004ac0 <USB_FlushTxFifo>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fe8a 	bl	8004b28 <USB_FlushRxFifo>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e015      	b.n	8004e50 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	461a      	mov	r2, r3
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295
 8004e36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	461a      	mov	r2, r3
 8004e46:	2300      	movs	r3, #0
 8004e48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d3e5      	bcc.n	8004e24 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f04f 32ff 	mov.w	r2, #4294967295
 8004e64:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00b      	beq.n	8004e8a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <USB_HostInit+0x16c>)
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <USB_HostInit+0x170>)
 8004e84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004e88:	e009      	b.n	8004e9e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <USB_HostInit+0x174>)
 8004e94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <USB_HostInit+0x178>)
 8004e9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f043 0210 	orr.w	r2, r3, #16
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <USB_HostInit+0x17c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ec8:	b004      	add	sp, #16
 8004eca:	4770      	bx	lr
 8004ecc:	01000200 	.word	0x01000200
 8004ed0:	00e00300 	.word	0x00e00300
 8004ed4:	00600080 	.word	0x00600080
 8004ed8:	004000e0 	.word	0x004000e0
 8004edc:	a3200008 	.word	0xa3200008

08004ee0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	68f9      	ldr	r1, [r7, #12]
 8004f14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f2e:	6053      	str	r3, [r2, #4]
 8004f30:	e009      	b.n	8004f46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d106      	bne.n	8004f46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f241 7370 	movw	r3, #6000	; 0x1770
 8004f44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004f84:	2064      	movs	r0, #100	; 0x64
 8004f86:	f7fb ffa7 	bl	8000ed8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004f98:	200a      	movs	r0, #10
 8004f9a:	f7fb ff9d 	bl	8000ed8 <HAL_Delay>

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <USB_DriveVbus+0x44>
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d106      	bne.n	8004fec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d109      	bne.n	800500c <USB_DriveVbus+0x64>
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	0c5b      	lsrs	r3, r3, #17
 8005038:	f003 0303 	and.w	r3, r3, #3
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	b29b      	uxth	r3, r3
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	4603      	mov	r3, r0
 800507c:	70fb      	strb	r3, [r7, #3]
 800507e:	460b      	mov	r3, r1
 8005080:	70bb      	strb	r3, [r7, #2]
 8005082:	4613      	mov	r3, r2
 8005084:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	461a      	mov	r2, r3
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80050a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d87e      	bhi.n	80051a8 <USB_HC_Init+0x13c>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <USB_HC_Init+0x44>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	0800516b 	.word	0x0800516b
 80050b8:	080050c1 	.word	0x080050c1
 80050bc:	0800512d 	.word	0x0800512d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050cc:	461a      	mov	r2, r3
 80050ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80050d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80050d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	da10      	bge.n	80050fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80050fc:	e057      	b.n	80051ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d051      	beq.n	80051ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	78fa      	ldrb	r2, [r7, #3]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005124:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005128:	60d3      	str	r3, [r2, #12]
      break;
 800512a:	e040      	b.n	80051ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	461a      	mov	r2, r3
 800513a:	f240 639d 	movw	r3, #1693	; 0x69d
 800513e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005140:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005144:	2b00      	cmp	r3, #0
 8005146:	da34      	bge.n	80051b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	440a      	add	r2, r1
 800515e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005166:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005168:	e023      	b.n	80051b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4413      	add	r3, r2
 8005172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005176:	461a      	mov	r2, r3
 8005178:	f240 2325 	movw	r3, #549	; 0x225
 800517c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800517e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da17      	bge.n	80051b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	440a      	add	r2, r1
 800519c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80051a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80051a6:	e006      	b.n	80051b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	77fb      	strb	r3, [r7, #31]
      break;
 80051ac:	e004      	b.n	80051b8 <USB_HC_Init+0x14c>
      break;
 80051ae:	bf00      	nop
 80051b0:	e002      	b.n	80051b8 <USB_HC_Init+0x14c>
      break;
 80051b2:	bf00      	nop
 80051b4:	e000      	b.n	80051b8 <USB_HC_Init+0x14c>
      break;
 80051b6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d2:	f043 0302 	orr.w	r3, r3, #2
 80051d6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	2101      	movs	r1, #1
 80051e8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ec:	6939      	ldr	r1, [r7, #16]
 80051ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051f2:	4313      	orrs	r3, r2
 80051f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005202:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005206:	2b00      	cmp	r3, #0
 8005208:	da03      	bge.n	8005212 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	e001      	b.n	8005216 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff feff 	bl	800501a <USB_GetHostSpeed>
 800521c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800521e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005222:	2b02      	cmp	r3, #2
 8005224:	d106      	bne.n	8005234 <USB_HC_Init+0x1c8>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d003      	beq.n	8005234 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800522c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e001      	b.n	8005238 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005238:	787b      	ldrb	r3, [r7, #1]
 800523a:	059b      	lsls	r3, r3, #22
 800523c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005240:	78bb      	ldrb	r3, [r7, #2]
 8005242:	02db      	lsls	r3, r3, #11
 8005244:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005248:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800524a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800524e:	049b      	lsls	r3, r3, #18
 8005250:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005254:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005256:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005258:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800525c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	0159      	lsls	r1, r3, #5
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	440b      	add	r3, r1
 800526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005274:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005276:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800527a:	2b03      	cmp	r3, #3
 800527c:	d003      	beq.n	8005286 <USB_HC_Init+0x21a>
 800527e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10f      	bne.n	80052a6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	78fa      	ldrb	r2, [r7, #3]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	440a      	add	r2, r1
 800529c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80052a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	; 0x30
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80052c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d02d      	beq.n	8005336 <USB_HC_StartXfer+0x86>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	791b      	ldrb	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d129      	bne.n	8005336 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d117      	bne.n	8005318 <USB_HC_StartXfer+0x68>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	79db      	ldrb	r3, [r3, #7]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <USB_HC_StartXfer+0x48>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	79db      	ldrb	r3, [r3, #7]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d10f      	bne.n	8005318 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	6a3a      	ldr	r2, [r7, #32]
 800530c:	440a      	add	r2, r1
 800530e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005316:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <USB_HC_StartXfer+0x86>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	795b      	ldrb	r3, [r3, #5]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d107      	bne.n	8005336 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	4619      	mov	r1, r3
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fa0f 	bl	8005750 <USB_DoPing>
      return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e0f8      	b.n	8005528 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d018      	beq.n	8005370 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	8912      	ldrh	r2, [r2, #8]
 8005346:	4413      	add	r3, r2
 8005348:	3b01      	subs	r3, #1
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	8912      	ldrh	r2, [r2, #8]
 800534e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005352:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005354:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005356:	8b7b      	ldrh	r3, [r7, #26]
 8005358:	429a      	cmp	r2, r3
 800535a:	d90b      	bls.n	8005374 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800535c:	8b7b      	ldrh	r3, [r7, #26]
 800535e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	8912      	ldrh	r2, [r2, #8]
 8005366:	fb03 f202 	mul.w	r2, r3, r2
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	611a      	str	r2, [r3, #16]
 800536e:	e001      	b.n	8005374 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005370:	2301      	movs	r3, #1
 8005372:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	78db      	ldrb	r3, [r3, #3]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800537c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	8912      	ldrh	r2, [r2, #8]
 8005382:	fb03 f202 	mul.w	r2, r3, r2
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	611a      	str	r2, [r3, #16]
 800538a:	e003      	b.n	8005394 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800539c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800539e:	04d9      	lsls	r1, r3, #19
 80053a0:	4b63      	ldr	r3, [pc, #396]	; (8005530 <USB_HC_StartXfer+0x280>)
 80053a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	7a9b      	ldrb	r3, [r3, #10]
 80053aa:	075b      	lsls	r3, r3, #29
 80053ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053b0:	69f9      	ldr	r1, [r7, #28]
 80053b2:	0148      	lsls	r0, r1, #5
 80053b4:	6a39      	ldr	r1, [r7, #32]
 80053b6:	4401      	add	r1, r0
 80053b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	68d9      	ldr	r1, [r3, #12]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	460a      	mov	r2, r1
 80053d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	440a      	add	r2, r1
 8005408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800540c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005410:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	7e7b      	ldrb	r3, [r7, #25]
 8005422:	075b      	lsls	r3, r3, #29
 8005424:	69f9      	ldr	r1, [r7, #28]
 8005426:	0148      	lsls	r0, r1, #5
 8005428:	6a39      	ldr	r1, [r7, #32]
 800542a:	4401      	add	r1, r0
 800542c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800544a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	78db      	ldrb	r3, [r3, #3]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	e003      	b.n	8005466 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005464:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800546c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547a:	461a      	mov	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e04e      	b.n	8005528 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	78db      	ldrb	r3, [r3, #3]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d149      	bne.n	8005526 <USB_HC_StartXfer+0x276>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d045      	beq.n	8005526 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	79db      	ldrb	r3, [r3, #7]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d830      	bhi.n	8005504 <USB_HC_StartXfer+0x254>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <USB_HC_StartXfer+0x1f8>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054dd 	.word	0x080054dd
 80054b0:	080054b9 	.word	0x080054b9
 80054b4:	080054dd 	.word	0x080054dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	3303      	adds	r3, #3
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80054c2:	8afa      	ldrh	r2, [r7, #22]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d91c      	bls.n	8005508 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80054da:	e015      	b.n	8005508 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	3303      	adds	r3, #3
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80054e6:	8afa      	ldrh	r2, [r7, #22]
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d90a      	bls.n	800550c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	619a      	str	r2, [r3, #24]
        }
        break;
 8005502:	e003      	b.n	800550c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005504:	bf00      	nop
 8005506:	e002      	b.n	800550e <USB_HC_StartXfer+0x25e>
        break;
 8005508:	bf00      	nop
 800550a:	e000      	b.n	800550e <USB_HC_StartXfer+0x25e>
        break;
 800550c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	68d9      	ldr	r1, [r3, #12]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	785a      	ldrb	r2, [r3, #1]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	b29b      	uxth	r3, r3
 800551c:	2000      	movs	r0, #0
 800551e:	9000      	str	r0, [sp, #0]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff fb31 	bl	8004b88 <USB_WritePacket>
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	; 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	1ff80000 	.word	0x1ff80000

08005534 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	b29b      	uxth	r3, r3
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005556:	b480      	push	{r7}
 8005558:	b089      	sub	sp, #36	; 0x24
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	0c9b      	lsrs	r3, r3, #18
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	0fdb      	lsrs	r3, r3, #31
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d104      	bne.n	80055b0 <USB_HC_Halt+0x5a>
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e0c8      	b.n	8005742 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <USB_HC_Halt+0x66>
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d163      	bne.n	8005684 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f040 80ab 	bne.w	8005740 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d133      	bne.n	800565e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	440a      	add	r2, r1
 800560c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005614:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	440a      	add	r2, r1
 800562c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005634:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3301      	adds	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005642:	d81d      	bhi.n	8005680 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800565a:	d0ec      	beq.n	8005636 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800565c:	e070      	b.n	8005740 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	440a      	add	r2, r1
 8005674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800567c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800567e:	e05f      	b.n	8005740 <USB_HC_Halt+0x1ea>
            break;
 8005680:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005682:	e05d      	b.n	8005740 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	440a      	add	r2, r1
 800569a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d133      	bne.n	800571c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005700:	d81d      	bhi.n	800573e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005718:	d0ec      	beq.n	80056f4 <USB_HC_Halt+0x19e>
 800571a:	e011      	b.n	8005740 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	0151      	lsls	r1, r2, #5
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	440a      	add	r2, r1
 8005732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	e000      	b.n	8005740 <USB_HC_Halt+0x1ea>
          break;
 800573e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3724      	adds	r7, #36	; 0x24
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005764:	2301      	movs	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	04da      	lsls	r2, r3, #19
 800576c:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <USB_DoPing+0x74>)
 800576e:	4013      	ands	r3, r2
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	440a      	add	r2, r1
 8005778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800577c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005780:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005798:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	461a      	mov	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	1ff80000 	.word	0x1ff80000

080057c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff f912 	bl	8004a06 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057e2:	2110      	movs	r1, #16
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff f96b 	bl	8004ac0 <USB_FlushTxFifo>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff f997 	bl	8004b28 <USB_FlushRxFifo>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e01f      	b.n	800584a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005820:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005828:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005830:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	461a      	mov	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	3301      	adds	r3, #1
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b0f      	cmp	r3, #15
 800584e:	d9dc      	bls.n	800580a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e034      	b.n	80058c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800586c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005874:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800587c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	4413      	add	r3, r2
 8005886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588a:	461a      	mov	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589c:	d80c      	bhi.n	80058b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b4:	d0ec      	beq.n	8005890 <USB_StopHost+0xc8>
 80058b6:	e000      	b.n	80058ba <USB_StopHost+0xf2>
        break;
 80058b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	3301      	adds	r3, #1
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b0f      	cmp	r3, #15
 80058c4:	d9c7      	bls.n	8005856 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058cc:	461a      	mov	r2, r3
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
 80058d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f04f 32ff 	mov.w	r2, #4294967295
 80058da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff f881 	bl	80049e4 <USB_EnableGlobalInt>

  return ret;
 80058e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80058ec:	b590      	push	{r4, r7, lr}
 80058ee:	b089      	sub	sp, #36	; 0x24
 80058f0:	af04      	add	r7, sp, #16
 80058f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80058f4:	2301      	movs	r3, #1
 80058f6:	2202      	movs	r2, #2
 80058f8:	2102      	movs	r1, #2
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fc66 	bl	80061cc <USBH_FindInterface>
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2bff      	cmp	r3, #255	; 0xff
 8005908:	d002      	beq.n	8005910 <USBH_CDC_InterfaceInit+0x24>
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d901      	bls.n	8005914 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005910:	2302      	movs	r3, #2
 8005912:	e13d      	b.n	8005b90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fc3b 	bl	8006194 <USBH_SelectInterface>
 800591e:	4603      	mov	r3, r0
 8005920:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005928:	2302      	movs	r3, #2
 800592a:	e131      	b.n	8005b90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005932:	2050      	movs	r0, #80	; 0x50
 8005934:	f002 fad2 	bl	8007edc <malloc>
 8005938:	4603      	mov	r3, r0
 800593a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800594c:	2302      	movs	r3, #2
 800594e:	e11f      	b.n	8005b90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005950:	2250      	movs	r2, #80	; 0x50
 8005952:	2100      	movs	r1, #0
 8005954:	68b8      	ldr	r0, [r7, #8]
 8005956:	f002 fb7d 	bl	8008054 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	211a      	movs	r1, #26
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	4413      	add	r3, r2
 8005966:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	b25b      	sxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	da15      	bge.n	800599e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	211a      	movs	r1, #26
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	4413      	add	r3, r2
 800597e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	211a      	movs	r1, #26
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	4413      	add	r3, r2
 8005994:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005998:	881a      	ldrh	r2, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 ff2e 	bl	8007806 <USBH_AllocPipe>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	7819      	ldrb	r1, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	7858      	ldrb	r0, [r3, #1]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	8952      	ldrh	r2, [r2, #10]
 80059ca:	9202      	str	r2, [sp, #8]
 80059cc:	2203      	movs	r2, #3
 80059ce:	9201      	str	r2, [sp, #4]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	4623      	mov	r3, r4
 80059d4:	4602      	mov	r2, r0
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fee6 	bl	80077a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2200      	movs	r2, #0
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f002 f9f5 	bl	8007dd4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80059ea:	2300      	movs	r3, #0
 80059ec:	2200      	movs	r2, #0
 80059ee:	210a      	movs	r1, #10
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fbeb 	bl	80061cc <USBH_FindInterface>
 80059f6:	4603      	mov	r3, r0
 80059f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	2bff      	cmp	r3, #255	; 0xff
 80059fe:	d002      	beq.n	8005a06 <USBH_CDC_InterfaceInit+0x11a>
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d901      	bls.n	8005a0a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a06:	2302      	movs	r3, #2
 8005a08:	e0c2      	b.n	8005b90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	211a      	movs	r1, #26
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
 8005a14:	4413      	add	r3, r2
 8005a16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	da16      	bge.n	8005a50 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	211a      	movs	r1, #26
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	211a      	movs	r1, #26
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	835a      	strh	r2, [r3, #26]
 8005a4e:	e015      	b.n	8005a7c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	211a      	movs	r1, #26
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	211a      	movs	r1, #26
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a76:	881a      	ldrh	r2, [r3, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	211a      	movs	r1, #26
 8005a82:	fb01 f303 	mul.w	r3, r1, r3
 8005a86:	4413      	add	r3, r2
 8005a88:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	b25b      	sxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da16      	bge.n	8005ac2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	211a      	movs	r1, #26
 8005a9a:	fb01 f303 	mul.w	r3, r1, r3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	211a      	movs	r1, #26
 8005ab0:	fb01 f303 	mul.w	r3, r1, r3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	835a      	strh	r2, [r3, #26]
 8005ac0:	e015      	b.n	8005aee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	211a      	movs	r1, #26
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	211a      	movs	r1, #26
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ae8:	881a      	ldrh	r2, [r3, #0]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	7b9b      	ldrb	r3, [r3, #14]
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fe86 	bl	8007806 <USBH_AllocPipe>
 8005afa:	4603      	mov	r3, r0
 8005afc:	461a      	mov	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	7bdb      	ldrb	r3, [r3, #15]
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fe7c 	bl	8007806 <USBH_AllocPipe>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	461a      	mov	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	7b59      	ldrb	r1, [r3, #13]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	7b98      	ldrb	r0, [r3, #14]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	8b12      	ldrh	r2, [r2, #24]
 8005b2e:	9202      	str	r2, [sp, #8]
 8005b30:	2202      	movs	r2, #2
 8005b32:	9201      	str	r2, [sp, #4]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	4623      	mov	r3, r4
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 fe34 	bl	80077a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	7b19      	ldrb	r1, [r3, #12]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	7bd8      	ldrb	r0, [r3, #15]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	8b52      	ldrh	r2, [r2, #26]
 8005b58:	9202      	str	r2, [sp, #8]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	9201      	str	r2, [sp, #4]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	4623      	mov	r3, r4
 8005b62:	4602      	mov	r2, r0
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fe1f 	bl	80077a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	7b5b      	ldrb	r3, [r3, #13]
 8005b76:	2200      	movs	r2, #0
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f002 f92a 	bl	8007dd4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	7b1b      	ldrb	r3, [r3, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f002 f923 	bl	8007dd4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd90      	pop	{r4, r7, pc}

08005b98 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 fe14 	bl	80077e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 fe3f 	bl	8007848 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	7b1b      	ldrb	r3, [r3, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00e      	beq.n	8005bf6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	7b1b      	ldrb	r3, [r3, #12]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fe01 	bl	80077e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	7b1b      	ldrb	r3, [r3, #12]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fe2c 	bl	8007848 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	7b5b      	ldrb	r3, [r3, #13]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00e      	beq.n	8005c1c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	7b5b      	ldrb	r3, [r3, #13]
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 fdee 	bl	80077e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	7b5b      	ldrb	r3, [r3, #13]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fe19 	bl	8007848 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f002 f95b 	bl	8007eec <free>
    phost->pActiveClass->pData = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3340      	adds	r3, #64	; 0x40
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f8b1 	bl	8005dca <GetLineCoding>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005c6c:	7afb      	ldrb	r3, [r7, #11]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d105      	bne.n	8005c7e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c78:	2102      	movs	r1, #2
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d877      	bhi.n	8005d9c <USBH_CDC_Process+0x114>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <USBH_CDC_Process+0x2c>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005cc9 	.word	0x08005cc9
 8005cb8:	08005ccf 	.word	0x08005ccf
 8005cbc:	08005cff 	.word	0x08005cff
 8005cc0:	08005d73 	.word	0x08005d73
 8005cc4:	08005d81 	.word	0x08005d81
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ccc:	e06d      	b.n	8005daa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f897 	bl	8005e08 <SetLineCoding>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005cec:	e058      	b.n	8005da0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d055      	beq.n	8005da0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005cfc:	e050      	b.n	8005da0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	3340      	adds	r3, #64	; 0x40
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f860 	bl	8005dca <GetLineCoding>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d126      	bne.n	8005d62 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d26:	791b      	ldrb	r3, [r3, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d13b      	bne.n	8005da4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d36:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d133      	bne.n	8005da4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d46:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d12b      	bne.n	8005da4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d54:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d124      	bne.n	8005da4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f958 	bl	8006010 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005d60:	e020      	b.n	8005da4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d01d      	beq.n	8005da4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005d70:	e018      	b.n	8005da4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f867 	bl	8005e46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f8da 	bl	8005f32 <CDC_ProcessReception>
      break;
 8005d7e:	e014      	b.n	8005daa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005d80:	2100      	movs	r1, #0
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 ffef 	bl	8006d66 <USBH_ClrFeature>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005d9a:	e005      	b.n	8005da8 <USBH_CDC_Process+0x120>

    default:
      break;
 8005d9c:	bf00      	nop
 8005d9e:	e004      	b.n	8005daa <USBH_CDC_Process+0x122>
      break;
 8005da0:	bf00      	nop
 8005da2:	e002      	b.n	8005daa <USBH_CDC_Process+0x122>
      break;
 8005da4:	bf00      	nop
 8005da6:	e000      	b.n	8005daa <USBH_CDC_Process+0x122>
      break;
 8005da8:	bf00      	nop

  }

  return status;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	22a1      	movs	r2, #161	; 0xa1
 8005dd8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2221      	movs	r2, #33	; 0x21
 8005dde:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2207      	movs	r2, #7
 8005df0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2207      	movs	r2, #7
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f001 fa83 	bl	8007304 <USBH_CtlReq>
 8005dfe:	4603      	mov	r3, r0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2221      	movs	r2, #33	; 0x21
 8005e16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2207      	movs	r2, #7
 8005e2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2207      	movs	r2, #7
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fa64 	bl	8007304 <USBH_CtlReq>
 8005e3c:	4603      	mov	r3, r0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b086      	sub	sp, #24
 8005e4a:	af02      	add	r7, sp, #8
 8005e4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d002      	beq.n	8005e6c <CDC_ProcessTransmission+0x26>
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d023      	beq.n	8005eb2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005e6a:	e05e      	b.n	8005f2a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	8b12      	ldrh	r2, [r2, #24]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d90b      	bls.n	8005e90 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	69d9      	ldr	r1, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8b1a      	ldrh	r2, [r3, #24]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	7b5b      	ldrb	r3, [r3, #13]
 8005e84:	2001      	movs	r0, #1
 8005e86:	9000      	str	r0, [sp, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 fc4a 	bl	8007722 <USBH_BulkSendData>
 8005e8e:	e00b      	b.n	8005ea8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	7b5b      	ldrb	r3, [r3, #13]
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	9000      	str	r0, [sp, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 fc3d 	bl	8007722 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005eb0:	e03b      	b.n	8005f2a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	7b5b      	ldrb	r3, [r3, #13]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 ff61 	bl	8007d80 <USBH_LL_GetURBState>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d128      	bne.n	8005f1a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	8b12      	ldrh	r2, [r2, #24]
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d90e      	bls.n	8005ef2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	8b12      	ldrh	r2, [r2, #24]
 8005edc:	1a9a      	subs	r2, r3, r2
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	8b12      	ldrh	r2, [r2, #24]
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	61da      	str	r2, [r3, #28]
 8005ef0:	e002      	b.n	8005ef8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f08:	e00e      	b.n	8005f28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f868 	bl	8005fe8 <USBH_CDC_TransmitCallback>
      break;
 8005f18:	e006      	b.n	8005f28 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d103      	bne.n	8005f28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f28:	bf00      	nop
  }
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b086      	sub	sp, #24
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d002      	beq.n	8005f58 <CDC_ProcessReception+0x26>
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d00e      	beq.n	8005f74 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005f56:	e043      	b.n	8005fe0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	6a19      	ldr	r1, [r3, #32]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	8b5a      	ldrh	r2, [r3, #26]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	7b1b      	ldrb	r3, [r3, #12]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f001 fc01 	bl	800776c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005f72:	e035      	b.n	8005fe0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	7b1b      	ldrb	r3, [r3, #12]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 ff00 	bl	8007d80 <USBH_LL_GetURBState>
 8005f80:	4603      	mov	r3, r0
 8005f82:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005f84:	7cfb      	ldrb	r3, [r7, #19]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d129      	bne.n	8005fde <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	7b1b      	ldrb	r3, [r3, #12]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 fe63 	bl	8007c5c <USBH_LL_GetLastXferSize>
 8005f96:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d016      	beq.n	8005fd0 <CDC_ProcessReception+0x9e>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	8b5b      	ldrh	r3, [r3, #26]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d910      	bls.n	8005fd0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2203      	movs	r2, #3
 8005fca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005fce:	e006      	b.n	8005fde <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f80f 	bl	8005ffc <USBH_CDC_ReceiveCallback>
      break;
 8005fde:	bf00      	nop
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006038:	2302      	movs	r3, #2
 800603a:	e029      	b.n	8006090 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	79fa      	ldrb	r2, [r7, #7]
 8006040:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f81f 	bl	8006098 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f001 fd33 	bl	8007af4 <USBH_LL_Init>

  return USBH_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	e009      	b.n	80060be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	33e0      	adds	r3, #224	; 0xe0
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	2200      	movs	r2, #0
 80060b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b0f      	cmp	r3, #15
 80060c2:	d9f2      	bls.n	80060aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e009      	b.n	80060de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3301      	adds	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e4:	d3f1      	bcc.n	80060ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d016      	beq.n	8006182 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10e      	bne.n	800617c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006164:	1c59      	adds	r1, r3, #1
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	33de      	adds	r3, #222	; 0xde
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
 800617a:	e004      	b.n	8006186 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800617c:	2302      	movs	r3, #2
 800617e:	73fb      	strb	r3, [r7, #15]
 8006180:	e001      	b.n	8006186 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006182:	2302      	movs	r3, #2
 8006184:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d204      	bcs.n	80061ba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80061b8:	e001      	b.n	80061be <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80061ba:	2302      	movs	r3, #2
 80061bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	4608      	mov	r0, r1
 80061d6:	4611      	mov	r1, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	4603      	mov	r3, r0
 80061dc:	70fb      	strb	r3, [r7, #3]
 80061de:	460b      	mov	r3, r1
 80061e0:	70bb      	strb	r3, [r7, #2]
 80061e2:	4613      	mov	r3, r2
 80061e4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80061f4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80061f6:	e025      	b.n	8006244 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	221a      	movs	r2, #26
 80061fc:	fb02 f303 	mul.w	r3, r2, r3
 8006200:	3308      	adds	r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	3302      	adds	r3, #2
 8006208:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	795b      	ldrb	r3, [r3, #5]
 800620e:	78fa      	ldrb	r2, [r7, #3]
 8006210:	429a      	cmp	r2, r3
 8006212:	d002      	beq.n	800621a <USBH_FindInterface+0x4e>
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	2bff      	cmp	r3, #255	; 0xff
 8006218:	d111      	bne.n	800623e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800621e:	78ba      	ldrb	r2, [r7, #2]
 8006220:	429a      	cmp	r2, r3
 8006222:	d002      	beq.n	800622a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006224:	78bb      	ldrb	r3, [r7, #2]
 8006226:	2bff      	cmp	r3, #255	; 0xff
 8006228:	d109      	bne.n	800623e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800622e:	787a      	ldrb	r2, [r7, #1]
 8006230:	429a      	cmp	r2, r3
 8006232:	d002      	beq.n	800623a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006234:	787b      	ldrb	r3, [r7, #1]
 8006236:	2bff      	cmp	r3, #255	; 0xff
 8006238:	d101      	bne.n	800623e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	e006      	b.n	800624c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	3301      	adds	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d9d6      	bls.n	80061f8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800624a:	23ff      	movs	r3, #255	; 0xff
}
 800624c:	4618      	mov	r0, r3
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fc83 	bl	8007b6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006266:	2101      	movs	r1, #1
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 fd9c 	bl	8007da6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af04      	add	r7, sp, #16
 800627e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006280:	2302      	movs	r3, #2
 8006282:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d102      	bne.n	800629a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2203      	movs	r2, #3
 8006298:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b0b      	cmp	r3, #11
 80062a2:	f200 81be 	bhi.w	8006622 <USBH_Process+0x3aa>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <USBH_Process+0x34>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	0800630f 	.word	0x0800630f
 80062b4:	08006377 	.word	0x08006377
 80062b8:	080065bd 	.word	0x080065bd
 80062bc:	08006623 	.word	0x08006623
 80062c0:	0800641b 	.word	0x0800641b
 80062c4:	08006563 	.word	0x08006563
 80062c8:	08006451 	.word	0x08006451
 80062cc:	08006471 	.word	0x08006471
 80062d0:	08006491 	.word	0x08006491
 80062d4:	080064d5 	.word	0x080064d5
 80062d8:	080065a5 	.word	0x080065a5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 819e 	beq.w	8006626 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80062f0:	20c8      	movs	r0, #200	; 0xc8
 80062f2:	f001 fd9f 	bl	8007e34 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fc95 	bl	8007c26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800630c:	e18b      	b.n	8006626 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006314:	2b01      	cmp	r3, #1
 8006316:	d107      	bne.n	8006328 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006326:	e18d      	b.n	8006644 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800632e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006332:	d914      	bls.n	800635e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800633a:	3301      	adds	r3, #1
 800633c:	b2da      	uxtb	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800634a:	2b03      	cmp	r3, #3
 800634c:	d903      	bls.n	8006356 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	220d      	movs	r2, #13
 8006352:	701a      	strb	r2, [r3, #0]
      break;
 8006354:	e176      	b.n	8006644 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	701a      	strb	r2, [r3, #0]
      break;
 800635c:	e172      	b.n	8006644 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006364:	f103 020a 	add.w	r2, r3, #10
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800636e:	200a      	movs	r0, #10
 8006370:	f001 fd60 	bl	8007e34 <USBH_Delay>
      break;
 8006374:	e166      	b.n	8006644 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006386:	2104      	movs	r1, #4
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800638c:	2064      	movs	r0, #100	; 0x64
 800638e:	f001 fd51 	bl	8007e34 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fc20 	bl	8007bd8 <USBH_LL_GetSpeed>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2205      	movs	r2, #5
 80063a6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80063a8:	2100      	movs	r1, #0
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fa2b 	bl	8007806 <USBH_AllocPipe>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 fa23 	bl	8007806 <USBH_AllocPipe>
 80063c0:	4603      	mov	r3, r0
 80063c2:	461a      	mov	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	7919      	ldrb	r1, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80063dc:	b292      	uxth	r2, r2
 80063de:	9202      	str	r2, [sp, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	9201      	str	r2, [sp, #4]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	4603      	mov	r3, r0
 80063e8:	2280      	movs	r2, #128	; 0x80
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 f9dc 	bl	80077a8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	7959      	ldrb	r1, [r3, #5]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006404:	b292      	uxth	r2, r2
 8006406:	9202      	str	r2, [sp, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	9201      	str	r2, [sp, #4]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	4603      	mov	r3, r0
 8006410:	2200      	movs	r2, #0
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f9c8 	bl	80077a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006418:	e114      	b.n	8006644 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f918 	bl	8006650 <USBH_HandleEnum>
 8006420:	4603      	mov	r3, r0
 8006422:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	f040 80fe 	bne.w	800662a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800643c:	2b01      	cmp	r3, #1
 800643e:	d103      	bne.n	8006448 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2208      	movs	r2, #8
 8006444:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006446:	e0f0      	b.n	800662a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2207      	movs	r2, #7
 800644c:	701a      	strb	r2, [r3, #0]
      break;
 800644e:	e0ec      	b.n	800662a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80e9 	beq.w	800662e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006462:	2101      	movs	r1, #1
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2208      	movs	r2, #8
 800646c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800646e:	e0de      	b.n	800662e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006476:	b29b      	uxth	r3, r3
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fc2c 	bl	8006cd8 <USBH_SetCfg>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 80d5 	bne.w	8006632 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2209      	movs	r2, #9
 800648c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800648e:	e0d0      	b.n	8006632 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800649e:	2101      	movs	r1, #1
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fc3c 	bl	8006d1e <USBH_SetFeature>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d103      	bne.n	80064ba <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	220a      	movs	r2, #10
 80064b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80064b8:	e0bd      	b.n	8006636 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f040 80b9 	bne.w	8006636 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	220a      	movs	r2, #10
 80064c8:	701a      	strb	r2, [r3, #0]
      break;
 80064ca:	e0b4      	b.n	8006636 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	220a      	movs	r2, #10
 80064d0:	701a      	strb	r2, [r3, #0]
      break;
 80064d2:	e0b0      	b.n	8006636 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80ad 	beq.w	800663a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e016      	b.n	800651c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80064ee:	7bfa      	ldrb	r2, [r7, #15]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	32de      	adds	r2, #222	; 0xde
 80064f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f8:	791a      	ldrb	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006500:	429a      	cmp	r2, r3
 8006502:	d108      	bne.n	8006516 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006504:	7bfa      	ldrb	r2, [r7, #15]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	32de      	adds	r2, #222	; 0xde
 800650a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006514:	e005      	b.n	8006522 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	3301      	adds	r3, #1
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0e5      	beq.n	80064ee <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d016      	beq.n	800655a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2206      	movs	r2, #6
 8006542:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800654a:	2103      	movs	r1, #3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006550:	e073      	b.n	800663a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	220d      	movs	r2, #13
 8006556:	701a      	strb	r2, [r3, #0]
      break;
 8006558:	e06f      	b.n	800663a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	220d      	movs	r2, #13
 800655e:	701a      	strb	r2, [r3, #0]
      break;
 8006560:	e06b      	b.n	800663a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d017      	beq.n	800659c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
 8006578:	4603      	mov	r3, r0
 800657a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	220b      	movs	r2, #11
 8006588:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800658a:	e058      	b.n	800663e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d154      	bne.n	800663e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	220d      	movs	r2, #13
 8006598:	701a      	strb	r2, [r3, #0]
      break;
 800659a:	e050      	b.n	800663e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	220d      	movs	r2, #13
 80065a0:	701a      	strb	r2, [r3, #0]
      break;
 80065a2:	e04c      	b.n	800663e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d049      	beq.n	8006642 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
      }
      break;
 80065ba:	e042      	b.n	8006642 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fd67 	bl	8006098 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d009      	beq.n	80065e8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065f8:	2105      	movs	r1, #5
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b01      	cmp	r3, #1
 8006608:	d107      	bne.n	800661a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fe20 	bl	8006258 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006618:	e014      	b.n	8006644 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 faa6 	bl	8007b6c <USBH_LL_Start>
      break;
 8006620:	e010      	b.n	8006644 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006622:	bf00      	nop
 8006624:	e00e      	b.n	8006644 <USBH_Process+0x3cc>
      break;
 8006626:	bf00      	nop
 8006628:	e00c      	b.n	8006644 <USBH_Process+0x3cc>
      break;
 800662a:	bf00      	nop
 800662c:	e00a      	b.n	8006644 <USBH_Process+0x3cc>
    break;
 800662e:	bf00      	nop
 8006630:	e008      	b.n	8006644 <USBH_Process+0x3cc>
      break;
 8006632:	bf00      	nop
 8006634:	e006      	b.n	8006644 <USBH_Process+0x3cc>
      break;
 8006636:	bf00      	nop
 8006638:	e004      	b.n	8006644 <USBH_Process+0x3cc>
      break;
 800663a:	bf00      	nop
 800663c:	e002      	b.n	8006644 <USBH_Process+0x3cc>
      break;
 800663e:	bf00      	nop
 8006640:	e000      	b.n	8006644 <USBH_Process+0x3cc>
      break;
 8006642:	bf00      	nop
  }
  return USBH_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop

08006650 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af04      	add	r7, sp, #16
 8006656:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800665c:	2301      	movs	r3, #1
 800665e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b07      	cmp	r3, #7
 8006666:	f200 81c1 	bhi.w	80069ec <USBH_HandleEnum+0x39c>
 800666a:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <USBH_HandleEnum+0x20>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	08006691 	.word	0x08006691
 8006674:	0800674f 	.word	0x0800674f
 8006678:	080067b9 	.word	0x080067b9
 800667c:	08006847 	.word	0x08006847
 8006680:	080068b1 	.word	0x080068b1
 8006684:	08006921 	.word	0x08006921
 8006688:	08006967 	.word	0x08006967
 800668c:	080069ad 	.word	0x080069ad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006690:	2108      	movs	r1, #8
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa50 	bl	8006b38 <USBH_Get_DevDesc>
 8006698:	4603      	mov	r3, r0
 800669a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d130      	bne.n	8006704 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7919      	ldrb	r1, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80066c6:	b292      	uxth	r2, r2
 80066c8:	9202      	str	r2, [sp, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	9201      	str	r2, [sp, #4]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	4603      	mov	r3, r0
 80066d2:	2280      	movs	r2, #128	; 0x80
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 f867 	bl	80077a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	7959      	ldrb	r1, [r3, #5]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066ee:	b292      	uxth	r2, r2
 80066f0:	9202      	str	r2, [sp, #8]
 80066f2:	2200      	movs	r2, #0
 80066f4:	9201      	str	r2, [sp, #4]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	4603      	mov	r3, r0
 80066fa:	2200      	movs	r2, #0
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 f853 	bl	80077a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006702:	e175      	b.n	80069f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2b03      	cmp	r3, #3
 8006708:	f040 8172 	bne.w	80069f0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006712:	3301      	adds	r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006722:	2b03      	cmp	r3, #3
 8006724:	d903      	bls.n	800672e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	220d      	movs	r2, #13
 800672a:	701a      	strb	r2, [r3, #0]
      break;
 800672c:	e160      	b.n	80069f0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	795b      	ldrb	r3, [r3, #5]
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f001 f887 	bl	8007848 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	791b      	ldrb	r3, [r3, #4]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f881 	bl	8007848 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
      break;
 800674c:	e150      	b.n	80069f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800674e:	2112      	movs	r1, #18
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f9f1 	bl	8006b38 <USBH_Get_DevDesc>
 8006756:	4603      	mov	r3, r0
 8006758:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006766:	e145      	b.n	80069f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	2b03      	cmp	r3, #3
 800676c:	f040 8142 	bne.w	80069f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006776:	3301      	adds	r3, #1
 8006778:	b2da      	uxtb	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006786:	2b03      	cmp	r3, #3
 8006788:	d903      	bls.n	8006792 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	220d      	movs	r2, #13
 800678e:	701a      	strb	r2, [r3, #0]
      break;
 8006790:	e130      	b.n	80069f4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	795b      	ldrb	r3, [r3, #5]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 f855 	bl	8007848 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	791b      	ldrb	r3, [r3, #4]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f84f 	bl	8007848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
      break;
 80067b6:	e11d      	b.n	80069f4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80067b8:	2101      	movs	r1, #1
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa68 	bl	8006c90 <USBH_SetAddress>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d132      	bne.n	8006830 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80067ca:	2002      	movs	r0, #2
 80067cc:	f001 fb32 	bl	8007e34 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2203      	movs	r2, #3
 80067dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7919      	ldrb	r1, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80067f2:	b292      	uxth	r2, r2
 80067f4:	9202      	str	r2, [sp, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	9201      	str	r2, [sp, #4]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	4603      	mov	r3, r0
 80067fe:	2280      	movs	r2, #128	; 0x80
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 ffd1 	bl	80077a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	7959      	ldrb	r1, [r3, #5]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800681a:	b292      	uxth	r2, r2
 800681c:	9202      	str	r2, [sp, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	9201      	str	r2, [sp, #4]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4603      	mov	r3, r0
 8006826:	2200      	movs	r2, #0
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 ffbd 	bl	80077a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800682e:	e0e3      	b.n	80069f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	2b03      	cmp	r3, #3
 8006834:	f040 80e0 	bne.w	80069f8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	220d      	movs	r2, #13
 800683c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	705a      	strb	r2, [r3, #1]
      break;
 8006844:	e0d8      	b.n	80069f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006846:	2109      	movs	r1, #9
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f99d 	bl	8006b88 <USBH_Get_CfgDesc>
 800684e:	4603      	mov	r3, r0
 8006850:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2204      	movs	r2, #4
 800685c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800685e:	e0cd      	b.n	80069fc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b03      	cmp	r3, #3
 8006864:	f040 80ca 	bne.w	80069fc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800686e:	3301      	adds	r3, #1
 8006870:	b2da      	uxtb	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800687e:	2b03      	cmp	r3, #3
 8006880:	d903      	bls.n	800688a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	220d      	movs	r2, #13
 8006886:	701a      	strb	r2, [r3, #0]
      break;
 8006888:	e0b8      	b.n	80069fc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	795b      	ldrb	r3, [r3, #5]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 ffd9 	bl	8007848 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	791b      	ldrb	r3, [r3, #4]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 ffd3 	bl	8007848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
      break;
 80068ae:	e0a5      	b.n	80069fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f965 	bl	8006b88 <USBH_Get_CfgDesc>
 80068be:	4603      	mov	r3, r0
 80068c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068c2:	7bbb      	ldrb	r3, [r7, #14]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d103      	bne.n	80068d0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2205      	movs	r2, #5
 80068cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80068ce:	e097      	b.n	8006a00 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	f040 8094 	bne.w	8006a00 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068de:	3301      	adds	r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d903      	bls.n	80068fa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	220d      	movs	r2, #13
 80068f6:	701a      	strb	r2, [r3, #0]
      break;
 80068f8:	e082      	b.n	8006a00 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	795b      	ldrb	r3, [r3, #5]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 ffa1 	bl	8007848 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	791b      	ldrb	r3, [r3, #4]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 ff9b 	bl	8007848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
      break;
 800691e:	e06f      	b.n	8006a00 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006926:	2b00      	cmp	r3, #0
 8006928:	d019      	beq.n	800695e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006936:	23ff      	movs	r3, #255	; 0xff
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f949 	bl	8006bd0 <USBH_Get_StringDesc>
 800693e:	4603      	mov	r3, r0
 8006940:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2206      	movs	r2, #6
 800694c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800694e:	e059      	b.n	8006a04 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	2b03      	cmp	r3, #3
 8006954:	d156      	bne.n	8006a04 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2206      	movs	r2, #6
 800695a:	705a      	strb	r2, [r3, #1]
      break;
 800695c:	e052      	b.n	8006a04 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2206      	movs	r2, #6
 8006962:	705a      	strb	r2, [r3, #1]
      break;
 8006964:	e04e      	b.n	8006a04 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800696c:	2b00      	cmp	r3, #0
 800696e:	d019      	beq.n	80069a4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800697c:	23ff      	movs	r3, #255	; 0xff
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f926 	bl	8006bd0 <USBH_Get_StringDesc>
 8006984:	4603      	mov	r3, r0
 8006986:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d103      	bne.n	8006996 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2207      	movs	r2, #7
 8006992:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006994:	e038      	b.n	8006a08 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d135      	bne.n	8006a08 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2207      	movs	r2, #7
 80069a0:	705a      	strb	r2, [r3, #1]
      break;
 80069a2:	e031      	b.n	8006a08 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2207      	movs	r2, #7
 80069a8:	705a      	strb	r2, [r3, #1]
      break;
 80069aa:	e02d      	b.n	8006a08 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d017      	beq.n	80069e6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80069c2:	23ff      	movs	r3, #255	; 0xff
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f903 	bl	8006bd0 <USBH_Get_StringDesc>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d102      	bne.n	80069da <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80069d8:	e018      	b.n	8006a0c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d115      	bne.n	8006a0c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]
      break;
 80069e4:	e012      	b.n	8006a0c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
      break;
 80069ea:	e00f      	b.n	8006a0c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80069ec:	bf00      	nop
 80069ee:	e00e      	b.n	8006a0e <USBH_HandleEnum+0x3be>
      break;
 80069f0:	bf00      	nop
 80069f2:	e00c      	b.n	8006a0e <USBH_HandleEnum+0x3be>
      break;
 80069f4:	bf00      	nop
 80069f6:	e00a      	b.n	8006a0e <USBH_HandleEnum+0x3be>
      break;
 80069f8:	bf00      	nop
 80069fa:	e008      	b.n	8006a0e <USBH_HandleEnum+0x3be>
      break;
 80069fc:	bf00      	nop
 80069fe:	e006      	b.n	8006a0e <USBH_HandleEnum+0x3be>
      break;
 8006a00:	bf00      	nop
 8006a02:	e004      	b.n	8006a0e <USBH_HandleEnum+0x3be>
      break;
 8006a04:	bf00      	nop
 8006a06:	e002      	b.n	8006a0e <USBH_HandleEnum+0x3be>
      break;
 8006a08:	bf00      	nop
 8006a0a:	e000      	b.n	8006a0e <USBH_HandleEnum+0x3be>
      break;
 8006a0c:	bf00      	nop
  }
  return Status;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f804 	bl	8006a5a <USBH_HandleSof>
}
 8006a52:	bf00      	nop
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b0b      	cmp	r3, #11
 8006a6a:	d10a      	bne.n	8006a82 <USBH_HandleSof+0x28>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
  }
}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006a9a:	bf00      	nop
}
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006ab6:	bf00      	nop
}
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 f846 	bl	8007ba2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	791b      	ldrb	r3, [r3, #4]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fe93 	bl	8007848 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	795b      	ldrb	r3, [r3, #5]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fe8d 	bl	8007848 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4613      	mov	r3, r2
 8006b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b56:	2100      	movs	r1, #0
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f864 	bl	8006c26 <USBH_GetDescriptor>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b74:	78fa      	ldrb	r2, [r7, #3]
 8006b76:	b292      	uxth	r2, r2
 8006b78:	4619      	mov	r1, r3
 8006b7a:	f000 f919 	bl	8006db0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	331c      	adds	r3, #28
 8006b98:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006b9a:	887b      	ldrh	r3, [r7, #2]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f83d 	bl	8006c26 <USBH_GetDescriptor>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d107      	bne.n	8006bc6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006bb6:	887b      	ldrh	r3, [r7, #2]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f989 	bl	8006ed4 <USBH_ParseCfgDesc>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	460b      	mov	r3, r1
 8006bde:	72fb      	strb	r3, [r7, #11]
 8006be0:	4613      	mov	r3, r2
 8006be2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bec:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006bf4:	893b      	ldrh	r3, [r7, #8]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f812 	bl	8006c26 <USBH_GetDescriptor>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d107      	bne.n	8006c1c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c12:	893a      	ldrh	r2, [r7, #8]
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fb26 	bl	8007268 <USBH_ParseStringDesc>
  }

  return status;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	72fb      	strb	r3, [r7, #11]
 8006c34:	4613      	mov	r3, r2
 8006c36:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	789b      	ldrb	r3, [r3, #2]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d11c      	bne.n	8006c7a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2206      	movs	r2, #6
 8006c50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	893a      	ldrh	r2, [r7, #8]
 8006c56:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006c58:	893b      	ldrh	r3, [r7, #8]
 8006c5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c62:	d104      	bne.n	8006c6e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f240 4209 	movw	r2, #1033	; 0x409
 8006c6a:	829a      	strh	r2, [r3, #20]
 8006c6c:	e002      	b.n	8006c74 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8b3a      	ldrh	r2, [r7, #24]
 8006c78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006c7a:	8b3b      	ldrh	r3, [r7, #24]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fb3f 	bl	8007304 <USBH_CtlReq>
 8006c86:	4603      	mov	r3, r0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	789b      	ldrb	r3, [r3, #2]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d10f      	bne.n	8006cc4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2205      	movs	r2, #5
 8006cae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fb1b 	bl	8007304 <USBH_CtlReq>
 8006cce:	4603      	mov	r3, r0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	789b      	ldrb	r3, [r3, #2]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10e      	bne.n	8006d0a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2209      	movs	r2, #9
 8006cf6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	887a      	ldrh	r2, [r7, #2]
 8006cfc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 faf8 	bl	8007304 <USBH_CtlReq>
 8006d14:	4603      	mov	r3, r0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	789b      	ldrb	r3, [r3, #2]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d10f      	bne.n	8006d52 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006d52:	2200      	movs	r2, #0
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fad4 	bl	8007304 <USBH_CtlReq>
 8006d5c:	4603      	mov	r3, r0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	789b      	ldrb	r3, [r3, #2]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d10f      	bne.n	8006d9a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fab0 	bl	8007304 <USBH_CtlReq>
 8006da4:	4603      	mov	r3, r0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	785a      	ldrb	r2, [r3, #1]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	3303      	adds	r3, #3
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	021b      	lsls	r3, r3, #8
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	4313      	orrs	r3, r2
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	791a      	ldrb	r2, [r3, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	795a      	ldrb	r2, [r3, #5]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	799a      	ldrb	r2, [r3, #6]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	79da      	ldrb	r2, [r3, #7]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	79db      	ldrb	r3, [r3, #7]
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	dc0f      	bgt.n	8006e32 <USBH_ParseDevDesc+0x82>
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	db14      	blt.n	8006e40 <USBH_ParseDevDesc+0x90>
 8006e16:	3b08      	subs	r3, #8
 8006e18:	4a2d      	ldr	r2, [pc, #180]	; (8006ed0 <USBH_ParseDevDesc+0x120>)
 8006e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	bf14      	ite	ne
 8006e26:	2301      	movne	r3, #1
 8006e28:	2300      	moveq	r3, #0
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <USBH_ParseDevDesc+0x86>
 8006e30:	e006      	b.n	8006e40 <USBH_ParseDevDesc+0x90>
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d104      	bne.n	8006e40 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	79da      	ldrb	r2, [r3, #7]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	71da      	strb	r2, [r3, #7]
      break;
 8006e3e:	e003      	b.n	8006e48 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2240      	movs	r2, #64	; 0x40
 8006e44:	71da      	strb	r2, [r3, #7]
      break;
 8006e46:	bf00      	nop
  }

  if (length > 8U)
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d939      	bls.n	8006ec2 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3308      	adds	r3, #8
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	3309      	adds	r3, #9
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	4313      	orrs	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	330a      	adds	r3, #10
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	330b      	adds	r3, #11
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	330d      	adds	r3, #13
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	7b9a      	ldrb	r2, [r3, #14]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	7bda      	ldrb	r2, [r3, #15]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	7c1a      	ldrb	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	7c5a      	ldrb	r2, [r3, #17]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	745a      	strb	r2, [r3, #17]
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	01000101 	.word	0x01000101

08006ed4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08c      	sub	sp, #48	; 0x30
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ee8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	785a      	ldrb	r2, [r3, #1]
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	3302      	adds	r3, #2
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	3303      	adds	r3, #3
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f30:	bf28      	it	cs
 8006f32:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	791a      	ldrb	r2, [r3, #4]
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	795a      	ldrb	r2, [r3, #5]
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	799a      	ldrb	r2, [r3, #6]
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	79da      	ldrb	r2, [r3, #7]
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	7a1a      	ldrb	r2, [r3, #8]
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b09      	cmp	r3, #9
 8006f6a:	d002      	beq.n	8006f72 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	2209      	movs	r2, #9
 8006f70:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	f240 809d 	bls.w	80070b4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006f7a:	2309      	movs	r3, #9
 8006f7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f82:	e081      	b.n	8007088 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f84:	f107 0316 	add.w	r3, r7, #22
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f8c:	f000 f99f 	bl	80072ce <USBH_GetNextDesc>
 8006f90:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	785b      	ldrb	r3, [r3, #1]
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d176      	bne.n	8007088 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b09      	cmp	r3, #9
 8006fa0:	d002      	beq.n	8006fa8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	2209      	movs	r2, #9
 8006fa6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fac:	221a      	movs	r2, #26
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	6a3a      	ldr	r2, [r7, #32]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3302      	adds	r3, #2
 8006fba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fbe:	69f8      	ldr	r0, [r7, #28]
 8006fc0:	f000 f87e 	bl	80070c0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006fce:	e043      	b.n	8007058 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006fd0:	f107 0316 	add.w	r3, r7, #22
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd8:	f000 f979 	bl	80072ce <USBH_GetNextDesc>
 8006fdc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b05      	cmp	r3, #5
 8006fe4:	d138      	bne.n	8007058 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	795b      	ldrb	r3, [r3, #5]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d10f      	bne.n	800700e <USBH_ParseCfgDesc+0x13a>
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	799b      	ldrb	r3, [r3, #6]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d10b      	bne.n	800700e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	79db      	ldrb	r3, [r3, #7]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10f      	bne.n	800701e <USBH_ParseCfgDesc+0x14a>
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b09      	cmp	r3, #9
 8007004:	d00b      	beq.n	800701e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	2209      	movs	r2, #9
 800700a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800700c:	e007      	b.n	800701e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b07      	cmp	r3, #7
 8007014:	d004      	beq.n	8007020 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	2207      	movs	r2, #7
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e000      	b.n	8007020 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800701e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007024:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007028:	3201      	adds	r2, #1
 800702a:	00d2      	lsls	r2, r2, #3
 800702c:	211a      	movs	r1, #26
 800702e:	fb01 f303 	mul.w	r3, r1, r3
 8007032:	4413      	add	r3, r2
 8007034:	3308      	adds	r3, #8
 8007036:	6a3a      	ldr	r2, [r7, #32]
 8007038:	4413      	add	r3, r2
 800703a:	3304      	adds	r3, #4
 800703c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800703e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f86b 	bl	800711e <USBH_ParseEPDesc>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800704e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007052:	3301      	adds	r3, #1
 8007054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	791b      	ldrb	r3, [r3, #4]
 800705c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007060:	429a      	cmp	r2, r3
 8007062:	d204      	bcs.n	800706e <USBH_ParseCfgDesc+0x19a>
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	885a      	ldrh	r2, [r3, #2]
 8007068:	8afb      	ldrh	r3, [r7, #22]
 800706a:	429a      	cmp	r2, r3
 800706c:	d8b0      	bhi.n	8006fd0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	791b      	ldrb	r3, [r3, #4]
 8007072:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007076:	429a      	cmp	r2, r3
 8007078:	d201      	bcs.n	800707e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800707a:	2303      	movs	r3, #3
 800707c:	e01c      	b.n	80070b8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800707e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007082:	3301      	adds	r3, #1
 8007084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800708c:	2b01      	cmp	r3, #1
 800708e:	d805      	bhi.n	800709c <USBH_ParseCfgDesc+0x1c8>
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	885a      	ldrh	r2, [r3, #2]
 8007094:	8afb      	ldrh	r3, [r7, #22]
 8007096:	429a      	cmp	r2, r3
 8007098:	f63f af74 	bhi.w	8006f84 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	791b      	ldrb	r3, [r3, #4]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	bf28      	it	cs
 80070a4:	2302      	movcs	r3, #2
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d201      	bcs.n	80070b4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e001      	b.n	80070b8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80070b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3730      	adds	r7, #48	; 0x30
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781a      	ldrb	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	785a      	ldrb	r2, [r3, #1]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	789a      	ldrb	r2, [r3, #2]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	78da      	ldrb	r2, [r3, #3]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	791a      	ldrb	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	795a      	ldrb	r2, [r3, #5]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	799a      	ldrb	r2, [r3, #6]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	79da      	ldrb	r2, [r3, #7]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	7a1a      	ldrb	r2, [r3, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	721a      	strb	r2, [r3, #8]
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800711e:	b480      	push	{r7}
 8007120:	b087      	sub	sp, #28
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	781a      	ldrb	r2, [r3, #0]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	785a      	ldrb	r2, [r3, #1]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	789a      	ldrb	r2, [r3, #2]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	78da      	ldrb	r2, [r3, #3]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3304      	adds	r3, #4
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3305      	adds	r3, #5
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	b29b      	uxth	r3, r3
 8007162:	4313      	orrs	r3, r2
 8007164:	b29a      	uxth	r2, r3
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	799a      	ldrb	r2, [r3, #6]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	889b      	ldrh	r3, [r3, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800717a:	2303      	movs	r3, #3
 800717c:	75fb      	strb	r3, [r7, #23]
 800717e:	e033      	b.n	80071e8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	889b      	ldrh	r3, [r3, #4]
 8007184:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007188:	f023 0307 	bic.w	r3, r3, #7
 800718c:	b29a      	uxth	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	889b      	ldrh	r3, [r3, #4]
 8007196:	b21a      	sxth	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	b299      	uxth	r1, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3305      	adds	r3, #5
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	430b      	orrs	r3, r1
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d110      	bne.n	80071da <USBH_ParseEPDesc+0xbc>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	b299      	uxth	r1, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3305      	adds	r3, #5
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	430b      	orrs	r3, r1
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071d6:	b21b      	sxth	r3, r3
 80071d8:	e001      	b.n	80071de <USBH_ParseEPDesc+0xc0>
 80071da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071de:	4313      	orrs	r3, r2
 80071e0:	b21b      	sxth	r3, r3
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d116      	bne.n	8007220 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	78db      	ldrb	r3, [r3, #3]
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d005      	beq.n	800720a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	78db      	ldrb	r3, [r3, #3]
 8007202:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007206:	2b03      	cmp	r3, #3
 8007208:	d127      	bne.n	800725a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	799b      	ldrb	r3, [r3, #6]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <USBH_ParseEPDesc+0xfc>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	799b      	ldrb	r3, [r3, #6]
 8007216:	2b10      	cmp	r3, #16
 8007218:	d91f      	bls.n	800725a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800721a:	2303      	movs	r3, #3
 800721c:	75fb      	strb	r3, [r7, #23]
 800721e:	e01c      	b.n	800725a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	78db      	ldrb	r3, [r3, #3]
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	2b01      	cmp	r3, #1
 800722a:	d10a      	bne.n	8007242 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	799b      	ldrb	r3, [r3, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <USBH_ParseEPDesc+0x11e>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	799b      	ldrb	r3, [r3, #6]
 8007238:	2b10      	cmp	r3, #16
 800723a:	d90e      	bls.n	800725a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800723c:	2303      	movs	r3, #3
 800723e:	75fb      	strb	r3, [r7, #23]
 8007240:	e00b      	b.n	800725a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	78db      	ldrb	r3, [r3, #3]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d105      	bne.n	800725a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	799b      	ldrb	r3, [r3, #6]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007256:	2303      	movs	r3, #3
 8007258:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800725a:	7dfb      	ldrb	r3, [r7, #23]
}
 800725c:	4618      	mov	r0, r3
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b03      	cmp	r3, #3
 800727e:	d120      	bne.n	80072c2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	1e9a      	subs	r2, r3, #2
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	4293      	cmp	r3, r2
 800728a:	bf28      	it	cs
 800728c:	4613      	movcs	r3, r2
 800728e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3302      	adds	r3, #2
 8007294:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007296:	2300      	movs	r3, #0
 8007298:	82fb      	strh	r3, [r7, #22]
 800729a:	e00b      	b.n	80072b4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800729c:	8afb      	ldrh	r3, [r7, #22]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	781a      	ldrb	r2, [r3, #0]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80072ae:	8afb      	ldrh	r3, [r7, #22]
 80072b0:	3302      	adds	r3, #2
 80072b2:	82fb      	strh	r3, [r7, #22]
 80072b4:	8afa      	ldrh	r2, [r7, #22]
 80072b6:	8abb      	ldrh	r3, [r7, #20]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d3ef      	bcc.n	800729c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
  }
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b085      	sub	sp, #20
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	881a      	ldrh	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4413      	add	r3, r2
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4413      	add	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80072f6:	68fb      	ldr	r3, [r7, #12]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007312:	2301      	movs	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	789b      	ldrb	r3, [r3, #2]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d002      	beq.n	8007324 <USBH_CtlReq+0x20>
 800731e:	2b02      	cmp	r3, #2
 8007320:	d00f      	beq.n	8007342 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007322:	e027      	b.n	8007374 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2202      	movs	r2, #2
 800733a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800733c:	2301      	movs	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
      break;
 8007340:	e018      	b.n	8007374 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f81c 	bl	8007380 <USBH_HandleControl>
 8007348:	4603      	mov	r3, r0
 800734a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800734c:	7dfb      	ldrb	r3, [r7, #23]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <USBH_CtlReq+0x54>
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	2b03      	cmp	r3, #3
 8007356:	d106      	bne.n	8007366 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	761a      	strb	r2, [r3, #24]
      break;
 8007364:	e005      	b.n	8007372 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d102      	bne.n	8007372 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	709a      	strb	r2, [r3, #2]
      break;
 8007372:	bf00      	nop
  }
  return status;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007388:	2301      	movs	r3, #1
 800738a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800738c:	2300      	movs	r3, #0
 800738e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	7e1b      	ldrb	r3, [r3, #24]
 8007394:	3b01      	subs	r3, #1
 8007396:	2b0a      	cmp	r3, #10
 8007398:	f200 8156 	bhi.w	8007648 <USBH_HandleControl+0x2c8>
 800739c:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <USBH_HandleControl+0x24>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	080073eb 	.word	0x080073eb
 80073ac:	08007455 	.word	0x08007455
 80073b0:	0800747b 	.word	0x0800747b
 80073b4:	080074b3 	.word	0x080074b3
 80073b8:	080074dd 	.word	0x080074dd
 80073bc:	0800752f 	.word	0x0800752f
 80073c0:	08007551 	.word	0x08007551
 80073c4:	0800758d 	.word	0x0800758d
 80073c8:	080075b3 	.word	0x080075b3
 80073cc:	080075f1 	.word	0x080075f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f103 0110 	add.w	r1, r3, #16
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	795b      	ldrb	r3, [r3, #5]
 80073da:	461a      	mov	r2, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f943 	bl	8007668 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	761a      	strb	r2, [r3, #24]
      break;
 80073e8:	e139      	b.n	800765e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	795b      	ldrb	r3, [r3, #5]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fcc5 	bl	8007d80 <USBH_LL_GetURBState>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d11e      	bne.n	800743e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	7c1b      	ldrb	r3, [r3, #16]
 8007404:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007408:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8adb      	ldrh	r3, [r3, #22]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007412:	7b7b      	ldrb	r3, [r7, #13]
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d103      	bne.n	8007420 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2203      	movs	r2, #3
 800741c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800741e:	e115      	b.n	800764c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2205      	movs	r2, #5
 8007424:	761a      	strb	r2, [r3, #24]
      break;
 8007426:	e111      	b.n	800764c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007428:	7b7b      	ldrb	r3, [r7, #13]
 800742a:	2b80      	cmp	r3, #128	; 0x80
 800742c:	d103      	bne.n	8007436 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2209      	movs	r2, #9
 8007432:	761a      	strb	r2, [r3, #24]
      break;
 8007434:	e10a      	b.n	800764c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2207      	movs	r2, #7
 800743a:	761a      	strb	r2, [r3, #24]
      break;
 800743c:	e106      	b.n	800764c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d003      	beq.n	800744c <USBH_HandleControl+0xcc>
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b02      	cmp	r3, #2
 8007448:	f040 8100 	bne.w	800764c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	220b      	movs	r2, #11
 8007450:	761a      	strb	r2, [r3, #24]
      break;
 8007452:	e0fb      	b.n	800764c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6899      	ldr	r1, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	899a      	ldrh	r2, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	791b      	ldrb	r3, [r3, #4]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f93a 	bl	80076e6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2204      	movs	r2, #4
 8007476:	761a      	strb	r2, [r3, #24]
      break;
 8007478:	e0f1      	b.n	800765e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	791b      	ldrb	r3, [r3, #4]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fc7d 	bl	8007d80 <USBH_LL_GetURBState>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d102      	bne.n	8007496 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2209      	movs	r2, #9
 8007494:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b05      	cmp	r3, #5
 800749a:	d102      	bne.n	80074a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800749c:	2303      	movs	r3, #3
 800749e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80074a0:	e0d6      	b.n	8007650 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	f040 80d3 	bne.w	8007650 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	220b      	movs	r2, #11
 80074ae:	761a      	strb	r2, [r3, #24]
      break;
 80074b0:	e0ce      	b.n	8007650 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6899      	ldr	r1, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	899a      	ldrh	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	795b      	ldrb	r3, [r3, #5]
 80074be:	2001      	movs	r0, #1
 80074c0:	9000      	str	r0, [sp, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f8ea 	bl	800769c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2206      	movs	r2, #6
 80074d8:	761a      	strb	r2, [r3, #24]
      break;
 80074da:	e0c0      	b.n	800765e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	795b      	ldrb	r3, [r3, #5]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fc4c 	bl	8007d80 <USBH_LL_GetURBState>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d103      	bne.n	80074fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2207      	movs	r2, #7
 80074f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80074f8:	e0ac      	b.n	8007654 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b05      	cmp	r3, #5
 80074fe:	d105      	bne.n	800750c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	220c      	movs	r2, #12
 8007504:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007506:	2303      	movs	r3, #3
 8007508:	73fb      	strb	r3, [r7, #15]
      break;
 800750a:	e0a3      	b.n	8007654 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d103      	bne.n	800751a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2205      	movs	r2, #5
 8007516:	761a      	strb	r2, [r3, #24]
      break;
 8007518:	e09c      	b.n	8007654 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b04      	cmp	r3, #4
 800751e:	f040 8099 	bne.w	8007654 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	220b      	movs	r2, #11
 8007526:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007528:	2302      	movs	r3, #2
 800752a:	73fb      	strb	r3, [r7, #15]
      break;
 800752c:	e092      	b.n	8007654 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	791b      	ldrb	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f8d5 	bl	80076e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007542:	b29a      	uxth	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2208      	movs	r2, #8
 800754c:	761a      	strb	r2, [r3, #24]

      break;
 800754e:	e086      	b.n	800765e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	791b      	ldrb	r3, [r3, #4]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fc12 	bl	8007d80 <USBH_LL_GetURBState>
 800755c:	4603      	mov	r3, r0
 800755e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d105      	bne.n	8007572 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	220d      	movs	r2, #13
 800756a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007570:	e072      	b.n	8007658 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b04      	cmp	r3, #4
 8007576:	d103      	bne.n	8007580 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	220b      	movs	r2, #11
 800757c:	761a      	strb	r2, [r3, #24]
      break;
 800757e:	e06b      	b.n	8007658 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b05      	cmp	r3, #5
 8007584:	d168      	bne.n	8007658 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007586:	2303      	movs	r3, #3
 8007588:	73fb      	strb	r3, [r7, #15]
      break;
 800758a:	e065      	b.n	8007658 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	795b      	ldrb	r3, [r3, #5]
 8007590:	2201      	movs	r2, #1
 8007592:	9200      	str	r2, [sp, #0]
 8007594:	2200      	movs	r2, #0
 8007596:	2100      	movs	r1, #0
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f87f 	bl	800769c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	220a      	movs	r2, #10
 80075ae:	761a      	strb	r2, [r3, #24]
      break;
 80075b0:	e055      	b.n	800765e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	795b      	ldrb	r3, [r3, #5]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fbe1 	bl	8007d80 <USBH_LL_GetURBState>
 80075be:	4603      	mov	r3, r0
 80075c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d105      	bne.n	80075d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	220d      	movs	r2, #13
 80075d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80075d2:	e043      	b.n	800765c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d103      	bne.n	80075e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2209      	movs	r2, #9
 80075de:	761a      	strb	r2, [r3, #24]
      break;
 80075e0:	e03c      	b.n	800765c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d139      	bne.n	800765c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	220b      	movs	r2, #11
 80075ec:	761a      	strb	r2, [r3, #24]
      break;
 80075ee:	e035      	b.n	800765c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	7e5b      	ldrb	r3, [r3, #25]
 80075f4:	3301      	adds	r3, #1
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	765a      	strb	r2, [r3, #25]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7e5b      	ldrb	r3, [r3, #25]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d806      	bhi.n	8007612 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007610:	e025      	b.n	800765e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007618:	2106      	movs	r1, #6
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	795b      	ldrb	r3, [r3, #5]
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f90c 	bl	8007848 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	791b      	ldrb	r3, [r3, #4]
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f906 	bl	8007848 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007642:	2302      	movs	r3, #2
 8007644:	73fb      	strb	r3, [r7, #15]
      break;
 8007646:	e00a      	b.n	800765e <USBH_HandleControl+0x2de>

    default:
      break;
 8007648:	bf00      	nop
 800764a:	e008      	b.n	800765e <USBH_HandleControl+0x2de>
      break;
 800764c:	bf00      	nop
 800764e:	e006      	b.n	800765e <USBH_HandleControl+0x2de>
      break;
 8007650:	bf00      	nop
 8007652:	e004      	b.n	800765e <USBH_HandleControl+0x2de>
      break;
 8007654:	bf00      	nop
 8007656:	e002      	b.n	800765e <USBH_HandleControl+0x2de>
      break;
 8007658:	bf00      	nop
 800765a:	e000      	b.n	800765e <USBH_HandleControl+0x2de>
      break;
 800765c:	bf00      	nop
  }

  return status;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af04      	add	r7, sp, #16
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007676:	79f9      	ldrb	r1, [r7, #7]
 8007678:	2300      	movs	r3, #0
 800767a:	9303      	str	r3, [sp, #12]
 800767c:	2308      	movs	r3, #8
 800767e:	9302      	str	r3, [sp, #8]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	2300      	movs	r3, #0
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2300      	movs	r3, #0
 800768a:	2200      	movs	r2, #0
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fb46 	bl	8007d1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af04      	add	r7, sp, #16
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	4611      	mov	r1, r2
 80076a8:	461a      	mov	r2, r3
 80076aa:	460b      	mov	r3, r1
 80076ac:	80fb      	strh	r3, [r7, #6]
 80076ae:	4613      	mov	r3, r2
 80076b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80076c0:	7979      	ldrb	r1, [r7, #5]
 80076c2:	7e3b      	ldrb	r3, [r7, #24]
 80076c4:	9303      	str	r3, [sp, #12]
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	9302      	str	r3, [sp, #8]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	2301      	movs	r3, #1
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	2300      	movs	r3, #0
 80076d4:	2200      	movs	r2, #0
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fb21 	bl	8007d1e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b088      	sub	sp, #32
 80076ea:	af04      	add	r7, sp, #16
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	4611      	mov	r1, r2
 80076f2:	461a      	mov	r2, r3
 80076f4:	460b      	mov	r3, r1
 80076f6:	80fb      	strh	r3, [r7, #6]
 80076f8:	4613      	mov	r3, r2
 80076fa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80076fc:	7979      	ldrb	r1, [r7, #5]
 80076fe:	2300      	movs	r3, #0
 8007700:	9303      	str	r3, [sp, #12]
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	2301      	movs	r3, #1
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	2300      	movs	r3, #0
 8007710:	2201      	movs	r2, #1
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fb03 	bl	8007d1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007718:	2300      	movs	r3, #0

}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b088      	sub	sp, #32
 8007726:	af04      	add	r7, sp, #16
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	4611      	mov	r1, r2
 800772e:	461a      	mov	r2, r3
 8007730:	460b      	mov	r3, r1
 8007732:	80fb      	strh	r3, [r7, #6]
 8007734:	4613      	mov	r3, r2
 8007736:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007746:	7979      	ldrb	r1, [r7, #5]
 8007748:	7e3b      	ldrb	r3, [r7, #24]
 800774a:	9303      	str	r3, [sp, #12]
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	9302      	str	r3, [sp, #8]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	2301      	movs	r3, #1
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	2302      	movs	r3, #2
 800775a:	2200      	movs	r2, #0
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 fade 	bl	8007d1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af04      	add	r7, sp, #16
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4611      	mov	r1, r2
 8007778:	461a      	mov	r2, r3
 800777a:	460b      	mov	r3, r1
 800777c:	80fb      	strh	r3, [r7, #6]
 800777e:	4613      	mov	r3, r2
 8007780:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007782:	7979      	ldrb	r1, [r7, #5]
 8007784:	2300      	movs	r3, #0
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	9302      	str	r3, [sp, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	2301      	movs	r3, #1
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	2302      	movs	r3, #2
 8007796:	2201      	movs	r2, #1
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fac0 	bl	8007d1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af04      	add	r7, sp, #16
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	4608      	mov	r0, r1
 80077b2:	4611      	mov	r1, r2
 80077b4:	461a      	mov	r2, r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	70fb      	strb	r3, [r7, #3]
 80077ba:	460b      	mov	r3, r1
 80077bc:	70bb      	strb	r3, [r7, #2]
 80077be:	4613      	mov	r3, r2
 80077c0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80077c2:	7878      	ldrb	r0, [r7, #1]
 80077c4:	78ba      	ldrb	r2, [r7, #2]
 80077c6:	78f9      	ldrb	r1, [r7, #3]
 80077c8:	8b3b      	ldrh	r3, [r7, #24]
 80077ca:	9302      	str	r3, [sp, #8]
 80077cc:	7d3b      	ldrb	r3, [r7, #20]
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	7c3b      	ldrb	r3, [r7, #16]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	4603      	mov	r3, r0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa53 	bl	8007c82 <USBH_LL_OpenPipe>

  return USBH_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa72 	bl	8007ce0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	460b      	mov	r3, r1
 8007810:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f836 	bl	8007884 <USBH_GetFreePipe>
 8007818:	4603      	mov	r3, r0
 800781a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800781c:	89fb      	ldrh	r3, [r7, #14]
 800781e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007822:	4293      	cmp	r3, r2
 8007824:	d00a      	beq.n	800783c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	89fb      	ldrh	r3, [r7, #14]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	33e0      	adds	r3, #224	; 0xe0
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800783c:	89fb      	ldrh	r3, [r7, #14]
 800783e:	b2db      	uxtb	r3, r3
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	2b0f      	cmp	r3, #15
 8007858:	d80d      	bhi.n	8007876 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	33e0      	adds	r3, #224	; 0xe0
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	33e0      	adds	r3, #224	; 0xe0
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
 8007894:	e00f      	b.n	80078b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	33e0      	adds	r3, #224	; 0xe0
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	e007      	b.n	80078c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	3301      	adds	r3, #1
 80078b4:	73fb      	strb	r3, [r7, #15]
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b0f      	cmp	r3, #15
 80078ba:	d9ec      	bls.n	8007896 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80078bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80078d0:	2201      	movs	r2, #1
 80078d2:	490e      	ldr	r1, [pc, #56]	; (800790c <MX_USB_HOST_Init+0x40>)
 80078d4:	480e      	ldr	r0, [pc, #56]	; (8007910 <MX_USB_HOST_Init+0x44>)
 80078d6:	f7fe fba5 	bl	8006024 <USBH_Init>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80078e0:	f7f9 f8a4 	bl	8000a2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80078e4:	490b      	ldr	r1, [pc, #44]	; (8007914 <MX_USB_HOST_Init+0x48>)
 80078e6:	480a      	ldr	r0, [pc, #40]	; (8007910 <MX_USB_HOST_Init+0x44>)
 80078e8:	f7fe fc2a 	bl	8006140 <USBH_RegisterClass>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80078f2:	f7f9 f89b 	bl	8000a2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80078f6:	4806      	ldr	r0, [pc, #24]	; (8007910 <MX_USB_HOST_Init+0x44>)
 80078f8:	f7fe fcae 	bl	8006258 <USBH_Start>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007902:	f7f9 f893 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007906:	bf00      	nop
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	0800792d 	.word	0x0800792d
 8007910:	200001bc 	.word	0x200001bc
 8007914:	2000000c 	.word	0x2000000c

08007918 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800791c:	4802      	ldr	r0, [pc, #8]	; (8007928 <MX_USB_HOST_Process+0x10>)
 800791e:	f7fe fcab 	bl	8006278 <USBH_Process>
}
 8007922:	bf00      	nop
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	200001bc 	.word	0x200001bc

0800792c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	3b01      	subs	r3, #1
 800793c:	2b04      	cmp	r3, #4
 800793e:	d819      	bhi.n	8007974 <USBH_UserProcess+0x48>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <USBH_UserProcess+0x1c>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	08007975 	.word	0x08007975
 800794c:	08007965 	.word	0x08007965
 8007950:	08007975 	.word	0x08007975
 8007954:	0800796d 	.word	0x0800796d
 8007958:	0800795d 	.word	0x0800795d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <USBH_UserProcess+0x58>)
 800795e:	2203      	movs	r2, #3
 8007960:	701a      	strb	r2, [r3, #0]
  break;
 8007962:	e008      	b.n	8007976 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <USBH_UserProcess+0x58>)
 8007966:	2202      	movs	r2, #2
 8007968:	701a      	strb	r2, [r3, #0]
  break;
 800796a:	e004      	b.n	8007976 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <USBH_UserProcess+0x58>)
 800796e:	2201      	movs	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
  break;
 8007972:	e000      	b.n	8007976 <USBH_UserProcess+0x4a>

  default:
  break;
 8007974:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000594 	.word	0x20000594

08007988 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007990:	f107 0314 	add.w	r3, r7, #20
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	609a      	str	r2, [r3, #8]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a8:	d147      	bne.n	8007a3a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079aa:	2300      	movs	r3, #0
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	4b25      	ldr	r3, [pc, #148]	; (8007a44 <HAL_HCD_MspInit+0xbc>)
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	4a24      	ldr	r2, [pc, #144]	; (8007a44 <HAL_HCD_MspInit+0xbc>)
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	6313      	str	r3, [r2, #48]	; 0x30
 80079ba:	4b22      	ldr	r3, [pc, #136]	; (8007a44 <HAL_HCD_MspInit+0xbc>)
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80079c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80079d4:	f107 0314 	add.w	r3, r7, #20
 80079d8:	4619      	mov	r1, r3
 80079da:	481b      	ldr	r0, [pc, #108]	; (8007a48 <HAL_HCD_MspInit+0xc0>)
 80079dc:	f7f9 fdb0 	bl	8001540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80079e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80079e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e6:	2302      	movs	r3, #2
 80079e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ee:	2300      	movs	r3, #0
 80079f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079f2:	230a      	movs	r3, #10
 80079f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079f6:	f107 0314 	add.w	r3, r7, #20
 80079fa:	4619      	mov	r1, r3
 80079fc:	4812      	ldr	r0, [pc, #72]	; (8007a48 <HAL_HCD_MspInit+0xc0>)
 80079fe:	f7f9 fd9f 	bl	8001540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a02:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <HAL_HCD_MspInit+0xbc>)
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	4a0f      	ldr	r2, [pc, #60]	; (8007a44 <HAL_HCD_MspInit+0xbc>)
 8007a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0c:	6353      	str	r3, [r2, #52]	; 0x34
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <HAL_HCD_MspInit+0xbc>)
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	4a0b      	ldr	r2, [pc, #44]	; (8007a44 <HAL_HCD_MspInit+0xbc>)
 8007a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <HAL_HCD_MspInit+0xbc>)
 8007a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	2043      	movs	r0, #67	; 0x43
 8007a30:	f7f9 fb51 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a34:	2043      	movs	r0, #67	; 0x43
 8007a36:	f7f9 fb6a 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	3728      	adds	r7, #40	; 0x28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	40023800 	.word	0x40023800
 8007a48:	40020000 	.word	0x40020000

08007a4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe ffeb 	bl	8006a36 <USBH_LL_IncTimer>
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff f823 	bl	8006ac2 <USBH_LL_Connect>
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff f82c 	bl	8006af0 <USBH_LL_Disconnect>
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
 8007aac:	4613      	mov	r3, r2
 8007aae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe ffdd 	bl	8006a8a <USBH_LL_PortEnabled>
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe ffdd 	bl	8006aa6 <USBH_LL_PortDisabled>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d12a      	bne.n	8007b5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007b06:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b12:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b16:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007b1e:	4b12      	ldr	r3, [pc, #72]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b20:	2208      	movs	r2, #8
 8007b22:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007b24:	4b10      	ldr	r3, [pc, #64]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b2a:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007b30:	4b0d      	ldr	r3, [pc, #52]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b32:	2202      	movs	r2, #2
 8007b34:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007b3c:	480a      	ldr	r0, [pc, #40]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b3e:	f7f9 feb4 	bl	80018aa <HAL_HCD_Init>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007b48:	f7f8 ff70 	bl	8000a2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007b4c:	4806      	ldr	r0, [pc, #24]	; (8007b68 <USBH_LL_Init+0x74>)
 8007b4e:	f7fa fa98 	bl	8002082 <HAL_HCD_GetCurrentFrame>
 8007b52:	4603      	mov	r3, r0
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fe ff5e 	bl	8006a18 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000598 	.word	0x20000598

08007b6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fa fa07 	bl	8001f96 <HAL_HCD_Start>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 f95c 	bl	8007e4c <USBH_Get_USB_Status>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fa fa0f 	bl	8001fdc <HAL_HCD_Stop>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 f941 	bl	8007e4c <USBH_Get_USB_Status>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007be0:	2301      	movs	r3, #1
 8007be2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fa fa57 	bl	800209e <HAL_HCD_GetCurrentSpeed>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d00c      	beq.n	8007c10 <USBH_LL_GetSpeed+0x38>
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d80d      	bhi.n	8007c16 <USBH_LL_GetSpeed+0x3e>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <USBH_LL_GetSpeed+0x2c>
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d003      	beq.n	8007c0a <USBH_LL_GetSpeed+0x32>
 8007c02:	e008      	b.n	8007c16 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
    break;
 8007c08:	e008      	b.n	8007c1c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0e:	e005      	b.n	8007c1c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007c10:	2302      	movs	r3, #2
 8007c12:	73fb      	strb	r3, [r7, #15]
    break;
 8007c14:	e002      	b.n	8007c1c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1a:	bf00      	nop
  }
  return  speed;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fa f9ea 	bl	8002016 <HAL_HCD_ResetPort>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 f8ff 	bl	8007e4c <USBH_Get_USB_Status>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	4611      	mov	r1, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fa f9f1 	bl	800205a <HAL_HCD_HC_GetXferCount>
 8007c78:	4603      	mov	r3, r0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c82:	b590      	push	{r4, r7, lr}
 8007c84:	b089      	sub	sp, #36	; 0x24
 8007c86:	af04      	add	r7, sp, #16
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4603      	mov	r3, r0
 8007c92:	70fb      	strb	r3, [r7, #3]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70bb      	strb	r3, [r7, #2]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007caa:	787c      	ldrb	r4, [r7, #1]
 8007cac:	78ba      	ldrb	r2, [r7, #2]
 8007cae:	78f9      	ldrb	r1, [r7, #3]
 8007cb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cb2:	9302      	str	r3, [sp, #8]
 8007cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	f7f9 fe54 	bl	800196e <HAL_HCD_HC_Init>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f8bd 	bl	8007e4c <USBH_Get_USB_Status>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd90      	pop	{r4, r7, pc}

08007ce0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7f9 fec4 	bl	8001a8c <HAL_HCD_HC_Halt>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 f89e 	bl	8007e4c <USBH_Get_USB_Status>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007d1e:	b590      	push	{r4, r7, lr}
 8007d20:	b089      	sub	sp, #36	; 0x24
 8007d22:	af04      	add	r7, sp, #16
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	70fb      	strb	r3, [r7, #3]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70bb      	strb	r3, [r7, #2]
 8007d34:	4613      	mov	r3, r2
 8007d36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d46:	787c      	ldrb	r4, [r7, #1]
 8007d48:	78ba      	ldrb	r2, [r7, #2]
 8007d4a:	78f9      	ldrb	r1, [r7, #3]
 8007d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d50:	9303      	str	r3, [sp, #12]
 8007d52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d54:	9302      	str	r3, [sp, #8]
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4623      	mov	r3, r4
 8007d62:	f7f9 feb7 	bl	8001ad4 <HAL_HCD_HC_SubmitRequest>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 f86d 	bl	8007e4c <USBH_Get_USB_Status>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd90      	pop	{r4, r7, pc}

08007d80 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d92:	78fa      	ldrb	r2, [r7, #3]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fa f94b 	bl	8002032 <HAL_HCD_HC_GetURBState>
 8007d9c:	4603      	mov	r3, r0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d103      	bne.n	8007dc4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f870 	bl	8007ea4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007dc4:	20c8      	movs	r0, #200	; 0xc8
 8007dc6:	f7f9 f887 	bl	8000ed8 <HAL_Delay>
  return USBH_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
 8007de0:	4613      	mov	r3, r2
 8007de2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007dea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	212c      	movs	r1, #44	; 0x2c
 8007df2:	fb01 f303 	mul.w	r3, r1, r3
 8007df6:	4413      	add	r3, r2
 8007df8:	333b      	adds	r3, #59	; 0x3b
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d009      	beq.n	8007e14 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	212c      	movs	r1, #44	; 0x2c
 8007e06:	fb01 f303 	mul.w	r3, r1, r3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	3354      	adds	r3, #84	; 0x54
 8007e0e:	78ba      	ldrb	r2, [r7, #2]
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	e008      	b.n	8007e26 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	212c      	movs	r1, #44	; 0x2c
 8007e1a:	fb01 f303 	mul.w	r3, r1, r3
 8007e1e:	4413      	add	r3, r2
 8007e20:	3355      	adds	r3, #85	; 0x55
 8007e22:	78ba      	ldrb	r2, [r7, #2]
 8007e24:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7f9 f84b 	bl	8000ed8 <HAL_Delay>
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d817      	bhi.n	8007e90 <USBH_Get_USB_Status+0x44>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <USBH_Get_USB_Status+0x1c>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e79 	.word	0x08007e79
 8007e6c:	08007e7f 	.word	0x08007e7f
 8007e70:	08007e85 	.word	0x08007e85
 8007e74:	08007e8b 	.word	0x08007e8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e7c:	e00b      	b.n	8007e96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007e7e:	2302      	movs	r3, #2
 8007e80:	73fb      	strb	r3, [r7, #15]
    break;
 8007e82:	e008      	b.n	8007e96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007e84:	2301      	movs	r3, #1
 8007e86:	73fb      	strb	r3, [r7, #15]
    break;
 8007e88:	e005      	b.n	8007e96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8e:	e002      	b.n	8007e96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007e90:	2302      	movs	r3, #2
 8007e92:	73fb      	strb	r3, [r7, #15]
    break;
 8007e94:	bf00      	nop
  }
  return usb_status;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73fb      	strb	r3, [r7, #15]
 8007ebc:	e001      	b.n	8007ec2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	4803      	ldr	r0, [pc, #12]	; (8007ed8 <MX_DriverVbusFS+0x34>)
 8007eca:	f7f9 fcd5 	bl	8001878 <HAL_GPIO_WritePin>
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	40020800 	.word	0x40020800

08007edc <malloc>:
 8007edc:	4b02      	ldr	r3, [pc, #8]	; (8007ee8 <malloc+0xc>)
 8007ede:	4601      	mov	r1, r0
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	f000 b82b 	b.w	8007f3c <_malloc_r>
 8007ee6:	bf00      	nop
 8007ee8:	20000078 	.word	0x20000078

08007eec <free>:
 8007eec:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <free+0xc>)
 8007eee:	4601      	mov	r1, r0
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	f000 b8f3 	b.w	80080dc <_free_r>
 8007ef6:	bf00      	nop
 8007ef8:	20000078 	.word	0x20000078

08007efc <sbrk_aligned>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4e0e      	ldr	r6, [pc, #56]	; (8007f38 <sbrk_aligned+0x3c>)
 8007f00:	460c      	mov	r4, r1
 8007f02:	6831      	ldr	r1, [r6, #0]
 8007f04:	4605      	mov	r5, r0
 8007f06:	b911      	cbnz	r1, 8007f0e <sbrk_aligned+0x12>
 8007f08:	f000 f8ac 	bl	8008064 <_sbrk_r>
 8007f0c:	6030      	str	r0, [r6, #0]
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 f8a7 	bl	8008064 <_sbrk_r>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d00a      	beq.n	8007f30 <sbrk_aligned+0x34>
 8007f1a:	1cc4      	adds	r4, r0, #3
 8007f1c:	f024 0403 	bic.w	r4, r4, #3
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d007      	beq.n	8007f34 <sbrk_aligned+0x38>
 8007f24:	1a21      	subs	r1, r4, r0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 f89c 	bl	8008064 <_sbrk_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d101      	bne.n	8007f34 <sbrk_aligned+0x38>
 8007f30:	f04f 34ff 	mov.w	r4, #4294967295
 8007f34:	4620      	mov	r0, r4
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	200008a0 	.word	0x200008a0

08007f3c <_malloc_r>:
 8007f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f40:	1ccd      	adds	r5, r1, #3
 8007f42:	f025 0503 	bic.w	r5, r5, #3
 8007f46:	3508      	adds	r5, #8
 8007f48:	2d0c      	cmp	r5, #12
 8007f4a:	bf38      	it	cc
 8007f4c:	250c      	movcc	r5, #12
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	4607      	mov	r7, r0
 8007f52:	db01      	blt.n	8007f58 <_malloc_r+0x1c>
 8007f54:	42a9      	cmp	r1, r5
 8007f56:	d905      	bls.n	8007f64 <_malloc_r+0x28>
 8007f58:	230c      	movs	r3, #12
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	2600      	movs	r6, #0
 8007f5e:	4630      	mov	r0, r6
 8007f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008038 <_malloc_r+0xfc>
 8007f68:	f000 f868 	bl	800803c <__malloc_lock>
 8007f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f70:	461c      	mov	r4, r3
 8007f72:	bb5c      	cbnz	r4, 8007fcc <_malloc_r+0x90>
 8007f74:	4629      	mov	r1, r5
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff ffc0 	bl	8007efc <sbrk_aligned>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	4604      	mov	r4, r0
 8007f80:	d155      	bne.n	800802e <_malloc_r+0xf2>
 8007f82:	f8d8 4000 	ldr.w	r4, [r8]
 8007f86:	4626      	mov	r6, r4
 8007f88:	2e00      	cmp	r6, #0
 8007f8a:	d145      	bne.n	8008018 <_malloc_r+0xdc>
 8007f8c:	2c00      	cmp	r4, #0
 8007f8e:	d048      	beq.n	8008022 <_malloc_r+0xe6>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	4631      	mov	r1, r6
 8007f94:	4638      	mov	r0, r7
 8007f96:	eb04 0903 	add.w	r9, r4, r3
 8007f9a:	f000 f863 	bl	8008064 <_sbrk_r>
 8007f9e:	4581      	cmp	r9, r0
 8007fa0:	d13f      	bne.n	8008022 <_malloc_r+0xe6>
 8007fa2:	6821      	ldr	r1, [r4, #0]
 8007fa4:	1a6d      	subs	r5, r5, r1
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff ffa7 	bl	8007efc <sbrk_aligned>
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d037      	beq.n	8008022 <_malloc_r+0xe6>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	442b      	add	r3, r5
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d038      	beq.n	8008032 <_malloc_r+0xf6>
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	42a2      	cmp	r2, r4
 8007fc4:	d12b      	bne.n	800801e <_malloc_r+0xe2>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	605a      	str	r2, [r3, #4]
 8007fca:	e00f      	b.n	8007fec <_malloc_r+0xb0>
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	1b52      	subs	r2, r2, r5
 8007fd0:	d41f      	bmi.n	8008012 <_malloc_r+0xd6>
 8007fd2:	2a0b      	cmp	r2, #11
 8007fd4:	d917      	bls.n	8008006 <_malloc_r+0xca>
 8007fd6:	1961      	adds	r1, r4, r5
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	6025      	str	r5, [r4, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	6059      	strne	r1, [r3, #4]
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	bf08      	it	eq
 8007fe4:	f8c8 1000 	streq.w	r1, [r8]
 8007fe8:	5162      	str	r2, [r4, r5]
 8007fea:	604b      	str	r3, [r1, #4]
 8007fec:	4638      	mov	r0, r7
 8007fee:	f104 060b 	add.w	r6, r4, #11
 8007ff2:	f000 f829 	bl	8008048 <__malloc_unlock>
 8007ff6:	f026 0607 	bic.w	r6, r6, #7
 8007ffa:	1d23      	adds	r3, r4, #4
 8007ffc:	1af2      	subs	r2, r6, r3
 8007ffe:	d0ae      	beq.n	8007f5e <_malloc_r+0x22>
 8008000:	1b9b      	subs	r3, r3, r6
 8008002:	50a3      	str	r3, [r4, r2]
 8008004:	e7ab      	b.n	8007f5e <_malloc_r+0x22>
 8008006:	42a3      	cmp	r3, r4
 8008008:	6862      	ldr	r2, [r4, #4]
 800800a:	d1dd      	bne.n	8007fc8 <_malloc_r+0x8c>
 800800c:	f8c8 2000 	str.w	r2, [r8]
 8008010:	e7ec      	b.n	8007fec <_malloc_r+0xb0>
 8008012:	4623      	mov	r3, r4
 8008014:	6864      	ldr	r4, [r4, #4]
 8008016:	e7ac      	b.n	8007f72 <_malloc_r+0x36>
 8008018:	4634      	mov	r4, r6
 800801a:	6876      	ldr	r6, [r6, #4]
 800801c:	e7b4      	b.n	8007f88 <_malloc_r+0x4c>
 800801e:	4613      	mov	r3, r2
 8008020:	e7cc      	b.n	8007fbc <_malloc_r+0x80>
 8008022:	230c      	movs	r3, #12
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	4638      	mov	r0, r7
 8008028:	f000 f80e 	bl	8008048 <__malloc_unlock>
 800802c:	e797      	b.n	8007f5e <_malloc_r+0x22>
 800802e:	6025      	str	r5, [r4, #0]
 8008030:	e7dc      	b.n	8007fec <_malloc_r+0xb0>
 8008032:	605b      	str	r3, [r3, #4]
 8008034:	deff      	udf	#255	; 0xff
 8008036:	bf00      	nop
 8008038:	2000089c 	.word	0x2000089c

0800803c <__malloc_lock>:
 800803c:	4801      	ldr	r0, [pc, #4]	; (8008044 <__malloc_lock+0x8>)
 800803e:	f000 b84b 	b.w	80080d8 <__retarget_lock_acquire_recursive>
 8008042:	bf00      	nop
 8008044:	200009e0 	.word	0x200009e0

08008048 <__malloc_unlock>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__malloc_unlock+0x8>)
 800804a:	f000 b846 	b.w	80080da <__retarget_lock_release_recursive>
 800804e:	bf00      	nop
 8008050:	200009e0 	.word	0x200009e0

08008054 <memset>:
 8008054:	4402      	add	r2, r0
 8008056:	4603      	mov	r3, r0
 8008058:	4293      	cmp	r3, r2
 800805a:	d100      	bne.n	800805e <memset+0xa>
 800805c:	4770      	bx	lr
 800805e:	f803 1b01 	strb.w	r1, [r3], #1
 8008062:	e7f9      	b.n	8008058 <memset+0x4>

08008064 <_sbrk_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d06      	ldr	r5, [pc, #24]	; (8008080 <_sbrk_r+0x1c>)
 8008068:	2300      	movs	r3, #0
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	602b      	str	r3, [r5, #0]
 8008070:	f7f8 fe4e 	bl	8000d10 <_sbrk>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_sbrk_r+0x1a>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b103      	cbz	r3, 800807e <_sbrk_r+0x1a>
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	200009dc 	.word	0x200009dc

08008084 <__errno>:
 8008084:	4b01      	ldr	r3, [pc, #4]	; (800808c <__errno+0x8>)
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	20000078 	.word	0x20000078

08008090 <__libc_init_array>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	4d0d      	ldr	r5, [pc, #52]	; (80080c8 <__libc_init_array+0x38>)
 8008094:	4c0d      	ldr	r4, [pc, #52]	; (80080cc <__libc_init_array+0x3c>)
 8008096:	1b64      	subs	r4, r4, r5
 8008098:	10a4      	asrs	r4, r4, #2
 800809a:	2600      	movs	r6, #0
 800809c:	42a6      	cmp	r6, r4
 800809e:	d109      	bne.n	80080b4 <__libc_init_array+0x24>
 80080a0:	4d0b      	ldr	r5, [pc, #44]	; (80080d0 <__libc_init_array+0x40>)
 80080a2:	4c0c      	ldr	r4, [pc, #48]	; (80080d4 <__libc_init_array+0x44>)
 80080a4:	f000 f866 	bl	8008174 <_init>
 80080a8:	1b64      	subs	r4, r4, r5
 80080aa:	10a4      	asrs	r4, r4, #2
 80080ac:	2600      	movs	r6, #0
 80080ae:	42a6      	cmp	r6, r4
 80080b0:	d105      	bne.n	80080be <__libc_init_array+0x2e>
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b8:	4798      	blx	r3
 80080ba:	3601      	adds	r6, #1
 80080bc:	e7ee      	b.n	800809c <__libc_init_array+0xc>
 80080be:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c2:	4798      	blx	r3
 80080c4:	3601      	adds	r6, #1
 80080c6:	e7f2      	b.n	80080ae <__libc_init_array+0x1e>
 80080c8:	080081b0 	.word	0x080081b0
 80080cc:	080081b0 	.word	0x080081b0
 80080d0:	080081b0 	.word	0x080081b0
 80080d4:	080081b4 	.word	0x080081b4

080080d8 <__retarget_lock_acquire_recursive>:
 80080d8:	4770      	bx	lr

080080da <__retarget_lock_release_recursive>:
 80080da:	4770      	bx	lr

080080dc <_free_r>:
 80080dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080de:	2900      	cmp	r1, #0
 80080e0:	d044      	beq.n	800816c <_free_r+0x90>
 80080e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e6:	9001      	str	r0, [sp, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f1a1 0404 	sub.w	r4, r1, #4
 80080ee:	bfb8      	it	lt
 80080f0:	18e4      	addlt	r4, r4, r3
 80080f2:	f7ff ffa3 	bl	800803c <__malloc_lock>
 80080f6:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <_free_r+0x94>)
 80080f8:	9801      	ldr	r0, [sp, #4]
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	b933      	cbnz	r3, 800810c <_free_r+0x30>
 80080fe:	6063      	str	r3, [r4, #4]
 8008100:	6014      	str	r4, [r2, #0]
 8008102:	b003      	add	sp, #12
 8008104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008108:	f7ff bf9e 	b.w	8008048 <__malloc_unlock>
 800810c:	42a3      	cmp	r3, r4
 800810e:	d908      	bls.n	8008122 <_free_r+0x46>
 8008110:	6825      	ldr	r5, [r4, #0]
 8008112:	1961      	adds	r1, r4, r5
 8008114:	428b      	cmp	r3, r1
 8008116:	bf01      	itttt	eq
 8008118:	6819      	ldreq	r1, [r3, #0]
 800811a:	685b      	ldreq	r3, [r3, #4]
 800811c:	1949      	addeq	r1, r1, r5
 800811e:	6021      	streq	r1, [r4, #0]
 8008120:	e7ed      	b.n	80080fe <_free_r+0x22>
 8008122:	461a      	mov	r2, r3
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	b10b      	cbz	r3, 800812c <_free_r+0x50>
 8008128:	42a3      	cmp	r3, r4
 800812a:	d9fa      	bls.n	8008122 <_free_r+0x46>
 800812c:	6811      	ldr	r1, [r2, #0]
 800812e:	1855      	adds	r5, r2, r1
 8008130:	42a5      	cmp	r5, r4
 8008132:	d10b      	bne.n	800814c <_free_r+0x70>
 8008134:	6824      	ldr	r4, [r4, #0]
 8008136:	4421      	add	r1, r4
 8008138:	1854      	adds	r4, r2, r1
 800813a:	42a3      	cmp	r3, r4
 800813c:	6011      	str	r1, [r2, #0]
 800813e:	d1e0      	bne.n	8008102 <_free_r+0x26>
 8008140:	681c      	ldr	r4, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	6053      	str	r3, [r2, #4]
 8008146:	440c      	add	r4, r1
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	e7da      	b.n	8008102 <_free_r+0x26>
 800814c:	d902      	bls.n	8008154 <_free_r+0x78>
 800814e:	230c      	movs	r3, #12
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	e7d6      	b.n	8008102 <_free_r+0x26>
 8008154:	6825      	ldr	r5, [r4, #0]
 8008156:	1961      	adds	r1, r4, r5
 8008158:	428b      	cmp	r3, r1
 800815a:	bf04      	itt	eq
 800815c:	6819      	ldreq	r1, [r3, #0]
 800815e:	685b      	ldreq	r3, [r3, #4]
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	bf04      	itt	eq
 8008164:	1949      	addeq	r1, r1, r5
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	6054      	str	r4, [r2, #4]
 800816a:	e7ca      	b.n	8008102 <_free_r+0x26>
 800816c:	b003      	add	sp, #12
 800816e:	bd30      	pop	{r4, r5, pc}
 8008170:	2000089c 	.word	0x2000089c

08008174 <_init>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr

08008180 <_fini>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr
